
USBjoy_DiscoveryBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010384  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dbc  08010448  08010448  00011448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011204  08011204  0001335c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08011204  08011204  0001335c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08011204  08011204  0001335c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011204  08011204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011208  08011208  00012208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000035c  20000000  0801120c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c84  2000035c  08011568  0001335c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fe0  08011568  00013fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001335c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6e5  00000000  00000000  00013384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047a8  00000000  00000000  0002fa69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00034218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001345  00000000  00000000  00035b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206f9  00000000  00000000  00036e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c71  00000000  00000000  0005755e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aba95  00000000  00000000  0007a1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125c64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e8  00000000  00000000  00125ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0012c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000035c 	.word	0x2000035c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801042c 	.word	0x0801042c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000360 	.word	0x20000360
 8000104:	0801042c 	.word	0x0801042c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ffc5 	bl	80013cc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff09 	bl	8001264 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffb7 	bl	80013cc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffad 	bl	80013cc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff33 	bl	80012ec <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff29 	bl	80012ec <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	b5c0      	push	{r6, r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	9000      	str	r0, [sp, #0]
 80004b6:	9101      	str	r1, [sp, #4]
 80004b8:	030e      	lsls	r6, r1, #12
 80004ba:	004c      	lsls	r4, r1, #1
 80004bc:	0fcd      	lsrs	r5, r1, #31
 80004be:	0a71      	lsrs	r1, r6, #9
 80004c0:	9e00      	ldr	r6, [sp, #0]
 80004c2:	005f      	lsls	r7, r3, #1
 80004c4:	0f76      	lsrs	r6, r6, #29
 80004c6:	430e      	orrs	r6, r1
 80004c8:	9900      	ldr	r1, [sp, #0]
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	00c9      	lsls	r1, r1, #3
 80004d0:	4689      	mov	r9, r1
 80004d2:	0319      	lsls	r1, r3, #12
 80004d4:	0d7b      	lsrs	r3, r7, #21
 80004d6:	4698      	mov	r8, r3
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	0a49      	lsrs	r1, r1, #9
 80004dc:	0fdb      	lsrs	r3, r3, #31
 80004de:	469c      	mov	ip, r3
 80004e0:	9b00      	ldr	r3, [sp, #0]
 80004e2:	9a00      	ldr	r2, [sp, #0]
 80004e4:	0f5b      	lsrs	r3, r3, #29
 80004e6:	430b      	orrs	r3, r1
 80004e8:	4641      	mov	r1, r8
 80004ea:	0d64      	lsrs	r4, r4, #21
 80004ec:	00d2      	lsls	r2, r2, #3
 80004ee:	1a61      	subs	r1, r4, r1
 80004f0:	4565      	cmp	r5, ip
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x4e>
 80004f4:	e0a6      	b.n	8000644 <__aeabi_dadd+0x19c>
 80004f6:	2900      	cmp	r1, #0
 80004f8:	dd72      	ble.n	80005e0 <__aeabi_dadd+0x138>
 80004fa:	4647      	mov	r7, r8
 80004fc:	2f00      	cmp	r7, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e0dd      	b.n	80006be <__aeabi_dadd+0x216>
 8000502:	4fcc      	ldr	r7, [pc, #816]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000504:	42bc      	cmp	r4, r7
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0x62>
 8000508:	e19a      	b.n	8000840 <__aeabi_dadd+0x398>
 800050a:	2701      	movs	r7, #1
 800050c:	2938      	cmp	r1, #56	@ 0x38
 800050e:	dc17      	bgt.n	8000540 <__aeabi_dadd+0x98>
 8000510:	2780      	movs	r7, #128	@ 0x80
 8000512:	043f      	lsls	r7, r7, #16
 8000514:	433b      	orrs	r3, r7
 8000516:	291f      	cmp	r1, #31
 8000518:	dd00      	ble.n	800051c <__aeabi_dadd+0x74>
 800051a:	e1dd      	b.n	80008d8 <__aeabi_dadd+0x430>
 800051c:	2720      	movs	r7, #32
 800051e:	1a78      	subs	r0, r7, r1
 8000520:	001f      	movs	r7, r3
 8000522:	4087      	lsls	r7, r0
 8000524:	46ba      	mov	sl, r7
 8000526:	0017      	movs	r7, r2
 8000528:	40cf      	lsrs	r7, r1
 800052a:	4684      	mov	ip, r0
 800052c:	0038      	movs	r0, r7
 800052e:	4657      	mov	r7, sl
 8000530:	4307      	orrs	r7, r0
 8000532:	4660      	mov	r0, ip
 8000534:	4082      	lsls	r2, r0
 8000536:	40cb      	lsrs	r3, r1
 8000538:	1e50      	subs	r0, r2, #1
 800053a:	4182      	sbcs	r2, r0
 800053c:	1af6      	subs	r6, r6, r3
 800053e:	4317      	orrs	r7, r2
 8000540:	464b      	mov	r3, r9
 8000542:	1bdf      	subs	r7, r3, r7
 8000544:	45b9      	cmp	r9, r7
 8000546:	4180      	sbcs	r0, r0
 8000548:	4240      	negs	r0, r0
 800054a:	1a36      	subs	r6, r6, r0
 800054c:	0233      	lsls	r3, r6, #8
 800054e:	d400      	bmi.n	8000552 <__aeabi_dadd+0xaa>
 8000550:	e0ff      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000552:	0276      	lsls	r6, r6, #9
 8000554:	0a76      	lsrs	r6, r6, #9
 8000556:	2e00      	cmp	r6, #0
 8000558:	d100      	bne.n	800055c <__aeabi_dadd+0xb4>
 800055a:	e13c      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800055c:	0030      	movs	r0, r6
 800055e:	f001 ff43 	bl	80023e8 <__clzsi2>
 8000562:	0003      	movs	r3, r0
 8000564:	3b08      	subs	r3, #8
 8000566:	2120      	movs	r1, #32
 8000568:	0038      	movs	r0, r7
 800056a:	1aca      	subs	r2, r1, r3
 800056c:	40d0      	lsrs	r0, r2
 800056e:	409e      	lsls	r6, r3
 8000570:	0002      	movs	r2, r0
 8000572:	409f      	lsls	r7, r3
 8000574:	4332      	orrs	r2, r6
 8000576:	429c      	cmp	r4, r3
 8000578:	dd00      	ble.n	800057c <__aeabi_dadd+0xd4>
 800057a:	e1a6      	b.n	80008ca <__aeabi_dadd+0x422>
 800057c:	1b18      	subs	r0, r3, r4
 800057e:	3001      	adds	r0, #1
 8000580:	1a09      	subs	r1, r1, r0
 8000582:	003e      	movs	r6, r7
 8000584:	408f      	lsls	r7, r1
 8000586:	40c6      	lsrs	r6, r0
 8000588:	1e7b      	subs	r3, r7, #1
 800058a:	419f      	sbcs	r7, r3
 800058c:	0013      	movs	r3, r2
 800058e:	408b      	lsls	r3, r1
 8000590:	4337      	orrs	r7, r6
 8000592:	431f      	orrs	r7, r3
 8000594:	40c2      	lsrs	r2, r0
 8000596:	003b      	movs	r3, r7
 8000598:	0016      	movs	r6, r2
 800059a:	2400      	movs	r4, #0
 800059c:	4313      	orrs	r3, r2
 800059e:	d100      	bne.n	80005a2 <__aeabi_dadd+0xfa>
 80005a0:	e1df      	b.n	8000962 <__aeabi_dadd+0x4ba>
 80005a2:	077b      	lsls	r3, r7, #29
 80005a4:	d100      	bne.n	80005a8 <__aeabi_dadd+0x100>
 80005a6:	e332      	b.n	8000c0e <__aeabi_dadd+0x766>
 80005a8:	230f      	movs	r3, #15
 80005aa:	003a      	movs	r2, r7
 80005ac:	403b      	ands	r3, r7
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d004      	beq.n	80005bc <__aeabi_dadd+0x114>
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	42ba      	cmp	r2, r7
 80005b6:	41bf      	sbcs	r7, r7
 80005b8:	427f      	negs	r7, r7
 80005ba:	19f6      	adds	r6, r6, r7
 80005bc:	0233      	lsls	r3, r6, #8
 80005be:	d400      	bmi.n	80005c2 <__aeabi_dadd+0x11a>
 80005c0:	e323      	b.n	8000c0a <__aeabi_dadd+0x762>
 80005c2:	4b9c      	ldr	r3, [pc, #624]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c4:	3401      	adds	r4, #1
 80005c6:	429c      	cmp	r4, r3
 80005c8:	d100      	bne.n	80005cc <__aeabi_dadd+0x124>
 80005ca:	e0b4      	b.n	8000736 <__aeabi_dadd+0x28e>
 80005cc:	4b9a      	ldr	r3, [pc, #616]	@ (8000838 <__aeabi_dadd+0x390>)
 80005ce:	0564      	lsls	r4, r4, #21
 80005d0:	401e      	ands	r6, r3
 80005d2:	0d64      	lsrs	r4, r4, #21
 80005d4:	0777      	lsls	r7, r6, #29
 80005d6:	08d2      	lsrs	r2, r2, #3
 80005d8:	0276      	lsls	r6, r6, #9
 80005da:	4317      	orrs	r7, r2
 80005dc:	0b36      	lsrs	r6, r6, #12
 80005de:	e0ac      	b.n	800073a <__aeabi_dadd+0x292>
 80005e0:	2900      	cmp	r1, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x13e>
 80005e4:	e07e      	b.n	80006e4 <__aeabi_dadd+0x23c>
 80005e6:	4641      	mov	r1, r8
 80005e8:	1b09      	subs	r1, r1, r4
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d000      	beq.n	80005f0 <__aeabi_dadd+0x148>
 80005ee:	e160      	b.n	80008b2 <__aeabi_dadd+0x40a>
 80005f0:	0034      	movs	r4, r6
 80005f2:	4648      	mov	r0, r9
 80005f4:	4304      	orrs	r4, r0
 80005f6:	d100      	bne.n	80005fa <__aeabi_dadd+0x152>
 80005f8:	e1c9      	b.n	800098e <__aeabi_dadd+0x4e6>
 80005fa:	1e4c      	subs	r4, r1, #1
 80005fc:	2901      	cmp	r1, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e22e      	b.n	8000a60 <__aeabi_dadd+0x5b8>
 8000602:	4d8c      	ldr	r5, [pc, #560]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000604:	42a9      	cmp	r1, r5
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e224      	b.n	8000a54 <__aeabi_dadd+0x5ac>
 800060a:	2701      	movs	r7, #1
 800060c:	2c38      	cmp	r4, #56	@ 0x38
 800060e:	dc11      	bgt.n	8000634 <__aeabi_dadd+0x18c>
 8000610:	0021      	movs	r1, r4
 8000612:	291f      	cmp	r1, #31
 8000614:	dd00      	ble.n	8000618 <__aeabi_dadd+0x170>
 8000616:	e20b      	b.n	8000a30 <__aeabi_dadd+0x588>
 8000618:	2420      	movs	r4, #32
 800061a:	0037      	movs	r7, r6
 800061c:	4648      	mov	r0, r9
 800061e:	1a64      	subs	r4, r4, r1
 8000620:	40a7      	lsls	r7, r4
 8000622:	40c8      	lsrs	r0, r1
 8000624:	4307      	orrs	r7, r0
 8000626:	4648      	mov	r0, r9
 8000628:	40a0      	lsls	r0, r4
 800062a:	40ce      	lsrs	r6, r1
 800062c:	1e44      	subs	r4, r0, #1
 800062e:	41a0      	sbcs	r0, r4
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	4307      	orrs	r7, r0
 8000634:	1bd7      	subs	r7, r2, r7
 8000636:	42ba      	cmp	r2, r7
 8000638:	4192      	sbcs	r2, r2
 800063a:	4252      	negs	r2, r2
 800063c:	4665      	mov	r5, ip
 800063e:	4644      	mov	r4, r8
 8000640:	1a9e      	subs	r6, r3, r2
 8000642:	e783      	b.n	800054c <__aeabi_dadd+0xa4>
 8000644:	2900      	cmp	r1, #0
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e09c      	b.n	8000784 <__aeabi_dadd+0x2dc>
 800064a:	4647      	mov	r7, r8
 800064c:	2f00      	cmp	r7, #0
 800064e:	d167      	bne.n	8000720 <__aeabi_dadd+0x278>
 8000650:	001f      	movs	r7, r3
 8000652:	4317      	orrs	r7, r2
 8000654:	d100      	bne.n	8000658 <__aeabi_dadd+0x1b0>
 8000656:	e0e4      	b.n	8000822 <__aeabi_dadd+0x37a>
 8000658:	1e48      	subs	r0, r1, #1
 800065a:	2901      	cmp	r1, #1
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x1b8>
 800065e:	e19b      	b.n	8000998 <__aeabi_dadd+0x4f0>
 8000660:	4f74      	ldr	r7, [pc, #464]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000662:	42b9      	cmp	r1, r7
 8000664:	d100      	bne.n	8000668 <__aeabi_dadd+0x1c0>
 8000666:	e0eb      	b.n	8000840 <__aeabi_dadd+0x398>
 8000668:	2701      	movs	r7, #1
 800066a:	0001      	movs	r1, r0
 800066c:	2838      	cmp	r0, #56	@ 0x38
 800066e:	dc11      	bgt.n	8000694 <__aeabi_dadd+0x1ec>
 8000670:	291f      	cmp	r1, #31
 8000672:	dd00      	ble.n	8000676 <__aeabi_dadd+0x1ce>
 8000674:	e1c7      	b.n	8000a06 <__aeabi_dadd+0x55e>
 8000676:	2720      	movs	r7, #32
 8000678:	1a78      	subs	r0, r7, r1
 800067a:	001f      	movs	r7, r3
 800067c:	4684      	mov	ip, r0
 800067e:	4087      	lsls	r7, r0
 8000680:	0010      	movs	r0, r2
 8000682:	40c8      	lsrs	r0, r1
 8000684:	4307      	orrs	r7, r0
 8000686:	4660      	mov	r0, ip
 8000688:	4082      	lsls	r2, r0
 800068a:	40cb      	lsrs	r3, r1
 800068c:	1e50      	subs	r0, r2, #1
 800068e:	4182      	sbcs	r2, r0
 8000690:	18f6      	adds	r6, r6, r3
 8000692:	4317      	orrs	r7, r2
 8000694:	444f      	add	r7, r9
 8000696:	454f      	cmp	r7, r9
 8000698:	4180      	sbcs	r0, r0
 800069a:	4240      	negs	r0, r0
 800069c:	1836      	adds	r6, r6, r0
 800069e:	0233      	lsls	r3, r6, #8
 80006a0:	d557      	bpl.n	8000752 <__aeabi_dadd+0x2aa>
 80006a2:	4b64      	ldr	r3, [pc, #400]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006a4:	3401      	adds	r4, #1
 80006a6:	429c      	cmp	r4, r3
 80006a8:	d045      	beq.n	8000736 <__aeabi_dadd+0x28e>
 80006aa:	2101      	movs	r1, #1
 80006ac:	4b62      	ldr	r3, [pc, #392]	@ (8000838 <__aeabi_dadd+0x390>)
 80006ae:	087a      	lsrs	r2, r7, #1
 80006b0:	401e      	ands	r6, r3
 80006b2:	4039      	ands	r1, r7
 80006b4:	430a      	orrs	r2, r1
 80006b6:	07f7      	lsls	r7, r6, #31
 80006b8:	4317      	orrs	r7, r2
 80006ba:	0876      	lsrs	r6, r6, #1
 80006bc:	e771      	b.n	80005a2 <__aeabi_dadd+0xfa>
 80006be:	001f      	movs	r7, r3
 80006c0:	4317      	orrs	r7, r2
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x21e>
 80006c4:	e0ad      	b.n	8000822 <__aeabi_dadd+0x37a>
 80006c6:	1e4f      	subs	r7, r1, #1
 80006c8:	46bc      	mov	ip, r7
 80006ca:	2901      	cmp	r1, #1
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e182      	b.n	80009d6 <__aeabi_dadd+0x52e>
 80006d0:	4f58      	ldr	r7, [pc, #352]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006d2:	42b9      	cmp	r1, r7
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x230>
 80006d6:	e190      	b.n	80009fa <__aeabi_dadd+0x552>
 80006d8:	4661      	mov	r1, ip
 80006da:	2701      	movs	r7, #1
 80006dc:	2938      	cmp	r1, #56	@ 0x38
 80006de:	dd00      	ble.n	80006e2 <__aeabi_dadd+0x23a>
 80006e0:	e72e      	b.n	8000540 <__aeabi_dadd+0x98>
 80006e2:	e718      	b.n	8000516 <__aeabi_dadd+0x6e>
 80006e4:	4f55      	ldr	r7, [pc, #340]	@ (800083c <__aeabi_dadd+0x394>)
 80006e6:	1c61      	adds	r1, r4, #1
 80006e8:	4239      	tst	r1, r7
 80006ea:	d000      	beq.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e0d0      	b.n	8000890 <__aeabi_dadd+0x3e8>
 80006ee:	0031      	movs	r1, r6
 80006f0:	4648      	mov	r0, r9
 80006f2:	001f      	movs	r7, r3
 80006f4:	4301      	orrs	r1, r0
 80006f6:	4317      	orrs	r7, r2
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d000      	beq.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e13d      	b.n	800097a <__aeabi_dadd+0x4d2>
 80006fe:	2900      	cmp	r1, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x25c>
 8000702:	e1bc      	b.n	8000a7e <__aeabi_dadd+0x5d6>
 8000704:	2f00      	cmp	r7, #0
 8000706:	d000      	beq.n	800070a <__aeabi_dadd+0x262>
 8000708:	e1bf      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 800070a:	464b      	mov	r3, r9
 800070c:	2100      	movs	r1, #0
 800070e:	08d8      	lsrs	r0, r3, #3
 8000710:	0777      	lsls	r7, r6, #29
 8000712:	4307      	orrs	r7, r0
 8000714:	08f0      	lsrs	r0, r6, #3
 8000716:	0306      	lsls	r6, r0, #12
 8000718:	054c      	lsls	r4, r1, #21
 800071a:	0b36      	lsrs	r6, r6, #12
 800071c:	0d64      	lsrs	r4, r4, #21
 800071e:	e00c      	b.n	800073a <__aeabi_dadd+0x292>
 8000720:	4f44      	ldr	r7, [pc, #272]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000722:	42bc      	cmp	r4, r7
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e08b      	b.n	8000840 <__aeabi_dadd+0x398>
 8000728:	2701      	movs	r7, #1
 800072a:	2938      	cmp	r1, #56	@ 0x38
 800072c:	dcb2      	bgt.n	8000694 <__aeabi_dadd+0x1ec>
 800072e:	2780      	movs	r7, #128	@ 0x80
 8000730:	043f      	lsls	r7, r7, #16
 8000732:	433b      	orrs	r3, r7
 8000734:	e79c      	b.n	8000670 <__aeabi_dadd+0x1c8>
 8000736:	2600      	movs	r6, #0
 8000738:	2700      	movs	r7, #0
 800073a:	0524      	lsls	r4, r4, #20
 800073c:	4334      	orrs	r4, r6
 800073e:	07ed      	lsls	r5, r5, #31
 8000740:	432c      	orrs	r4, r5
 8000742:	0038      	movs	r0, r7
 8000744:	0021      	movs	r1, r4
 8000746:	b002      	add	sp, #8
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	077b      	lsls	r3, r7, #29
 8000754:	d004      	beq.n	8000760 <__aeabi_dadd+0x2b8>
 8000756:	230f      	movs	r3, #15
 8000758:	403b      	ands	r3, r7
 800075a:	2b04      	cmp	r3, #4
 800075c:	d000      	beq.n	8000760 <__aeabi_dadd+0x2b8>
 800075e:	e728      	b.n	80005b2 <__aeabi_dadd+0x10a>
 8000760:	08f8      	lsrs	r0, r7, #3
 8000762:	4b34      	ldr	r3, [pc, #208]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000764:	0777      	lsls	r7, r6, #29
 8000766:	4307      	orrs	r7, r0
 8000768:	08f0      	lsrs	r0, r6, #3
 800076a:	429c      	cmp	r4, r3
 800076c:	d000      	beq.n	8000770 <__aeabi_dadd+0x2c8>
 800076e:	e24a      	b.n	8000c06 <__aeabi_dadd+0x75e>
 8000770:	003b      	movs	r3, r7
 8000772:	4303      	orrs	r3, r0
 8000774:	d059      	beq.n	800082a <__aeabi_dadd+0x382>
 8000776:	2680      	movs	r6, #128	@ 0x80
 8000778:	0336      	lsls	r6, r6, #12
 800077a:	4306      	orrs	r6, r0
 800077c:	0336      	lsls	r6, r6, #12
 800077e:	4c2d      	ldr	r4, [pc, #180]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000780:	0b36      	lsrs	r6, r6, #12
 8000782:	e7da      	b.n	800073a <__aeabi_dadd+0x292>
 8000784:	2900      	cmp	r1, #0
 8000786:	d061      	beq.n	800084c <__aeabi_dadd+0x3a4>
 8000788:	4641      	mov	r1, r8
 800078a:	1b09      	subs	r1, r1, r4
 800078c:	2c00      	cmp	r4, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x2ea>
 8000790:	e0b9      	b.n	8000906 <__aeabi_dadd+0x45e>
 8000792:	4c28      	ldr	r4, [pc, #160]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000794:	45a0      	cmp	r8, r4
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x2f2>
 8000798:	e1a5      	b.n	8000ae6 <__aeabi_dadd+0x63e>
 800079a:	2701      	movs	r7, #1
 800079c:	2938      	cmp	r1, #56	@ 0x38
 800079e:	dc13      	bgt.n	80007c8 <__aeabi_dadd+0x320>
 80007a0:	2480      	movs	r4, #128	@ 0x80
 80007a2:	0424      	lsls	r4, r4, #16
 80007a4:	4326      	orrs	r6, r4
 80007a6:	291f      	cmp	r1, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e1c8      	b.n	8000b3e <__aeabi_dadd+0x696>
 80007ac:	2420      	movs	r4, #32
 80007ae:	0037      	movs	r7, r6
 80007b0:	4648      	mov	r0, r9
 80007b2:	1a64      	subs	r4, r4, r1
 80007b4:	40a7      	lsls	r7, r4
 80007b6:	40c8      	lsrs	r0, r1
 80007b8:	4307      	orrs	r7, r0
 80007ba:	4648      	mov	r0, r9
 80007bc:	40a0      	lsls	r0, r4
 80007be:	40ce      	lsrs	r6, r1
 80007c0:	1e44      	subs	r4, r0, #1
 80007c2:	41a0      	sbcs	r0, r4
 80007c4:	199b      	adds	r3, r3, r6
 80007c6:	4307      	orrs	r7, r0
 80007c8:	18bf      	adds	r7, r7, r2
 80007ca:	4297      	cmp	r7, r2
 80007cc:	4192      	sbcs	r2, r2
 80007ce:	4252      	negs	r2, r2
 80007d0:	4644      	mov	r4, r8
 80007d2:	18d6      	adds	r6, r2, r3
 80007d4:	e763      	b.n	800069e <__aeabi_dadd+0x1f6>
 80007d6:	0038      	movs	r0, r7
 80007d8:	f001 fe06 	bl	80023e8 <__clzsi2>
 80007dc:	0003      	movs	r3, r0
 80007de:	3318      	adds	r3, #24
 80007e0:	2b1f      	cmp	r3, #31
 80007e2:	dc00      	bgt.n	80007e6 <__aeabi_dadd+0x33e>
 80007e4:	e6bf      	b.n	8000566 <__aeabi_dadd+0xbe>
 80007e6:	003a      	movs	r2, r7
 80007e8:	3808      	subs	r0, #8
 80007ea:	4082      	lsls	r2, r0
 80007ec:	429c      	cmp	r4, r3
 80007ee:	dd00      	ble.n	80007f2 <__aeabi_dadd+0x34a>
 80007f0:	e083      	b.n	80008fa <__aeabi_dadd+0x452>
 80007f2:	1b1b      	subs	r3, r3, r4
 80007f4:	1c58      	adds	r0, r3, #1
 80007f6:	281f      	cmp	r0, #31
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x354>
 80007fa:	e1b4      	b.n	8000b66 <__aeabi_dadd+0x6be>
 80007fc:	0017      	movs	r7, r2
 80007fe:	3b1f      	subs	r3, #31
 8000800:	40df      	lsrs	r7, r3
 8000802:	2820      	cmp	r0, #32
 8000804:	d005      	beq.n	8000812 <__aeabi_dadd+0x36a>
 8000806:	2340      	movs	r3, #64	@ 0x40
 8000808:	1a1b      	subs	r3, r3, r0
 800080a:	409a      	lsls	r2, r3
 800080c:	1e53      	subs	r3, r2, #1
 800080e:	419a      	sbcs	r2, r3
 8000810:	4317      	orrs	r7, r2
 8000812:	2400      	movs	r4, #0
 8000814:	2f00      	cmp	r7, #0
 8000816:	d00a      	beq.n	800082e <__aeabi_dadd+0x386>
 8000818:	077b      	lsls	r3, r7, #29
 800081a:	d000      	beq.n	800081e <__aeabi_dadd+0x376>
 800081c:	e6c4      	b.n	80005a8 <__aeabi_dadd+0x100>
 800081e:	0026      	movs	r6, r4
 8000820:	e79e      	b.n	8000760 <__aeabi_dadd+0x2b8>
 8000822:	464b      	mov	r3, r9
 8000824:	000c      	movs	r4, r1
 8000826:	08d8      	lsrs	r0, r3, #3
 8000828:	e79b      	b.n	8000762 <__aeabi_dadd+0x2ba>
 800082a:	2700      	movs	r7, #0
 800082c:	4c01      	ldr	r4, [pc, #4]	@ (8000834 <__aeabi_dadd+0x38c>)
 800082e:	2600      	movs	r6, #0
 8000830:	e783      	b.n	800073a <__aeabi_dadd+0x292>
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	000007ff 	.word	0x000007ff
 8000838:	ff7fffff 	.word	0xff7fffff
 800083c:	000007fe 	.word	0x000007fe
 8000840:	464b      	mov	r3, r9
 8000842:	0777      	lsls	r7, r6, #29
 8000844:	08d8      	lsrs	r0, r3, #3
 8000846:	4307      	orrs	r7, r0
 8000848:	08f0      	lsrs	r0, r6, #3
 800084a:	e791      	b.n	8000770 <__aeabi_dadd+0x2c8>
 800084c:	4fcd      	ldr	r7, [pc, #820]	@ (8000b84 <__aeabi_dadd+0x6dc>)
 800084e:	1c61      	adds	r1, r4, #1
 8000850:	4239      	tst	r1, r7
 8000852:	d16b      	bne.n	800092c <__aeabi_dadd+0x484>
 8000854:	0031      	movs	r1, r6
 8000856:	4648      	mov	r0, r9
 8000858:	4301      	orrs	r1, r0
 800085a:	2c00      	cmp	r4, #0
 800085c:	d000      	beq.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e14b      	b.n	8000af8 <__aeabi_dadd+0x650>
 8000860:	001f      	movs	r7, r3
 8000862:	4317      	orrs	r7, r2
 8000864:	2900      	cmp	r1, #0
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x3c2>
 8000868:	e181      	b.n	8000b6e <__aeabi_dadd+0x6c6>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x3c8>
 800086e:	e74c      	b.n	800070a <__aeabi_dadd+0x262>
 8000870:	444a      	add	r2, r9
 8000872:	454a      	cmp	r2, r9
 8000874:	4180      	sbcs	r0, r0
 8000876:	18f6      	adds	r6, r6, r3
 8000878:	4240      	negs	r0, r0
 800087a:	1836      	adds	r6, r6, r0
 800087c:	0233      	lsls	r3, r6, #8
 800087e:	d500      	bpl.n	8000882 <__aeabi_dadd+0x3da>
 8000880:	e1b0      	b.n	8000be4 <__aeabi_dadd+0x73c>
 8000882:	0017      	movs	r7, r2
 8000884:	4691      	mov	r9, r2
 8000886:	4337      	orrs	r7, r6
 8000888:	d000      	beq.n	800088c <__aeabi_dadd+0x3e4>
 800088a:	e73e      	b.n	800070a <__aeabi_dadd+0x262>
 800088c:	2600      	movs	r6, #0
 800088e:	e754      	b.n	800073a <__aeabi_dadd+0x292>
 8000890:	4649      	mov	r1, r9
 8000892:	1a89      	subs	r1, r1, r2
 8000894:	4688      	mov	r8, r1
 8000896:	45c1      	cmp	r9, r8
 8000898:	41bf      	sbcs	r7, r7
 800089a:	1af1      	subs	r1, r6, r3
 800089c:	427f      	negs	r7, r7
 800089e:	1bc9      	subs	r1, r1, r7
 80008a0:	020f      	lsls	r7, r1, #8
 80008a2:	d461      	bmi.n	8000968 <__aeabi_dadd+0x4c0>
 80008a4:	4647      	mov	r7, r8
 80008a6:	430f      	orrs	r7, r1
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x404>
 80008aa:	e0bd      	b.n	8000a28 <__aeabi_dadd+0x580>
 80008ac:	000e      	movs	r6, r1
 80008ae:	4647      	mov	r7, r8
 80008b0:	e651      	b.n	8000556 <__aeabi_dadd+0xae>
 80008b2:	4cb5      	ldr	r4, [pc, #724]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 80008b4:	45a0      	cmp	r8, r4
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x412>
 80008b8:	e100      	b.n	8000abc <__aeabi_dadd+0x614>
 80008ba:	2701      	movs	r7, #1
 80008bc:	2938      	cmp	r1, #56	@ 0x38
 80008be:	dd00      	ble.n	80008c2 <__aeabi_dadd+0x41a>
 80008c0:	e6b8      	b.n	8000634 <__aeabi_dadd+0x18c>
 80008c2:	2480      	movs	r4, #128	@ 0x80
 80008c4:	0424      	lsls	r4, r4, #16
 80008c6:	4326      	orrs	r6, r4
 80008c8:	e6a3      	b.n	8000612 <__aeabi_dadd+0x16a>
 80008ca:	4eb0      	ldr	r6, [pc, #704]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80008cc:	1ae4      	subs	r4, r4, r3
 80008ce:	4016      	ands	r6, r2
 80008d0:	077b      	lsls	r3, r7, #29
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e73f      	b.n	8000756 <__aeabi_dadd+0x2ae>
 80008d6:	e743      	b.n	8000760 <__aeabi_dadd+0x2b8>
 80008d8:	000f      	movs	r7, r1
 80008da:	0018      	movs	r0, r3
 80008dc:	3f20      	subs	r7, #32
 80008de:	40f8      	lsrs	r0, r7
 80008e0:	4684      	mov	ip, r0
 80008e2:	2920      	cmp	r1, #32
 80008e4:	d003      	beq.n	80008ee <__aeabi_dadd+0x446>
 80008e6:	2740      	movs	r7, #64	@ 0x40
 80008e8:	1a79      	subs	r1, r7, r1
 80008ea:	408b      	lsls	r3, r1
 80008ec:	431a      	orrs	r2, r3
 80008ee:	1e53      	subs	r3, r2, #1
 80008f0:	419a      	sbcs	r2, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	0017      	movs	r7, r2
 80008f6:	431f      	orrs	r7, r3
 80008f8:	e622      	b.n	8000540 <__aeabi_dadd+0x98>
 80008fa:	48a4      	ldr	r0, [pc, #656]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80008fc:	1ae1      	subs	r1, r4, r3
 80008fe:	4010      	ands	r0, r2
 8000900:	0747      	lsls	r7, r0, #29
 8000902:	08c0      	lsrs	r0, r0, #3
 8000904:	e707      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000906:	0034      	movs	r4, r6
 8000908:	4648      	mov	r0, r9
 800090a:	4304      	orrs	r4, r0
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x468>
 800090e:	e0fa      	b.n	8000b06 <__aeabi_dadd+0x65e>
 8000910:	1e4c      	subs	r4, r1, #1
 8000912:	2901      	cmp	r1, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x470>
 8000916:	e0d7      	b.n	8000ac8 <__aeabi_dadd+0x620>
 8000918:	4f9b      	ldr	r7, [pc, #620]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800091a:	42b9      	cmp	r1, r7
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x478>
 800091e:	e0e2      	b.n	8000ae6 <__aeabi_dadd+0x63e>
 8000920:	2701      	movs	r7, #1
 8000922:	2c38      	cmp	r4, #56	@ 0x38
 8000924:	dd00      	ble.n	8000928 <__aeabi_dadd+0x480>
 8000926:	e74f      	b.n	80007c8 <__aeabi_dadd+0x320>
 8000928:	0021      	movs	r1, r4
 800092a:	e73c      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 800092c:	4c96      	ldr	r4, [pc, #600]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800092e:	42a1      	cmp	r1, r4
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x48c>
 8000932:	e0dd      	b.n	8000af0 <__aeabi_dadd+0x648>
 8000934:	444a      	add	r2, r9
 8000936:	454a      	cmp	r2, r9
 8000938:	4180      	sbcs	r0, r0
 800093a:	18f3      	adds	r3, r6, r3
 800093c:	4240      	negs	r0, r0
 800093e:	1818      	adds	r0, r3, r0
 8000940:	07c7      	lsls	r7, r0, #31
 8000942:	0852      	lsrs	r2, r2, #1
 8000944:	4317      	orrs	r7, r2
 8000946:	0846      	lsrs	r6, r0, #1
 8000948:	0752      	lsls	r2, r2, #29
 800094a:	d005      	beq.n	8000958 <__aeabi_dadd+0x4b0>
 800094c:	220f      	movs	r2, #15
 800094e:	000c      	movs	r4, r1
 8000950:	403a      	ands	r2, r7
 8000952:	2a04      	cmp	r2, #4
 8000954:	d000      	beq.n	8000958 <__aeabi_dadd+0x4b0>
 8000956:	e62c      	b.n	80005b2 <__aeabi_dadd+0x10a>
 8000958:	0776      	lsls	r6, r6, #29
 800095a:	08ff      	lsrs	r7, r7, #3
 800095c:	4337      	orrs	r7, r6
 800095e:	0900      	lsrs	r0, r0, #4
 8000960:	e6d9      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000962:	2700      	movs	r7, #0
 8000964:	2600      	movs	r6, #0
 8000966:	e6e8      	b.n	800073a <__aeabi_dadd+0x292>
 8000968:	4649      	mov	r1, r9
 800096a:	1a57      	subs	r7, r2, r1
 800096c:	42ba      	cmp	r2, r7
 800096e:	4192      	sbcs	r2, r2
 8000970:	1b9e      	subs	r6, r3, r6
 8000972:	4252      	negs	r2, r2
 8000974:	4665      	mov	r5, ip
 8000976:	1ab6      	subs	r6, r6, r2
 8000978:	e5ed      	b.n	8000556 <__aeabi_dadd+0xae>
 800097a:	2900      	cmp	r1, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_dadd+0x4d8>
 800097e:	e0c6      	b.n	8000b0e <__aeabi_dadd+0x666>
 8000980:	2f00      	cmp	r7, #0
 8000982:	d167      	bne.n	8000a54 <__aeabi_dadd+0x5ac>
 8000984:	2680      	movs	r6, #128	@ 0x80
 8000986:	2500      	movs	r5, #0
 8000988:	4c7f      	ldr	r4, [pc, #508]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800098a:	0336      	lsls	r6, r6, #12
 800098c:	e6d5      	b.n	800073a <__aeabi_dadd+0x292>
 800098e:	4665      	mov	r5, ip
 8000990:	000c      	movs	r4, r1
 8000992:	001e      	movs	r6, r3
 8000994:	08d0      	lsrs	r0, r2, #3
 8000996:	e6e4      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000998:	444a      	add	r2, r9
 800099a:	454a      	cmp	r2, r9
 800099c:	4180      	sbcs	r0, r0
 800099e:	18f3      	adds	r3, r6, r3
 80009a0:	4240      	negs	r0, r0
 80009a2:	1818      	adds	r0, r3, r0
 80009a4:	0011      	movs	r1, r2
 80009a6:	0203      	lsls	r3, r0, #8
 80009a8:	d400      	bmi.n	80009ac <__aeabi_dadd+0x504>
 80009aa:	e096      	b.n	8000ada <__aeabi_dadd+0x632>
 80009ac:	4b77      	ldr	r3, [pc, #476]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80009ae:	0849      	lsrs	r1, r1, #1
 80009b0:	4018      	ands	r0, r3
 80009b2:	07c3      	lsls	r3, r0, #31
 80009b4:	430b      	orrs	r3, r1
 80009b6:	0844      	lsrs	r4, r0, #1
 80009b8:	0749      	lsls	r1, r1, #29
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x516>
 80009bc:	e129      	b.n	8000c12 <__aeabi_dadd+0x76a>
 80009be:	220f      	movs	r2, #15
 80009c0:	401a      	ands	r2, r3
 80009c2:	2a04      	cmp	r2, #4
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dadd+0x520>
 80009c6:	e0ea      	b.n	8000b9e <__aeabi_dadd+0x6f6>
 80009c8:	1d1f      	adds	r7, r3, #4
 80009ca:	429f      	cmp	r7, r3
 80009cc:	41b6      	sbcs	r6, r6
 80009ce:	4276      	negs	r6, r6
 80009d0:	1936      	adds	r6, r6, r4
 80009d2:	2402      	movs	r4, #2
 80009d4:	e6c4      	b.n	8000760 <__aeabi_dadd+0x2b8>
 80009d6:	4649      	mov	r1, r9
 80009d8:	1a8f      	subs	r7, r1, r2
 80009da:	45b9      	cmp	r9, r7
 80009dc:	4180      	sbcs	r0, r0
 80009de:	1af6      	subs	r6, r6, r3
 80009e0:	4240      	negs	r0, r0
 80009e2:	1a36      	subs	r6, r6, r0
 80009e4:	0233      	lsls	r3, r6, #8
 80009e6:	d406      	bmi.n	80009f6 <__aeabi_dadd+0x54e>
 80009e8:	0773      	lsls	r3, r6, #29
 80009ea:	08ff      	lsrs	r7, r7, #3
 80009ec:	2101      	movs	r1, #1
 80009ee:	431f      	orrs	r7, r3
 80009f0:	08f0      	lsrs	r0, r6, #3
 80009f2:	e690      	b.n	8000716 <__aeabi_dadd+0x26e>
 80009f4:	4665      	mov	r5, ip
 80009f6:	2401      	movs	r4, #1
 80009f8:	e5ab      	b.n	8000552 <__aeabi_dadd+0xaa>
 80009fa:	464b      	mov	r3, r9
 80009fc:	0777      	lsls	r7, r6, #29
 80009fe:	08d8      	lsrs	r0, r3, #3
 8000a00:	4307      	orrs	r7, r0
 8000a02:	08f0      	lsrs	r0, r6, #3
 8000a04:	e6b4      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000a06:	000f      	movs	r7, r1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	3f20      	subs	r7, #32
 8000a0c:	40f8      	lsrs	r0, r7
 8000a0e:	4684      	mov	ip, r0
 8000a10:	2920      	cmp	r1, #32
 8000a12:	d003      	beq.n	8000a1c <__aeabi_dadd+0x574>
 8000a14:	2740      	movs	r7, #64	@ 0x40
 8000a16:	1a79      	subs	r1, r7, r1
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	1e53      	subs	r3, r2, #1
 8000a1e:	419a      	sbcs	r2, r3
 8000a20:	4663      	mov	r3, ip
 8000a22:	0017      	movs	r7, r2
 8000a24:	431f      	orrs	r7, r3
 8000a26:	e635      	b.n	8000694 <__aeabi_dadd+0x1ec>
 8000a28:	2500      	movs	r5, #0
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e684      	b.n	800073a <__aeabi_dadd+0x292>
 8000a30:	000c      	movs	r4, r1
 8000a32:	0035      	movs	r5, r6
 8000a34:	3c20      	subs	r4, #32
 8000a36:	40e5      	lsrs	r5, r4
 8000a38:	2920      	cmp	r1, #32
 8000a3a:	d005      	beq.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a3c:	2440      	movs	r4, #64	@ 0x40
 8000a3e:	1a61      	subs	r1, r4, r1
 8000a40:	408e      	lsls	r6, r1
 8000a42:	4649      	mov	r1, r9
 8000a44:	4331      	orrs	r1, r6
 8000a46:	4689      	mov	r9, r1
 8000a48:	4648      	mov	r0, r9
 8000a4a:	1e41      	subs	r1, r0, #1
 8000a4c:	4188      	sbcs	r0, r1
 8000a4e:	0007      	movs	r7, r0
 8000a50:	432f      	orrs	r7, r5
 8000a52:	e5ef      	b.n	8000634 <__aeabi_dadd+0x18c>
 8000a54:	08d2      	lsrs	r2, r2, #3
 8000a56:	075f      	lsls	r7, r3, #29
 8000a58:	4665      	mov	r5, ip
 8000a5a:	4317      	orrs	r7, r2
 8000a5c:	08d8      	lsrs	r0, r3, #3
 8000a5e:	e687      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000a60:	1a17      	subs	r7, r2, r0
 8000a62:	42ba      	cmp	r2, r7
 8000a64:	4192      	sbcs	r2, r2
 8000a66:	1b9e      	subs	r6, r3, r6
 8000a68:	4252      	negs	r2, r2
 8000a6a:	1ab6      	subs	r6, r6, r2
 8000a6c:	0233      	lsls	r3, r6, #8
 8000a6e:	d4c1      	bmi.n	80009f4 <__aeabi_dadd+0x54c>
 8000a70:	0773      	lsls	r3, r6, #29
 8000a72:	08ff      	lsrs	r7, r7, #3
 8000a74:	4665      	mov	r5, ip
 8000a76:	2101      	movs	r1, #1
 8000a78:	431f      	orrs	r7, r3
 8000a7a:	08f0      	lsrs	r0, r6, #3
 8000a7c:	e64b      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d07b      	beq.n	8000b7a <__aeabi_dadd+0x6d2>
 8000a82:	4665      	mov	r5, ip
 8000a84:	001e      	movs	r6, r3
 8000a86:	4691      	mov	r9, r2
 8000a88:	e63f      	b.n	800070a <__aeabi_dadd+0x262>
 8000a8a:	1a81      	subs	r1, r0, r2
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	45c1      	cmp	r9, r8
 8000a90:	41a4      	sbcs	r4, r4
 8000a92:	1af1      	subs	r1, r6, r3
 8000a94:	4264      	negs	r4, r4
 8000a96:	1b09      	subs	r1, r1, r4
 8000a98:	2480      	movs	r4, #128	@ 0x80
 8000a9a:	0424      	lsls	r4, r4, #16
 8000a9c:	4221      	tst	r1, r4
 8000a9e:	d077      	beq.n	8000b90 <__aeabi_dadd+0x6e8>
 8000aa0:	1a10      	subs	r0, r2, r0
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	4192      	sbcs	r2, r2
 8000aa6:	0007      	movs	r7, r0
 8000aa8:	1b9e      	subs	r6, r3, r6
 8000aaa:	4252      	negs	r2, r2
 8000aac:	1ab6      	subs	r6, r6, r2
 8000aae:	4337      	orrs	r7, r6
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x60c>
 8000ab2:	e0a0      	b.n	8000bf6 <__aeabi_dadd+0x74e>
 8000ab4:	4665      	mov	r5, ip
 8000ab6:	2400      	movs	r4, #0
 8000ab8:	2600      	movs	r6, #0
 8000aba:	e63e      	b.n	800073a <__aeabi_dadd+0x292>
 8000abc:	075f      	lsls	r7, r3, #29
 8000abe:	08d2      	lsrs	r2, r2, #3
 8000ac0:	4665      	mov	r5, ip
 8000ac2:	4317      	orrs	r7, r2
 8000ac4:	08d8      	lsrs	r0, r3, #3
 8000ac6:	e653      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000ac8:	1881      	adds	r1, r0, r2
 8000aca:	4291      	cmp	r1, r2
 8000acc:	4192      	sbcs	r2, r2
 8000ace:	18f0      	adds	r0, r6, r3
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	1880      	adds	r0, r0, r2
 8000ad4:	0203      	lsls	r3, r0, #8
 8000ad6:	d500      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000ad8:	e768      	b.n	80009ac <__aeabi_dadd+0x504>
 8000ada:	0747      	lsls	r7, r0, #29
 8000adc:	08c9      	lsrs	r1, r1, #3
 8000ade:	430f      	orrs	r7, r1
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	e617      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000ae6:	08d2      	lsrs	r2, r2, #3
 8000ae8:	075f      	lsls	r7, r3, #29
 8000aea:	4317      	orrs	r7, r2
 8000aec:	08d8      	lsrs	r0, r3, #3
 8000aee:	e63f      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000af0:	000c      	movs	r4, r1
 8000af2:	2600      	movs	r6, #0
 8000af4:	2700      	movs	r7, #0
 8000af6:	e620      	b.n	800073a <__aeabi_dadd+0x292>
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d156      	bne.n	8000baa <__aeabi_dadd+0x702>
 8000afc:	075f      	lsls	r7, r3, #29
 8000afe:	08d2      	lsrs	r2, r2, #3
 8000b00:	4317      	orrs	r7, r2
 8000b02:	08d8      	lsrs	r0, r3, #3
 8000b04:	e634      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000b06:	000c      	movs	r4, r1
 8000b08:	001e      	movs	r6, r3
 8000b0a:	08d0      	lsrs	r0, r2, #3
 8000b0c:	e629      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000b0e:	08c1      	lsrs	r1, r0, #3
 8000b10:	0770      	lsls	r0, r6, #29
 8000b12:	4301      	orrs	r1, r0
 8000b14:	08f0      	lsrs	r0, r6, #3
 8000b16:	2f00      	cmp	r7, #0
 8000b18:	d062      	beq.n	8000be0 <__aeabi_dadd+0x738>
 8000b1a:	2480      	movs	r4, #128	@ 0x80
 8000b1c:	0324      	lsls	r4, r4, #12
 8000b1e:	4220      	tst	r0, r4
 8000b20:	d007      	beq.n	8000b32 <__aeabi_dadd+0x68a>
 8000b22:	08de      	lsrs	r6, r3, #3
 8000b24:	4226      	tst	r6, r4
 8000b26:	d104      	bne.n	8000b32 <__aeabi_dadd+0x68a>
 8000b28:	4665      	mov	r5, ip
 8000b2a:	0030      	movs	r0, r6
 8000b2c:	08d1      	lsrs	r1, r2, #3
 8000b2e:	075b      	lsls	r3, r3, #29
 8000b30:	4319      	orrs	r1, r3
 8000b32:	0f4f      	lsrs	r7, r1, #29
 8000b34:	00c9      	lsls	r1, r1, #3
 8000b36:	08c9      	lsrs	r1, r1, #3
 8000b38:	077f      	lsls	r7, r7, #29
 8000b3a:	430f      	orrs	r7, r1
 8000b3c:	e618      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000b3e:	000c      	movs	r4, r1
 8000b40:	0030      	movs	r0, r6
 8000b42:	3c20      	subs	r4, #32
 8000b44:	40e0      	lsrs	r0, r4
 8000b46:	4684      	mov	ip, r0
 8000b48:	2920      	cmp	r1, #32
 8000b4a:	d005      	beq.n	8000b58 <__aeabi_dadd+0x6b0>
 8000b4c:	2440      	movs	r4, #64	@ 0x40
 8000b4e:	1a61      	subs	r1, r4, r1
 8000b50:	408e      	lsls	r6, r1
 8000b52:	4649      	mov	r1, r9
 8000b54:	4331      	orrs	r1, r6
 8000b56:	4689      	mov	r9, r1
 8000b58:	4648      	mov	r0, r9
 8000b5a:	1e41      	subs	r1, r0, #1
 8000b5c:	4188      	sbcs	r0, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	0007      	movs	r7, r0
 8000b62:	430f      	orrs	r7, r1
 8000b64:	e630      	b.n	80007c8 <__aeabi_dadd+0x320>
 8000b66:	2120      	movs	r1, #32
 8000b68:	2700      	movs	r7, #0
 8000b6a:	1a09      	subs	r1, r1, r0
 8000b6c:	e50e      	b.n	800058c <__aeabi_dadd+0xe4>
 8000b6e:	001e      	movs	r6, r3
 8000b70:	2f00      	cmp	r7, #0
 8000b72:	d000      	beq.n	8000b76 <__aeabi_dadd+0x6ce>
 8000b74:	e522      	b.n	80005bc <__aeabi_dadd+0x114>
 8000b76:	2400      	movs	r4, #0
 8000b78:	e758      	b.n	8000a2c <__aeabi_dadd+0x584>
 8000b7a:	2500      	movs	r5, #0
 8000b7c:	2400      	movs	r4, #0
 8000b7e:	2600      	movs	r6, #0
 8000b80:	e5db      	b.n	800073a <__aeabi_dadd+0x292>
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	000007fe 	.word	0x000007fe
 8000b88:	000007ff 	.word	0x000007ff
 8000b8c:	ff7fffff 	.word	0xff7fffff
 8000b90:	4647      	mov	r7, r8
 8000b92:	430f      	orrs	r7, r1
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dadd+0x6f0>
 8000b96:	e747      	b.n	8000a28 <__aeabi_dadd+0x580>
 8000b98:	000e      	movs	r6, r1
 8000b9a:	46c1      	mov	r9, r8
 8000b9c:	e5b5      	b.n	800070a <__aeabi_dadd+0x262>
 8000b9e:	08df      	lsrs	r7, r3, #3
 8000ba0:	0764      	lsls	r4, r4, #29
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4327      	orrs	r7, r4
 8000ba6:	0900      	lsrs	r0, r0, #4
 8000ba8:	e5b5      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000baa:	0019      	movs	r1, r3
 8000bac:	08c0      	lsrs	r0, r0, #3
 8000bae:	0777      	lsls	r7, r6, #29
 8000bb0:	4307      	orrs	r7, r0
 8000bb2:	4311      	orrs	r1, r2
 8000bb4:	08f0      	lsrs	r0, r6, #3
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dadd+0x714>
 8000bba:	e5d9      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	0309      	lsls	r1, r1, #12
 8000bc0:	4208      	tst	r0, r1
 8000bc2:	d007      	beq.n	8000bd4 <__aeabi_dadd+0x72c>
 8000bc4:	08dc      	lsrs	r4, r3, #3
 8000bc6:	420c      	tst	r4, r1
 8000bc8:	d104      	bne.n	8000bd4 <__aeabi_dadd+0x72c>
 8000bca:	08d2      	lsrs	r2, r2, #3
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	0017      	movs	r7, r2
 8000bd2:	0020      	movs	r0, r4
 8000bd4:	0f7b      	lsrs	r3, r7, #29
 8000bd6:	00ff      	lsls	r7, r7, #3
 8000bd8:	08ff      	lsrs	r7, r7, #3
 8000bda:	075b      	lsls	r3, r3, #29
 8000bdc:	431f      	orrs	r7, r3
 8000bde:	e5c7      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000be0:	000f      	movs	r7, r1
 8000be2:	e5c5      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <__aeabi_dadd+0x788>)
 8000be6:	08d2      	lsrs	r2, r2, #3
 8000be8:	4033      	ands	r3, r6
 8000bea:	075f      	lsls	r7, r3, #29
 8000bec:	025b      	lsls	r3, r3, #9
 8000bee:	2401      	movs	r4, #1
 8000bf0:	4317      	orrs	r7, r2
 8000bf2:	0b1e      	lsrs	r6, r3, #12
 8000bf4:	e5a1      	b.n	800073a <__aeabi_dadd+0x292>
 8000bf6:	4226      	tst	r6, r4
 8000bf8:	d012      	beq.n	8000c20 <__aeabi_dadd+0x778>
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <__aeabi_dadd+0x788>)
 8000bfc:	4665      	mov	r5, ip
 8000bfe:	0002      	movs	r2, r0
 8000c00:	2401      	movs	r4, #1
 8000c02:	401e      	ands	r6, r3
 8000c04:	e4e6      	b.n	80005d4 <__aeabi_dadd+0x12c>
 8000c06:	0021      	movs	r1, r4
 8000c08:	e585      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c0a:	0017      	movs	r7, r2
 8000c0c:	e5a8      	b.n	8000760 <__aeabi_dadd+0x2b8>
 8000c0e:	003a      	movs	r2, r7
 8000c10:	e4d4      	b.n	80005bc <__aeabi_dadd+0x114>
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	0764      	lsls	r4, r4, #29
 8000c16:	431c      	orrs	r4, r3
 8000c18:	0027      	movs	r7, r4
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	0900      	lsrs	r0, r0, #4
 8000c1e:	e57a      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c20:	08c0      	lsrs	r0, r0, #3
 8000c22:	0777      	lsls	r7, r6, #29
 8000c24:	4307      	orrs	r7, r0
 8000c26:	4665      	mov	r5, ip
 8000c28:	2100      	movs	r1, #0
 8000c2a:	08f0      	lsrs	r0, r6, #3
 8000c2c:	e573      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	ff7fffff 	.word	0xff7fffff

08000c34 <__aeabi_ddiv>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	46de      	mov	lr, fp
 8000c38:	4645      	mov	r5, r8
 8000c3a:	4657      	mov	r7, sl
 8000c3c:	464e      	mov	r6, r9
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	b087      	sub	sp, #28
 8000c42:	9200      	str	r2, [sp, #0]
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	030b      	lsls	r3, r1, #12
 8000c48:	0b1b      	lsrs	r3, r3, #12
 8000c4a:	469b      	mov	fp, r3
 8000c4c:	0fca      	lsrs	r2, r1, #31
 8000c4e:	004b      	lsls	r3, r1, #1
 8000c50:	0004      	movs	r4, r0
 8000c52:	4680      	mov	r8, r0
 8000c54:	0d5b      	lsrs	r3, r3, #21
 8000c56:	9202      	str	r2, [sp, #8]
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x28>
 8000c5a:	e098      	b.n	8000d8e <__aeabi_ddiv+0x15a>
 8000c5c:	4a7c      	ldr	r2, [pc, #496]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d037      	beq.n	8000cd2 <__aeabi_ddiv+0x9e>
 8000c62:	4659      	mov	r1, fp
 8000c64:	0f42      	lsrs	r2, r0, #29
 8000c66:	00c9      	lsls	r1, r1, #3
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	2180      	movs	r1, #128	@ 0x80
 8000c6c:	0409      	lsls	r1, r1, #16
 8000c6e:	4311      	orrs	r1, r2
 8000c70:	00c2      	lsls	r2, r0, #3
 8000c72:	4690      	mov	r8, r2
 8000c74:	4a77      	ldr	r2, [pc, #476]	@ (8000e54 <__aeabi_ddiv+0x220>)
 8000c76:	4689      	mov	r9, r1
 8000c78:	4692      	mov	sl, r2
 8000c7a:	449a      	add	sl, r3
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2400      	movs	r4, #0
 8000c80:	9303      	str	r3, [sp, #12]
 8000c82:	9e00      	ldr	r6, [sp, #0]
 8000c84:	9f01      	ldr	r7, [sp, #4]
 8000c86:	033b      	lsls	r3, r7, #12
 8000c88:	0b1b      	lsrs	r3, r3, #12
 8000c8a:	469b      	mov	fp, r3
 8000c8c:	007b      	lsls	r3, r7, #1
 8000c8e:	0030      	movs	r0, r6
 8000c90:	0d5b      	lsrs	r3, r3, #21
 8000c92:	0ffd      	lsrs	r5, r7, #31
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d059      	beq.n	8000d4c <__aeabi_ddiv+0x118>
 8000c98:	4a6d      	ldr	r2, [pc, #436]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d048      	beq.n	8000d30 <__aeabi_ddiv+0xfc>
 8000c9e:	4659      	mov	r1, fp
 8000ca0:	0f72      	lsrs	r2, r6, #29
 8000ca2:	00c9      	lsls	r1, r1, #3
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	2180      	movs	r1, #128	@ 0x80
 8000ca8:	0409      	lsls	r1, r1, #16
 8000caa:	4311      	orrs	r1, r2
 8000cac:	468b      	mov	fp, r1
 8000cae:	4969      	ldr	r1, [pc, #420]	@ (8000e54 <__aeabi_ddiv+0x220>)
 8000cb0:	00f2      	lsls	r2, r6, #3
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4651      	mov	r1, sl
 8000cb6:	4463      	add	r3, ip
 8000cb8:	1acb      	subs	r3, r1, r3
 8000cba:	469a      	mov	sl, r3
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	9e02      	ldr	r6, [sp, #8]
 8000cc0:	406e      	eors	r6, r5
 8000cc2:	b2f6      	uxtb	r6, r6
 8000cc4:	2c0f      	cmp	r4, #15
 8000cc6:	d900      	bls.n	8000cca <__aeabi_ddiv+0x96>
 8000cc8:	e0ce      	b.n	8000e68 <__aeabi_ddiv+0x234>
 8000cca:	4b63      	ldr	r3, [pc, #396]	@ (8000e58 <__aeabi_ddiv+0x224>)
 8000ccc:	00a4      	lsls	r4, r4, #2
 8000cce:	591b      	ldr	r3, [r3, r4]
 8000cd0:	469f      	mov	pc, r3
 8000cd2:	465a      	mov	r2, fp
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	4691      	mov	r9, r2
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_ddiv+0xa8>
 8000cda:	e090      	b.n	8000dfe <__aeabi_ddiv+0x1ca>
 8000cdc:	469a      	mov	sl, r3
 8000cde:	2302      	movs	r3, #2
 8000ce0:	4690      	mov	r8, r2
 8000ce2:	2408      	movs	r4, #8
 8000ce4:	9303      	str	r3, [sp, #12]
 8000ce6:	e7cc      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000ce8:	46cb      	mov	fp, r9
 8000cea:	4642      	mov	r2, r8
 8000cec:	9d02      	ldr	r5, [sp, #8]
 8000cee:	9903      	ldr	r1, [sp, #12]
 8000cf0:	2902      	cmp	r1, #2
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_ddiv+0xc2>
 8000cf4:	e1de      	b.n	80010b4 <__aeabi_ddiv+0x480>
 8000cf6:	2903      	cmp	r1, #3
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_ddiv+0xc8>
 8000cfa:	e08d      	b.n	8000e18 <__aeabi_ddiv+0x1e4>
 8000cfc:	2901      	cmp	r1, #1
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_ddiv+0xce>
 8000d00:	e179      	b.n	8000ff6 <__aeabi_ddiv+0x3c2>
 8000d02:	002e      	movs	r6, r5
 8000d04:	2200      	movs	r2, #0
 8000d06:	2300      	movs	r3, #0
 8000d08:	2400      	movs	r4, #0
 8000d0a:	4690      	mov	r8, r2
 8000d0c:	051b      	lsls	r3, r3, #20
 8000d0e:	4323      	orrs	r3, r4
 8000d10:	07f6      	lsls	r6, r6, #31
 8000d12:	4333      	orrs	r3, r6
 8000d14:	4640      	mov	r0, r8
 8000d16:	0019      	movs	r1, r3
 8000d18:	b007      	add	sp, #28
 8000d1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d1c:	46bb      	mov	fp, r7
 8000d1e:	46b2      	mov	sl, r6
 8000d20:	46a9      	mov	r9, r5
 8000d22:	46a0      	mov	r8, r4
 8000d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d26:	2200      	movs	r2, #0
 8000d28:	2400      	movs	r4, #0
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	4b48      	ldr	r3, [pc, #288]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000d2e:	e7ed      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000d30:	465a      	mov	r2, fp
 8000d32:	9b00      	ldr	r3, [sp, #0]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	4b49      	ldr	r3, [pc, #292]	@ (8000e5c <__aeabi_ddiv+0x228>)
 8000d38:	469c      	mov	ip, r3
 8000d3a:	44e2      	add	sl, ip
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d159      	bne.n	8000df4 <__aeabi_ddiv+0x1c0>
 8000d40:	2302      	movs	r3, #2
 8000d42:	431c      	orrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	2102      	movs	r1, #2
 8000d48:	469b      	mov	fp, r3
 8000d4a:	e7b8      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000d4c:	465a      	mov	r2, fp
 8000d4e:	9b00      	ldr	r3, [sp, #0]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	d049      	beq.n	8000de8 <__aeabi_ddiv+0x1b4>
 8000d54:	465b      	mov	r3, fp
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_ddiv+0x128>
 8000d5a:	e19c      	b.n	8001096 <__aeabi_ddiv+0x462>
 8000d5c:	4658      	mov	r0, fp
 8000d5e:	f001 fb43 	bl	80023e8 <__clzsi2>
 8000d62:	0002      	movs	r2, r0
 8000d64:	0003      	movs	r3, r0
 8000d66:	3a0b      	subs	r2, #11
 8000d68:	271d      	movs	r7, #29
 8000d6a:	9e00      	ldr	r6, [sp, #0]
 8000d6c:	1aba      	subs	r2, r7, r2
 8000d6e:	0019      	movs	r1, r3
 8000d70:	4658      	mov	r0, fp
 8000d72:	40d6      	lsrs	r6, r2
 8000d74:	3908      	subs	r1, #8
 8000d76:	4088      	lsls	r0, r1
 8000d78:	0032      	movs	r2, r6
 8000d7a:	4302      	orrs	r2, r0
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	9a00      	ldr	r2, [sp, #0]
 8000d80:	408a      	lsls	r2, r1
 8000d82:	4937      	ldr	r1, [pc, #220]	@ (8000e60 <__aeabi_ddiv+0x22c>)
 8000d84:	4453      	add	r3, sl
 8000d86:	468a      	mov	sl, r1
 8000d88:	2100      	movs	r1, #0
 8000d8a:	449a      	add	sl, r3
 8000d8c:	e797      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000d8e:	465b      	mov	r3, fp
 8000d90:	4303      	orrs	r3, r0
 8000d92:	4699      	mov	r9, r3
 8000d94:	d021      	beq.n	8000dda <__aeabi_ddiv+0x1a6>
 8000d96:	465b      	mov	r3, fp
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_ddiv+0x16a>
 8000d9c:	e169      	b.n	8001072 <__aeabi_ddiv+0x43e>
 8000d9e:	4658      	mov	r0, fp
 8000da0:	f001 fb22 	bl	80023e8 <__clzsi2>
 8000da4:	230b      	movs	r3, #11
 8000da6:	425b      	negs	r3, r3
 8000da8:	469c      	mov	ip, r3
 8000daa:	0002      	movs	r2, r0
 8000dac:	4484      	add	ip, r0
 8000dae:	4666      	mov	r6, ip
 8000db0:	231d      	movs	r3, #29
 8000db2:	1b9b      	subs	r3, r3, r6
 8000db4:	0026      	movs	r6, r4
 8000db6:	0011      	movs	r1, r2
 8000db8:	4658      	mov	r0, fp
 8000dba:	40de      	lsrs	r6, r3
 8000dbc:	3908      	subs	r1, #8
 8000dbe:	4088      	lsls	r0, r1
 8000dc0:	0033      	movs	r3, r6
 8000dc2:	4303      	orrs	r3, r0
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	0023      	movs	r3, r4
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4698      	mov	r8, r3
 8000dcc:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <__aeabi_ddiv+0x230>)
 8000dce:	2400      	movs	r4, #0
 8000dd0:	1a9b      	subs	r3, r3, r2
 8000dd2:	469a      	mov	sl, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9303      	str	r3, [sp, #12]
 8000dd8:	e753      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	4698      	mov	r8, r3
 8000dde:	469a      	mov	sl, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	2404      	movs	r4, #4
 8000de4:	9303      	str	r3, [sp, #12]
 8000de6:	e74c      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000de8:	2301      	movs	r3, #1
 8000dea:	431c      	orrs	r4, r3
 8000dec:	2300      	movs	r3, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	469b      	mov	fp, r3
 8000df2:	e764      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000df4:	2303      	movs	r3, #3
 8000df6:	0032      	movs	r2, r6
 8000df8:	2103      	movs	r1, #3
 8000dfa:	431c      	orrs	r4, r3
 8000dfc:	e75f      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000dfe:	469a      	mov	sl, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	46d9      	mov	r9, fp
 8000e04:	240c      	movs	r4, #12
 8000e06:	9303      	str	r3, [sp, #12]
 8000e08:	e73b      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2480      	movs	r4, #128	@ 0x80
 8000e0e:	4698      	mov	r8, r3
 8000e10:	2600      	movs	r6, #0
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e14:	0324      	lsls	r4, r4, #12
 8000e16:	e779      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e18:	2480      	movs	r4, #128	@ 0x80
 8000e1a:	465b      	mov	r3, fp
 8000e1c:	0324      	lsls	r4, r4, #12
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	0324      	lsls	r4, r4, #12
 8000e22:	002e      	movs	r6, r5
 8000e24:	4690      	mov	r8, r2
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e28:	0b24      	lsrs	r4, r4, #12
 8000e2a:	e76f      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e2c:	2480      	movs	r4, #128	@ 0x80
 8000e2e:	464b      	mov	r3, r9
 8000e30:	0324      	lsls	r4, r4, #12
 8000e32:	4223      	tst	r3, r4
 8000e34:	d002      	beq.n	8000e3c <__aeabi_ddiv+0x208>
 8000e36:	465b      	mov	r3, fp
 8000e38:	4223      	tst	r3, r4
 8000e3a:	d0f0      	beq.n	8000e1e <__aeabi_ddiv+0x1ea>
 8000e3c:	2480      	movs	r4, #128	@ 0x80
 8000e3e:	464b      	mov	r3, r9
 8000e40:	0324      	lsls	r4, r4, #12
 8000e42:	431c      	orrs	r4, r3
 8000e44:	0324      	lsls	r4, r4, #12
 8000e46:	9e02      	ldr	r6, [sp, #8]
 8000e48:	4b01      	ldr	r3, [pc, #4]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e4a:	0b24      	lsrs	r4, r4, #12
 8000e4c:	e75e      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	000007ff 	.word	0x000007ff
 8000e54:	fffffc01 	.word	0xfffffc01
 8000e58:	080104cc 	.word	0x080104cc
 8000e5c:	fffff801 	.word	0xfffff801
 8000e60:	000003f3 	.word	0x000003f3
 8000e64:	fffffc0d 	.word	0xfffffc0d
 8000e68:	45cb      	cmp	fp, r9
 8000e6a:	d200      	bcs.n	8000e6e <__aeabi_ddiv+0x23a>
 8000e6c:	e0f8      	b.n	8001060 <__aeabi_ddiv+0x42c>
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0x23e>
 8000e70:	e0f3      	b.n	800105a <__aeabi_ddiv+0x426>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	4644      	mov	r4, r8
 8000e7a:	4648      	mov	r0, r9
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	44e2      	add	sl, ip
 8000e80:	465b      	mov	r3, fp
 8000e82:	0e17      	lsrs	r7, r2, #24
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c19      	lsrs	r1, r3, #16
 8000e8a:	043b      	lsls	r3, r7, #16
 8000e8c:	0212      	lsls	r2, r2, #8
 8000e8e:	9700      	str	r7, [sp, #0]
 8000e90:	0c1f      	lsrs	r7, r3, #16
 8000e92:	4691      	mov	r9, r2
 8000e94:	9102      	str	r1, [sp, #8]
 8000e96:	9703      	str	r7, [sp, #12]
 8000e98:	f7ff f9d8 	bl	800024c <__aeabi_uidivmod>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	437a      	muls	r2, r7
 8000ea0:	040b      	lsls	r3, r1, #16
 8000ea2:	0c21      	lsrs	r1, r4, #16
 8000ea4:	4680      	mov	r8, r0
 8000ea6:	4319      	orrs	r1, r3
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d909      	bls.n	8000ec0 <__aeabi_ddiv+0x28c>
 8000eac:	9f00      	ldr	r7, [sp, #0]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	46bc      	mov	ip, r7
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	4461      	add	r1, ip
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	44e0      	add	r8, ip
 8000eba:	428f      	cmp	r7, r1
 8000ebc:	d800      	bhi.n	8000ec0 <__aeabi_ddiv+0x28c>
 8000ebe:	e15c      	b.n	800117a <__aeabi_ddiv+0x546>
 8000ec0:	1a88      	subs	r0, r1, r2
 8000ec2:	9902      	ldr	r1, [sp, #8]
 8000ec4:	f7ff f9c2 	bl	800024c <__aeabi_uidivmod>
 8000ec8:	9a03      	ldr	r2, [sp, #12]
 8000eca:	0424      	lsls	r4, r4, #16
 8000ecc:	4342      	muls	r2, r0
 8000ece:	0409      	lsls	r1, r1, #16
 8000ed0:	0c24      	lsrs	r4, r4, #16
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	430c      	orrs	r4, r1
 8000ed6:	42a2      	cmp	r2, r4
 8000ed8:	d906      	bls.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8000eda:	9900      	ldr	r1, [sp, #0]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	468c      	mov	ip, r1
 8000ee0:	4464      	add	r4, ip
 8000ee2:	42a1      	cmp	r1, r4
 8000ee4:	d800      	bhi.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8000ee6:	e142      	b.n	800116e <__aeabi_ddiv+0x53a>
 8000ee8:	1aa0      	subs	r0, r4, r2
 8000eea:	4642      	mov	r2, r8
 8000eec:	0412      	lsls	r2, r2, #16
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	4693      	mov	fp, r2
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	4659      	mov	r1, fp
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	001f      	movs	r7, r3
 8000efa:	9304      	str	r3, [sp, #16]
 8000efc:	040b      	lsls	r3, r1, #16
 8000efe:	4649      	mov	r1, r9
 8000f00:	0409      	lsls	r1, r1, #16
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	000c      	movs	r4, r1
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	435c      	muls	r4, r3
 8000f0a:	0c12      	lsrs	r2, r2, #16
 8000f0c:	437b      	muls	r3, r7
 8000f0e:	4688      	mov	r8, r1
 8000f10:	4351      	muls	r1, r2
 8000f12:	437a      	muls	r2, r7
 8000f14:	0c27      	lsrs	r7, r4, #16
 8000f16:	46bc      	mov	ip, r7
 8000f18:	185b      	adds	r3, r3, r1
 8000f1a:	4463      	add	r3, ip
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d903      	bls.n	8000f28 <__aeabi_ddiv+0x2f4>
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	0249      	lsls	r1, r1, #9
 8000f24:	468c      	mov	ip, r1
 8000f26:	4462      	add	r2, ip
 8000f28:	0c19      	lsrs	r1, r3, #16
 8000f2a:	0424      	lsls	r4, r4, #16
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	0c24      	lsrs	r4, r4, #16
 8000f30:	188a      	adds	r2, r1, r2
 8000f32:	191c      	adds	r4, r3, r4
 8000f34:	4290      	cmp	r0, r2
 8000f36:	d302      	bcc.n	8000f3e <__aeabi_ddiv+0x30a>
 8000f38:	d116      	bne.n	8000f68 <__aeabi_ddiv+0x334>
 8000f3a:	42a5      	cmp	r5, r4
 8000f3c:	d214      	bcs.n	8000f68 <__aeabi_ddiv+0x334>
 8000f3e:	465b      	mov	r3, fp
 8000f40:	9f00      	ldr	r7, [sp, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	444d      	add	r5, r9
 8000f46:	9305      	str	r3, [sp, #20]
 8000f48:	454d      	cmp	r5, r9
 8000f4a:	419b      	sbcs	r3, r3
 8000f4c:	46bc      	mov	ip, r7
 8000f4e:	425b      	negs	r3, r3
 8000f50:	4463      	add	r3, ip
 8000f52:	18c0      	adds	r0, r0, r3
 8000f54:	4287      	cmp	r7, r0
 8000f56:	d300      	bcc.n	8000f5a <__aeabi_ddiv+0x326>
 8000f58:	e102      	b.n	8001160 <__aeabi_ddiv+0x52c>
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	d900      	bls.n	8000f60 <__aeabi_ddiv+0x32c>
 8000f5e:	e129      	b.n	80011b4 <__aeabi_ddiv+0x580>
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x330>
 8000f62:	e124      	b.n	80011ae <__aeabi_ddiv+0x57a>
 8000f64:	9b05      	ldr	r3, [sp, #20]
 8000f66:	469b      	mov	fp, r3
 8000f68:	1b2c      	subs	r4, r5, r4
 8000f6a:	42a5      	cmp	r5, r4
 8000f6c:	41ad      	sbcs	r5, r5
 8000f6e:	9b00      	ldr	r3, [sp, #0]
 8000f70:	1a80      	subs	r0, r0, r2
 8000f72:	426d      	negs	r5, r5
 8000f74:	1b40      	subs	r0, r0, r5
 8000f76:	4283      	cmp	r3, r0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_ddiv+0x348>
 8000f7a:	e10f      	b.n	800119c <__aeabi_ddiv+0x568>
 8000f7c:	9902      	ldr	r1, [sp, #8]
 8000f7e:	f7ff f965 	bl	800024c <__aeabi_uidivmod>
 8000f82:	9a03      	ldr	r2, [sp, #12]
 8000f84:	040b      	lsls	r3, r1, #16
 8000f86:	4342      	muls	r2, r0
 8000f88:	0c21      	lsrs	r1, r4, #16
 8000f8a:	0005      	movs	r5, r0
 8000f8c:	4319      	orrs	r1, r3
 8000f8e:	428a      	cmp	r2, r1
 8000f90:	d900      	bls.n	8000f94 <__aeabi_ddiv+0x360>
 8000f92:	e0cb      	b.n	800112c <__aeabi_ddiv+0x4f8>
 8000f94:	1a88      	subs	r0, r1, r2
 8000f96:	9902      	ldr	r1, [sp, #8]
 8000f98:	f7ff f958 	bl	800024c <__aeabi_uidivmod>
 8000f9c:	9a03      	ldr	r2, [sp, #12]
 8000f9e:	0424      	lsls	r4, r4, #16
 8000fa0:	4342      	muls	r2, r0
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	0c24      	lsrs	r4, r4, #16
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	430c      	orrs	r4, r1
 8000faa:	42a2      	cmp	r2, r4
 8000fac:	d900      	bls.n	8000fb0 <__aeabi_ddiv+0x37c>
 8000fae:	e0ca      	b.n	8001146 <__aeabi_ddiv+0x512>
 8000fb0:	4641      	mov	r1, r8
 8000fb2:	1aa4      	subs	r4, r4, r2
 8000fb4:	042a      	lsls	r2, r5, #16
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	9f04      	ldr	r7, [sp, #16]
 8000fba:	0413      	lsls	r3, r2, #16
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	4359      	muls	r1, r3
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	437b      	muls	r3, r7
 8000fc4:	469c      	mov	ip, r3
 8000fc6:	0c15      	lsrs	r5, r2, #16
 8000fc8:	4368      	muls	r0, r5
 8000fca:	0c0b      	lsrs	r3, r1, #16
 8000fcc:	4484      	add	ip, r0
 8000fce:	4463      	add	r3, ip
 8000fd0:	437d      	muls	r5, r7
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	d903      	bls.n	8000fde <__aeabi_ddiv+0x3aa>
 8000fd6:	2080      	movs	r0, #128	@ 0x80
 8000fd8:	0240      	lsls	r0, r0, #9
 8000fda:	4684      	mov	ip, r0
 8000fdc:	4465      	add	r5, ip
 8000fde:	0c18      	lsrs	r0, r3, #16
 8000fe0:	0409      	lsls	r1, r1, #16
 8000fe2:	041b      	lsls	r3, r3, #16
 8000fe4:	0c09      	lsrs	r1, r1, #16
 8000fe6:	1940      	adds	r0, r0, r5
 8000fe8:	185b      	adds	r3, r3, r1
 8000fea:	4284      	cmp	r4, r0
 8000fec:	d327      	bcc.n	800103e <__aeabi_ddiv+0x40a>
 8000fee:	d023      	beq.n	8001038 <__aeabi_ddiv+0x404>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	0035      	movs	r5, r6
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	4b94      	ldr	r3, [pc, #592]	@ (8001248 <__aeabi_ddiv+0x614>)
 8000ff8:	4453      	add	r3, sl
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	dd60      	ble.n	80010c0 <__aeabi_ddiv+0x48c>
 8000ffe:	0751      	lsls	r1, r2, #29
 8001000:	d000      	beq.n	8001004 <__aeabi_ddiv+0x3d0>
 8001002:	e086      	b.n	8001112 <__aeabi_ddiv+0x4de>
 8001004:	002e      	movs	r6, r5
 8001006:	08d1      	lsrs	r1, r2, #3
 8001008:	465a      	mov	r2, fp
 800100a:	01d2      	lsls	r2, r2, #7
 800100c:	d506      	bpl.n	800101c <__aeabi_ddiv+0x3e8>
 800100e:	465a      	mov	r2, fp
 8001010:	4b8e      	ldr	r3, [pc, #568]	@ (800124c <__aeabi_ddiv+0x618>)
 8001012:	401a      	ands	r2, r3
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	4693      	mov	fp, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4453      	add	r3, sl
 800101c:	4a8c      	ldr	r2, [pc, #560]	@ (8001250 <__aeabi_ddiv+0x61c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	dd00      	ble.n	8001024 <__aeabi_ddiv+0x3f0>
 8001022:	e680      	b.n	8000d26 <__aeabi_ddiv+0xf2>
 8001024:	465a      	mov	r2, fp
 8001026:	0752      	lsls	r2, r2, #29
 8001028:	430a      	orrs	r2, r1
 800102a:	4690      	mov	r8, r2
 800102c:	465a      	mov	r2, fp
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	0254      	lsls	r4, r2, #9
 8001032:	0b24      	lsrs	r4, r4, #12
 8001034:	0d5b      	lsrs	r3, r3, #21
 8001036:	e669      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001038:	0035      	movs	r5, r6
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0db      	beq.n	8000ff6 <__aeabi_ddiv+0x3c2>
 800103e:	9d00      	ldr	r5, [sp, #0]
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	46ac      	mov	ip, r5
 8001044:	4464      	add	r4, ip
 8001046:	42ac      	cmp	r4, r5
 8001048:	d200      	bcs.n	800104c <__aeabi_ddiv+0x418>
 800104a:	e09e      	b.n	800118a <__aeabi_ddiv+0x556>
 800104c:	4284      	cmp	r4, r0
 800104e:	d200      	bcs.n	8001052 <__aeabi_ddiv+0x41e>
 8001050:	e0e1      	b.n	8001216 <__aeabi_ddiv+0x5e2>
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0x422>
 8001054:	e0ee      	b.n	8001234 <__aeabi_ddiv+0x600>
 8001056:	000a      	movs	r2, r1
 8001058:	e7ca      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 800105a:	4542      	cmp	r2, r8
 800105c:	d900      	bls.n	8001060 <__aeabi_ddiv+0x42c>
 800105e:	e708      	b.n	8000e72 <__aeabi_ddiv+0x23e>
 8001060:	464b      	mov	r3, r9
 8001062:	07dc      	lsls	r4, r3, #31
 8001064:	0858      	lsrs	r0, r3, #1
 8001066:	4643      	mov	r3, r8
 8001068:	085b      	lsrs	r3, r3, #1
 800106a:	431c      	orrs	r4, r3
 800106c:	4643      	mov	r3, r8
 800106e:	07dd      	lsls	r5, r3, #31
 8001070:	e706      	b.n	8000e80 <__aeabi_ddiv+0x24c>
 8001072:	f001 f9b9 	bl	80023e8 <__clzsi2>
 8001076:	2315      	movs	r3, #21
 8001078:	469c      	mov	ip, r3
 800107a:	4484      	add	ip, r0
 800107c:	0002      	movs	r2, r0
 800107e:	4663      	mov	r3, ip
 8001080:	3220      	adds	r2, #32
 8001082:	2b1c      	cmp	r3, #28
 8001084:	dc00      	bgt.n	8001088 <__aeabi_ddiv+0x454>
 8001086:	e692      	b.n	8000dae <__aeabi_ddiv+0x17a>
 8001088:	0023      	movs	r3, r4
 800108a:	3808      	subs	r0, #8
 800108c:	4083      	lsls	r3, r0
 800108e:	4699      	mov	r9, r3
 8001090:	2300      	movs	r3, #0
 8001092:	4698      	mov	r8, r3
 8001094:	e69a      	b.n	8000dcc <__aeabi_ddiv+0x198>
 8001096:	f001 f9a7 	bl	80023e8 <__clzsi2>
 800109a:	0002      	movs	r2, r0
 800109c:	0003      	movs	r3, r0
 800109e:	3215      	adds	r2, #21
 80010a0:	3320      	adds	r3, #32
 80010a2:	2a1c      	cmp	r2, #28
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_ddiv+0x474>
 80010a6:	e65f      	b.n	8000d68 <__aeabi_ddiv+0x134>
 80010a8:	9900      	ldr	r1, [sp, #0]
 80010aa:	3808      	subs	r0, #8
 80010ac:	4081      	lsls	r1, r0
 80010ae:	2200      	movs	r2, #0
 80010b0:	468b      	mov	fp, r1
 80010b2:	e666      	b.n	8000d82 <__aeabi_ddiv+0x14e>
 80010b4:	2200      	movs	r2, #0
 80010b6:	002e      	movs	r6, r5
 80010b8:	2400      	movs	r4, #0
 80010ba:	4690      	mov	r8, r2
 80010bc:	4b65      	ldr	r3, [pc, #404]	@ (8001254 <__aeabi_ddiv+0x620>)
 80010be:	e625      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 80010c0:	002e      	movs	r6, r5
 80010c2:	2101      	movs	r1, #1
 80010c4:	1ac9      	subs	r1, r1, r3
 80010c6:	2938      	cmp	r1, #56	@ 0x38
 80010c8:	dd00      	ble.n	80010cc <__aeabi_ddiv+0x498>
 80010ca:	e61b      	b.n	8000d04 <__aeabi_ddiv+0xd0>
 80010cc:	291f      	cmp	r1, #31
 80010ce:	dc7e      	bgt.n	80011ce <__aeabi_ddiv+0x59a>
 80010d0:	4861      	ldr	r0, [pc, #388]	@ (8001258 <__aeabi_ddiv+0x624>)
 80010d2:	0014      	movs	r4, r2
 80010d4:	4450      	add	r0, sl
 80010d6:	465b      	mov	r3, fp
 80010d8:	4082      	lsls	r2, r0
 80010da:	4083      	lsls	r3, r0
 80010dc:	40cc      	lsrs	r4, r1
 80010de:	1e50      	subs	r0, r2, #1
 80010e0:	4182      	sbcs	r2, r0
 80010e2:	4323      	orrs	r3, r4
 80010e4:	431a      	orrs	r2, r3
 80010e6:	465b      	mov	r3, fp
 80010e8:	40cb      	lsrs	r3, r1
 80010ea:	0751      	lsls	r1, r2, #29
 80010ec:	d009      	beq.n	8001102 <__aeabi_ddiv+0x4ce>
 80010ee:	210f      	movs	r1, #15
 80010f0:	4011      	ands	r1, r2
 80010f2:	2904      	cmp	r1, #4
 80010f4:	d005      	beq.n	8001102 <__aeabi_ddiv+0x4ce>
 80010f6:	1d11      	adds	r1, r2, #4
 80010f8:	4291      	cmp	r1, r2
 80010fa:	4192      	sbcs	r2, r2
 80010fc:	4252      	negs	r2, r2
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	000a      	movs	r2, r1
 8001102:	0219      	lsls	r1, r3, #8
 8001104:	d400      	bmi.n	8001108 <__aeabi_ddiv+0x4d4>
 8001106:	e09b      	b.n	8001240 <__aeabi_ddiv+0x60c>
 8001108:	2200      	movs	r2, #0
 800110a:	2301      	movs	r3, #1
 800110c:	2400      	movs	r4, #0
 800110e:	4690      	mov	r8, r2
 8001110:	e5fc      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001112:	210f      	movs	r1, #15
 8001114:	4011      	ands	r1, r2
 8001116:	2904      	cmp	r1, #4
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x4e8>
 800111a:	e773      	b.n	8001004 <__aeabi_ddiv+0x3d0>
 800111c:	1d11      	adds	r1, r2, #4
 800111e:	4291      	cmp	r1, r2
 8001120:	4192      	sbcs	r2, r2
 8001122:	4252      	negs	r2, r2
 8001124:	002e      	movs	r6, r5
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	4493      	add	fp, r2
 800112a:	e76d      	b.n	8001008 <__aeabi_ddiv+0x3d4>
 800112c:	9b00      	ldr	r3, [sp, #0]
 800112e:	3d01      	subs	r5, #1
 8001130:	469c      	mov	ip, r3
 8001132:	4461      	add	r1, ip
 8001134:	428b      	cmp	r3, r1
 8001136:	d900      	bls.n	800113a <__aeabi_ddiv+0x506>
 8001138:	e72c      	b.n	8000f94 <__aeabi_ddiv+0x360>
 800113a:	428a      	cmp	r2, r1
 800113c:	d800      	bhi.n	8001140 <__aeabi_ddiv+0x50c>
 800113e:	e729      	b.n	8000f94 <__aeabi_ddiv+0x360>
 8001140:	1e85      	subs	r5, r0, #2
 8001142:	4461      	add	r1, ip
 8001144:	e726      	b.n	8000f94 <__aeabi_ddiv+0x360>
 8001146:	9900      	ldr	r1, [sp, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	468c      	mov	ip, r1
 800114c:	4464      	add	r4, ip
 800114e:	42a1      	cmp	r1, r4
 8001150:	d900      	bls.n	8001154 <__aeabi_ddiv+0x520>
 8001152:	e72d      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 8001154:	42a2      	cmp	r2, r4
 8001156:	d800      	bhi.n	800115a <__aeabi_ddiv+0x526>
 8001158:	e72a      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 800115a:	1e83      	subs	r3, r0, #2
 800115c:	4464      	add	r4, ip
 800115e:	e727      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 8001160:	4287      	cmp	r7, r0
 8001162:	d000      	beq.n	8001166 <__aeabi_ddiv+0x532>
 8001164:	e6fe      	b.n	8000f64 <__aeabi_ddiv+0x330>
 8001166:	45a9      	cmp	r9, r5
 8001168:	d900      	bls.n	800116c <__aeabi_ddiv+0x538>
 800116a:	e6fb      	b.n	8000f64 <__aeabi_ddiv+0x330>
 800116c:	e6f5      	b.n	8000f5a <__aeabi_ddiv+0x326>
 800116e:	42a2      	cmp	r2, r4
 8001170:	d800      	bhi.n	8001174 <__aeabi_ddiv+0x540>
 8001172:	e6b9      	b.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8001174:	1e83      	subs	r3, r0, #2
 8001176:	4464      	add	r4, ip
 8001178:	e6b6      	b.n	8000ee8 <__aeabi_ddiv+0x2b4>
 800117a:	428a      	cmp	r2, r1
 800117c:	d800      	bhi.n	8001180 <__aeabi_ddiv+0x54c>
 800117e:	e69f      	b.n	8000ec0 <__aeabi_ddiv+0x28c>
 8001180:	46bc      	mov	ip, r7
 8001182:	1e83      	subs	r3, r0, #2
 8001184:	4698      	mov	r8, r3
 8001186:	4461      	add	r1, ip
 8001188:	e69a      	b.n	8000ec0 <__aeabi_ddiv+0x28c>
 800118a:	000a      	movs	r2, r1
 800118c:	4284      	cmp	r4, r0
 800118e:	d000      	beq.n	8001192 <__aeabi_ddiv+0x55e>
 8001190:	e72e      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 8001192:	454b      	cmp	r3, r9
 8001194:	d000      	beq.n	8001198 <__aeabi_ddiv+0x564>
 8001196:	e72b      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 8001198:	0035      	movs	r5, r6
 800119a:	e72c      	b.n	8000ff6 <__aeabi_ddiv+0x3c2>
 800119c:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <__aeabi_ddiv+0x614>)
 800119e:	4a2f      	ldr	r2, [pc, #188]	@ (800125c <__aeabi_ddiv+0x628>)
 80011a0:	4453      	add	r3, sl
 80011a2:	4592      	cmp	sl, r2
 80011a4:	db43      	blt.n	800122e <__aeabi_ddiv+0x5fa>
 80011a6:	2201      	movs	r2, #1
 80011a8:	2100      	movs	r1, #0
 80011aa:	4493      	add	fp, r2
 80011ac:	e72c      	b.n	8001008 <__aeabi_ddiv+0x3d4>
 80011ae:	42ac      	cmp	r4, r5
 80011b0:	d800      	bhi.n	80011b4 <__aeabi_ddiv+0x580>
 80011b2:	e6d7      	b.n	8000f64 <__aeabi_ddiv+0x330>
 80011b4:	2302      	movs	r3, #2
 80011b6:	425b      	negs	r3, r3
 80011b8:	469c      	mov	ip, r3
 80011ba:	9900      	ldr	r1, [sp, #0]
 80011bc:	444d      	add	r5, r9
 80011be:	454d      	cmp	r5, r9
 80011c0:	419b      	sbcs	r3, r3
 80011c2:	44e3      	add	fp, ip
 80011c4:	468c      	mov	ip, r1
 80011c6:	425b      	negs	r3, r3
 80011c8:	4463      	add	r3, ip
 80011ca:	18c0      	adds	r0, r0, r3
 80011cc:	e6cc      	b.n	8000f68 <__aeabi_ddiv+0x334>
 80011ce:	201f      	movs	r0, #31
 80011d0:	4240      	negs	r0, r0
 80011d2:	1ac3      	subs	r3, r0, r3
 80011d4:	4658      	mov	r0, fp
 80011d6:	40d8      	lsrs	r0, r3
 80011d8:	2920      	cmp	r1, #32
 80011da:	d004      	beq.n	80011e6 <__aeabi_ddiv+0x5b2>
 80011dc:	4659      	mov	r1, fp
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <__aeabi_ddiv+0x62c>)
 80011e0:	4453      	add	r3, sl
 80011e2:	4099      	lsls	r1, r3
 80011e4:	430a      	orrs	r2, r1
 80011e6:	1e53      	subs	r3, r2, #1
 80011e8:	419a      	sbcs	r2, r3
 80011ea:	2307      	movs	r3, #7
 80011ec:	0019      	movs	r1, r3
 80011ee:	4302      	orrs	r2, r0
 80011f0:	2400      	movs	r4, #0
 80011f2:	4011      	ands	r1, r2
 80011f4:	4213      	tst	r3, r2
 80011f6:	d009      	beq.n	800120c <__aeabi_ddiv+0x5d8>
 80011f8:	3308      	adds	r3, #8
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d01d      	beq.n	800123c <__aeabi_ddiv+0x608>
 8001200:	1d13      	adds	r3, r2, #4
 8001202:	4293      	cmp	r3, r2
 8001204:	4189      	sbcs	r1, r1
 8001206:	001a      	movs	r2, r3
 8001208:	4249      	negs	r1, r1
 800120a:	0749      	lsls	r1, r1, #29
 800120c:	08d2      	lsrs	r2, r2, #3
 800120e:	430a      	orrs	r2, r1
 8001210:	4690      	mov	r8, r2
 8001212:	2300      	movs	r3, #0
 8001214:	e57a      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001216:	4649      	mov	r1, r9
 8001218:	9f00      	ldr	r7, [sp, #0]
 800121a:	004d      	lsls	r5, r1, #1
 800121c:	454d      	cmp	r5, r9
 800121e:	4189      	sbcs	r1, r1
 8001220:	46bc      	mov	ip, r7
 8001222:	4249      	negs	r1, r1
 8001224:	4461      	add	r1, ip
 8001226:	46a9      	mov	r9, r5
 8001228:	3a02      	subs	r2, #2
 800122a:	1864      	adds	r4, r4, r1
 800122c:	e7ae      	b.n	800118c <__aeabi_ddiv+0x558>
 800122e:	2201      	movs	r2, #1
 8001230:	4252      	negs	r2, r2
 8001232:	e746      	b.n	80010c2 <__aeabi_ddiv+0x48e>
 8001234:	4599      	cmp	r9, r3
 8001236:	d3ee      	bcc.n	8001216 <__aeabi_ddiv+0x5e2>
 8001238:	000a      	movs	r2, r1
 800123a:	e7aa      	b.n	8001192 <__aeabi_ddiv+0x55e>
 800123c:	2100      	movs	r1, #0
 800123e:	e7e5      	b.n	800120c <__aeabi_ddiv+0x5d8>
 8001240:	0759      	lsls	r1, r3, #29
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	0b1c      	lsrs	r4, r3, #12
 8001246:	e7e1      	b.n	800120c <__aeabi_ddiv+0x5d8>
 8001248:	000003ff 	.word	0x000003ff
 800124c:	feffffff 	.word	0xfeffffff
 8001250:	000007fe 	.word	0x000007fe
 8001254:	000007ff 	.word	0x000007ff
 8001258:	0000041e 	.word	0x0000041e
 800125c:	fffffc02 	.word	0xfffffc02
 8001260:	0000043e 	.word	0x0000043e

08001264 <__eqdf2>:
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	4657      	mov	r7, sl
 8001268:	46de      	mov	lr, fp
 800126a:	464e      	mov	r6, r9
 800126c:	4645      	mov	r5, r8
 800126e:	b5e0      	push	{r5, r6, r7, lr}
 8001270:	000d      	movs	r5, r1
 8001272:	0004      	movs	r4, r0
 8001274:	0fe8      	lsrs	r0, r5, #31
 8001276:	4683      	mov	fp, r0
 8001278:	0309      	lsls	r1, r1, #12
 800127a:	0fd8      	lsrs	r0, r3, #31
 800127c:	0b09      	lsrs	r1, r1, #12
 800127e:	4682      	mov	sl, r0
 8001280:	4819      	ldr	r0, [pc, #100]	@ (80012e8 <__eqdf2+0x84>)
 8001282:	468c      	mov	ip, r1
 8001284:	031f      	lsls	r7, r3, #12
 8001286:	0069      	lsls	r1, r5, #1
 8001288:	005e      	lsls	r6, r3, #1
 800128a:	0d49      	lsrs	r1, r1, #21
 800128c:	0b3f      	lsrs	r7, r7, #12
 800128e:	0d76      	lsrs	r6, r6, #21
 8001290:	4281      	cmp	r1, r0
 8001292:	d018      	beq.n	80012c6 <__eqdf2+0x62>
 8001294:	4286      	cmp	r6, r0
 8001296:	d00f      	beq.n	80012b8 <__eqdf2+0x54>
 8001298:	2001      	movs	r0, #1
 800129a:	42b1      	cmp	r1, r6
 800129c:	d10d      	bne.n	80012ba <__eqdf2+0x56>
 800129e:	45bc      	cmp	ip, r7
 80012a0:	d10b      	bne.n	80012ba <__eqdf2+0x56>
 80012a2:	4294      	cmp	r4, r2
 80012a4:	d109      	bne.n	80012ba <__eqdf2+0x56>
 80012a6:	45d3      	cmp	fp, sl
 80012a8:	d01c      	beq.n	80012e4 <__eqdf2+0x80>
 80012aa:	2900      	cmp	r1, #0
 80012ac:	d105      	bne.n	80012ba <__eqdf2+0x56>
 80012ae:	4660      	mov	r0, ip
 80012b0:	4320      	orrs	r0, r4
 80012b2:	1e43      	subs	r3, r0, #1
 80012b4:	4198      	sbcs	r0, r3
 80012b6:	e000      	b.n	80012ba <__eqdf2+0x56>
 80012b8:	2001      	movs	r0, #1
 80012ba:	bcf0      	pop	{r4, r5, r6, r7}
 80012bc:	46bb      	mov	fp, r7
 80012be:	46b2      	mov	sl, r6
 80012c0:	46a9      	mov	r9, r5
 80012c2:	46a0      	mov	r8, r4
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c6:	2001      	movs	r0, #1
 80012c8:	428e      	cmp	r6, r1
 80012ca:	d1f6      	bne.n	80012ba <__eqdf2+0x56>
 80012cc:	4661      	mov	r1, ip
 80012ce:	4339      	orrs	r1, r7
 80012d0:	000f      	movs	r7, r1
 80012d2:	4317      	orrs	r7, r2
 80012d4:	4327      	orrs	r7, r4
 80012d6:	d1f0      	bne.n	80012ba <__eqdf2+0x56>
 80012d8:	465b      	mov	r3, fp
 80012da:	4652      	mov	r2, sl
 80012dc:	1a98      	subs	r0, r3, r2
 80012de:	1e43      	subs	r3, r0, #1
 80012e0:	4198      	sbcs	r0, r3
 80012e2:	e7ea      	b.n	80012ba <__eqdf2+0x56>
 80012e4:	2000      	movs	r0, #0
 80012e6:	e7e8      	b.n	80012ba <__eqdf2+0x56>
 80012e8:	000007ff 	.word	0x000007ff

080012ec <__gedf2>:
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	4657      	mov	r7, sl
 80012f0:	464e      	mov	r6, r9
 80012f2:	4645      	mov	r5, r8
 80012f4:	46de      	mov	lr, fp
 80012f6:	b5e0      	push	{r5, r6, r7, lr}
 80012f8:	000d      	movs	r5, r1
 80012fa:	030e      	lsls	r6, r1, #12
 80012fc:	0049      	lsls	r1, r1, #1
 80012fe:	0d49      	lsrs	r1, r1, #21
 8001300:	468a      	mov	sl, r1
 8001302:	0fdf      	lsrs	r7, r3, #31
 8001304:	0fe9      	lsrs	r1, r5, #31
 8001306:	46bc      	mov	ip, r7
 8001308:	b083      	sub	sp, #12
 800130a:	4f2f      	ldr	r7, [pc, #188]	@ (80013c8 <__gedf2+0xdc>)
 800130c:	0004      	movs	r4, r0
 800130e:	4680      	mov	r8, r0
 8001310:	9101      	str	r1, [sp, #4]
 8001312:	0058      	lsls	r0, r3, #1
 8001314:	0319      	lsls	r1, r3, #12
 8001316:	4691      	mov	r9, r2
 8001318:	0b36      	lsrs	r6, r6, #12
 800131a:	0b09      	lsrs	r1, r1, #12
 800131c:	0d40      	lsrs	r0, r0, #21
 800131e:	45ba      	cmp	sl, r7
 8001320:	d01d      	beq.n	800135e <__gedf2+0x72>
 8001322:	42b8      	cmp	r0, r7
 8001324:	d00d      	beq.n	8001342 <__gedf2+0x56>
 8001326:	4657      	mov	r7, sl
 8001328:	2f00      	cmp	r7, #0
 800132a:	d12a      	bne.n	8001382 <__gedf2+0x96>
 800132c:	4334      	orrs	r4, r6
 800132e:	2800      	cmp	r0, #0
 8001330:	d124      	bne.n	800137c <__gedf2+0x90>
 8001332:	430a      	orrs	r2, r1
 8001334:	d036      	beq.n	80013a4 <__gedf2+0xb8>
 8001336:	2c00      	cmp	r4, #0
 8001338:	d141      	bne.n	80013be <__gedf2+0xd2>
 800133a:	4663      	mov	r3, ip
 800133c:	0058      	lsls	r0, r3, #1
 800133e:	3801      	subs	r0, #1
 8001340:	e015      	b.n	800136e <__gedf2+0x82>
 8001342:	4311      	orrs	r1, r2
 8001344:	d138      	bne.n	80013b8 <__gedf2+0xcc>
 8001346:	4653      	mov	r3, sl
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <__gedf2+0x64>
 800134c:	4326      	orrs	r6, r4
 800134e:	d0f4      	beq.n	800133a <__gedf2+0x4e>
 8001350:	9b01      	ldr	r3, [sp, #4]
 8001352:	4563      	cmp	r3, ip
 8001354:	d107      	bne.n	8001366 <__gedf2+0x7a>
 8001356:	9b01      	ldr	r3, [sp, #4]
 8001358:	0058      	lsls	r0, r3, #1
 800135a:	3801      	subs	r0, #1
 800135c:	e007      	b.n	800136e <__gedf2+0x82>
 800135e:	4326      	orrs	r6, r4
 8001360:	d12a      	bne.n	80013b8 <__gedf2+0xcc>
 8001362:	4550      	cmp	r0, sl
 8001364:	d021      	beq.n	80013aa <__gedf2+0xbe>
 8001366:	2001      	movs	r0, #1
 8001368:	9b01      	ldr	r3, [sp, #4]
 800136a:	425f      	negs	r7, r3
 800136c:	4338      	orrs	r0, r7
 800136e:	b003      	add	sp, #12
 8001370:	bcf0      	pop	{r4, r5, r6, r7}
 8001372:	46bb      	mov	fp, r7
 8001374:	46b2      	mov	sl, r6
 8001376:	46a9      	mov	r9, r5
 8001378:	46a0      	mov	r8, r4
 800137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137c:	2c00      	cmp	r4, #0
 800137e:	d0dc      	beq.n	800133a <__gedf2+0x4e>
 8001380:	e7e6      	b.n	8001350 <__gedf2+0x64>
 8001382:	2800      	cmp	r0, #0
 8001384:	d0ef      	beq.n	8001366 <__gedf2+0x7a>
 8001386:	9b01      	ldr	r3, [sp, #4]
 8001388:	4563      	cmp	r3, ip
 800138a:	d1ec      	bne.n	8001366 <__gedf2+0x7a>
 800138c:	4582      	cmp	sl, r0
 800138e:	dcea      	bgt.n	8001366 <__gedf2+0x7a>
 8001390:	dbe1      	blt.n	8001356 <__gedf2+0x6a>
 8001392:	428e      	cmp	r6, r1
 8001394:	d8e7      	bhi.n	8001366 <__gedf2+0x7a>
 8001396:	d1de      	bne.n	8001356 <__gedf2+0x6a>
 8001398:	45c8      	cmp	r8, r9
 800139a:	d8e4      	bhi.n	8001366 <__gedf2+0x7a>
 800139c:	2000      	movs	r0, #0
 800139e:	45c8      	cmp	r8, r9
 80013a0:	d2e5      	bcs.n	800136e <__gedf2+0x82>
 80013a2:	e7d8      	b.n	8001356 <__gedf2+0x6a>
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d0e2      	beq.n	800136e <__gedf2+0x82>
 80013a8:	e7dd      	b.n	8001366 <__gedf2+0x7a>
 80013aa:	4311      	orrs	r1, r2
 80013ac:	d104      	bne.n	80013b8 <__gedf2+0xcc>
 80013ae:	9b01      	ldr	r3, [sp, #4]
 80013b0:	4563      	cmp	r3, ip
 80013b2:	d1d8      	bne.n	8001366 <__gedf2+0x7a>
 80013b4:	2000      	movs	r0, #0
 80013b6:	e7da      	b.n	800136e <__gedf2+0x82>
 80013b8:	2002      	movs	r0, #2
 80013ba:	4240      	negs	r0, r0
 80013bc:	e7d7      	b.n	800136e <__gedf2+0x82>
 80013be:	9b01      	ldr	r3, [sp, #4]
 80013c0:	4563      	cmp	r3, ip
 80013c2:	d0e6      	beq.n	8001392 <__gedf2+0xa6>
 80013c4:	e7cf      	b.n	8001366 <__gedf2+0x7a>
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff

080013cc <__ledf2>:
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	4657      	mov	r7, sl
 80013d0:	464e      	mov	r6, r9
 80013d2:	4645      	mov	r5, r8
 80013d4:	46de      	mov	lr, fp
 80013d6:	b5e0      	push	{r5, r6, r7, lr}
 80013d8:	000d      	movs	r5, r1
 80013da:	030e      	lsls	r6, r1, #12
 80013dc:	0049      	lsls	r1, r1, #1
 80013de:	0d49      	lsrs	r1, r1, #21
 80013e0:	468a      	mov	sl, r1
 80013e2:	0fdf      	lsrs	r7, r3, #31
 80013e4:	0fe9      	lsrs	r1, r5, #31
 80013e6:	46bc      	mov	ip, r7
 80013e8:	b083      	sub	sp, #12
 80013ea:	4f2e      	ldr	r7, [pc, #184]	@ (80014a4 <__ledf2+0xd8>)
 80013ec:	0004      	movs	r4, r0
 80013ee:	4680      	mov	r8, r0
 80013f0:	9101      	str	r1, [sp, #4]
 80013f2:	0058      	lsls	r0, r3, #1
 80013f4:	0319      	lsls	r1, r3, #12
 80013f6:	4691      	mov	r9, r2
 80013f8:	0b36      	lsrs	r6, r6, #12
 80013fa:	0b09      	lsrs	r1, r1, #12
 80013fc:	0d40      	lsrs	r0, r0, #21
 80013fe:	45ba      	cmp	sl, r7
 8001400:	d01e      	beq.n	8001440 <__ledf2+0x74>
 8001402:	42b8      	cmp	r0, r7
 8001404:	d00d      	beq.n	8001422 <__ledf2+0x56>
 8001406:	4657      	mov	r7, sl
 8001408:	2f00      	cmp	r7, #0
 800140a:	d127      	bne.n	800145c <__ledf2+0x90>
 800140c:	4334      	orrs	r4, r6
 800140e:	2800      	cmp	r0, #0
 8001410:	d133      	bne.n	800147a <__ledf2+0xae>
 8001412:	430a      	orrs	r2, r1
 8001414:	d034      	beq.n	8001480 <__ledf2+0xb4>
 8001416:	2c00      	cmp	r4, #0
 8001418:	d140      	bne.n	800149c <__ledf2+0xd0>
 800141a:	4663      	mov	r3, ip
 800141c:	0058      	lsls	r0, r3, #1
 800141e:	3801      	subs	r0, #1
 8001420:	e015      	b.n	800144e <__ledf2+0x82>
 8001422:	4311      	orrs	r1, r2
 8001424:	d112      	bne.n	800144c <__ledf2+0x80>
 8001426:	4653      	mov	r3, sl
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <__ledf2+0x64>
 800142c:	4326      	orrs	r6, r4
 800142e:	d0f4      	beq.n	800141a <__ledf2+0x4e>
 8001430:	9b01      	ldr	r3, [sp, #4]
 8001432:	4563      	cmp	r3, ip
 8001434:	d01d      	beq.n	8001472 <__ledf2+0xa6>
 8001436:	2001      	movs	r0, #1
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	425f      	negs	r7, r3
 800143c:	4338      	orrs	r0, r7
 800143e:	e006      	b.n	800144e <__ledf2+0x82>
 8001440:	4326      	orrs	r6, r4
 8001442:	d103      	bne.n	800144c <__ledf2+0x80>
 8001444:	4550      	cmp	r0, sl
 8001446:	d1f6      	bne.n	8001436 <__ledf2+0x6a>
 8001448:	4311      	orrs	r1, r2
 800144a:	d01c      	beq.n	8001486 <__ledf2+0xba>
 800144c:	2002      	movs	r0, #2
 800144e:	b003      	add	sp, #12
 8001450:	bcf0      	pop	{r4, r5, r6, r7}
 8001452:	46bb      	mov	fp, r7
 8001454:	46b2      	mov	sl, r6
 8001456:	46a9      	mov	r9, r5
 8001458:	46a0      	mov	r8, r4
 800145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145c:	2800      	cmp	r0, #0
 800145e:	d0ea      	beq.n	8001436 <__ledf2+0x6a>
 8001460:	9b01      	ldr	r3, [sp, #4]
 8001462:	4563      	cmp	r3, ip
 8001464:	d1e7      	bne.n	8001436 <__ledf2+0x6a>
 8001466:	4582      	cmp	sl, r0
 8001468:	dce5      	bgt.n	8001436 <__ledf2+0x6a>
 800146a:	db02      	blt.n	8001472 <__ledf2+0xa6>
 800146c:	428e      	cmp	r6, r1
 800146e:	d8e2      	bhi.n	8001436 <__ledf2+0x6a>
 8001470:	d00e      	beq.n	8001490 <__ledf2+0xc4>
 8001472:	9b01      	ldr	r3, [sp, #4]
 8001474:	0058      	lsls	r0, r3, #1
 8001476:	3801      	subs	r0, #1
 8001478:	e7e9      	b.n	800144e <__ledf2+0x82>
 800147a:	2c00      	cmp	r4, #0
 800147c:	d0cd      	beq.n	800141a <__ledf2+0x4e>
 800147e:	e7d7      	b.n	8001430 <__ledf2+0x64>
 8001480:	2c00      	cmp	r4, #0
 8001482:	d0e4      	beq.n	800144e <__ledf2+0x82>
 8001484:	e7d7      	b.n	8001436 <__ledf2+0x6a>
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	2000      	movs	r0, #0
 800148a:	4563      	cmp	r3, ip
 800148c:	d0df      	beq.n	800144e <__ledf2+0x82>
 800148e:	e7d2      	b.n	8001436 <__ledf2+0x6a>
 8001490:	45c8      	cmp	r8, r9
 8001492:	d8d0      	bhi.n	8001436 <__ledf2+0x6a>
 8001494:	2000      	movs	r0, #0
 8001496:	45c8      	cmp	r8, r9
 8001498:	d2d9      	bcs.n	800144e <__ledf2+0x82>
 800149a:	e7ea      	b.n	8001472 <__ledf2+0xa6>
 800149c:	9b01      	ldr	r3, [sp, #4]
 800149e:	4563      	cmp	r3, ip
 80014a0:	d0e4      	beq.n	800146c <__ledf2+0xa0>
 80014a2:	e7c8      	b.n	8001436 <__ledf2+0x6a>
 80014a4:	000007ff 	.word	0x000007ff

080014a8 <__aeabi_dmul>:
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	4657      	mov	r7, sl
 80014ac:	464e      	mov	r6, r9
 80014ae:	46de      	mov	lr, fp
 80014b0:	4645      	mov	r5, r8
 80014b2:	b5e0      	push	{r5, r6, r7, lr}
 80014b4:	001f      	movs	r7, r3
 80014b6:	030b      	lsls	r3, r1, #12
 80014b8:	0b1b      	lsrs	r3, r3, #12
 80014ba:	0016      	movs	r6, r2
 80014bc:	469a      	mov	sl, r3
 80014be:	0fca      	lsrs	r2, r1, #31
 80014c0:	004b      	lsls	r3, r1, #1
 80014c2:	0004      	movs	r4, r0
 80014c4:	4691      	mov	r9, r2
 80014c6:	b085      	sub	sp, #20
 80014c8:	0d5b      	lsrs	r3, r3, #21
 80014ca:	d100      	bne.n	80014ce <__aeabi_dmul+0x26>
 80014cc:	e1cf      	b.n	800186e <__aeabi_dmul+0x3c6>
 80014ce:	4acd      	ldr	r2, [pc, #820]	@ (8001804 <__aeabi_dmul+0x35c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d055      	beq.n	8001580 <__aeabi_dmul+0xd8>
 80014d4:	4651      	mov	r1, sl
 80014d6:	0f42      	lsrs	r2, r0, #29
 80014d8:	00c9      	lsls	r1, r1, #3
 80014da:	430a      	orrs	r2, r1
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	0409      	lsls	r1, r1, #16
 80014e0:	4311      	orrs	r1, r2
 80014e2:	00c2      	lsls	r2, r0, #3
 80014e4:	4690      	mov	r8, r2
 80014e6:	4ac8      	ldr	r2, [pc, #800]	@ (8001808 <__aeabi_dmul+0x360>)
 80014e8:	468a      	mov	sl, r1
 80014ea:	4693      	mov	fp, r2
 80014ec:	449b      	add	fp, r3
 80014ee:	2300      	movs	r3, #0
 80014f0:	2500      	movs	r5, #0
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	033c      	lsls	r4, r7, #12
 80014f6:	007b      	lsls	r3, r7, #1
 80014f8:	0ffa      	lsrs	r2, r7, #31
 80014fa:	9601      	str	r6, [sp, #4]
 80014fc:	0b24      	lsrs	r4, r4, #12
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	d100      	bne.n	8001506 <__aeabi_dmul+0x5e>
 8001504:	e188      	b.n	8001818 <__aeabi_dmul+0x370>
 8001506:	4abf      	ldr	r2, [pc, #764]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d100      	bne.n	800150e <__aeabi_dmul+0x66>
 800150c:	e092      	b.n	8001634 <__aeabi_dmul+0x18c>
 800150e:	4abe      	ldr	r2, [pc, #760]	@ (8001808 <__aeabi_dmul+0x360>)
 8001510:	4694      	mov	ip, r2
 8001512:	4463      	add	r3, ip
 8001514:	449b      	add	fp, r3
 8001516:	2d0a      	cmp	r5, #10
 8001518:	dc42      	bgt.n	80015a0 <__aeabi_dmul+0xf8>
 800151a:	00e4      	lsls	r4, r4, #3
 800151c:	0f73      	lsrs	r3, r6, #29
 800151e:	4323      	orrs	r3, r4
 8001520:	2480      	movs	r4, #128	@ 0x80
 8001522:	4649      	mov	r1, r9
 8001524:	0424      	lsls	r4, r4, #16
 8001526:	431c      	orrs	r4, r3
 8001528:	00f3      	lsls	r3, r6, #3
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	9b00      	ldr	r3, [sp, #0]
 800152e:	2000      	movs	r0, #0
 8001530:	4059      	eors	r1, r3
 8001532:	b2cb      	uxtb	r3, r1
 8001534:	9303      	str	r3, [sp, #12]
 8001536:	2d02      	cmp	r5, #2
 8001538:	dc00      	bgt.n	800153c <__aeabi_dmul+0x94>
 800153a:	e094      	b.n	8001666 <__aeabi_dmul+0x1be>
 800153c:	2301      	movs	r3, #1
 800153e:	40ab      	lsls	r3, r5
 8001540:	001d      	movs	r5, r3
 8001542:	23a6      	movs	r3, #166	@ 0xa6
 8001544:	002a      	movs	r2, r5
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	401a      	ands	r2, r3
 800154a:	421d      	tst	r5, r3
 800154c:	d000      	beq.n	8001550 <__aeabi_dmul+0xa8>
 800154e:	e229      	b.n	80019a4 <__aeabi_dmul+0x4fc>
 8001550:	2390      	movs	r3, #144	@ 0x90
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	421d      	tst	r5, r3
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0xb2>
 8001558:	e24d      	b.n	80019f6 <__aeabi_dmul+0x54e>
 800155a:	2300      	movs	r3, #0
 800155c:	2480      	movs	r4, #128	@ 0x80
 800155e:	4699      	mov	r9, r3
 8001560:	0324      	lsls	r4, r4, #12
 8001562:	4ba8      	ldr	r3, [pc, #672]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001564:	0010      	movs	r0, r2
 8001566:	464a      	mov	r2, r9
 8001568:	051b      	lsls	r3, r3, #20
 800156a:	4323      	orrs	r3, r4
 800156c:	07d2      	lsls	r2, r2, #31
 800156e:	4313      	orrs	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	b005      	add	sp, #20
 8001574:	bcf0      	pop	{r4, r5, r6, r7}
 8001576:	46bb      	mov	fp, r7
 8001578:	46b2      	mov	sl, r6
 800157a:	46a9      	mov	r9, r5
 800157c:	46a0      	mov	r8, r4
 800157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001580:	4652      	mov	r2, sl
 8001582:	4302      	orrs	r2, r0
 8001584:	4690      	mov	r8, r2
 8001586:	d000      	beq.n	800158a <__aeabi_dmul+0xe2>
 8001588:	e1ac      	b.n	80018e4 <__aeabi_dmul+0x43c>
 800158a:	469b      	mov	fp, r3
 800158c:	2302      	movs	r3, #2
 800158e:	4692      	mov	sl, r2
 8001590:	2508      	movs	r5, #8
 8001592:	9302      	str	r3, [sp, #8]
 8001594:	e7ae      	b.n	80014f4 <__aeabi_dmul+0x4c>
 8001596:	9b00      	ldr	r3, [sp, #0]
 8001598:	46a2      	mov	sl, r4
 800159a:	4699      	mov	r9, r3
 800159c:	9b01      	ldr	r3, [sp, #4]
 800159e:	4698      	mov	r8, r3
 80015a0:	9b02      	ldr	r3, [sp, #8]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dmul+0x100>
 80015a6:	e1ca      	b.n	800193e <__aeabi_dmul+0x496>
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0x106>
 80015ac:	e192      	b.n	80018d4 <__aeabi_dmul+0x42c>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d110      	bne.n	80015d4 <__aeabi_dmul+0x12c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2400      	movs	r4, #0
 80015b6:	2200      	movs	r2, #0
 80015b8:	e7d4      	b.n	8001564 <__aeabi_dmul+0xbc>
 80015ba:	2201      	movs	r2, #1
 80015bc:	087b      	lsrs	r3, r7, #1
 80015be:	403a      	ands	r2, r7
 80015c0:	4313      	orrs	r3, r2
 80015c2:	4652      	mov	r2, sl
 80015c4:	07d2      	lsls	r2, r2, #31
 80015c6:	4313      	orrs	r3, r2
 80015c8:	4698      	mov	r8, r3
 80015ca:	4653      	mov	r3, sl
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	469a      	mov	sl, r3
 80015d0:	9b03      	ldr	r3, [sp, #12]
 80015d2:	4699      	mov	r9, r3
 80015d4:	465b      	mov	r3, fp
 80015d6:	1c58      	adds	r0, r3, #1
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	445b      	add	r3, fp
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dc00      	bgt.n	80015e4 <__aeabi_dmul+0x13c>
 80015e2:	e1b1      	b.n	8001948 <__aeabi_dmul+0x4a0>
 80015e4:	4642      	mov	r2, r8
 80015e6:	0752      	lsls	r2, r2, #29
 80015e8:	d00b      	beq.n	8001602 <__aeabi_dmul+0x15a>
 80015ea:	220f      	movs	r2, #15
 80015ec:	4641      	mov	r1, r8
 80015ee:	400a      	ands	r2, r1
 80015f0:	2a04      	cmp	r2, #4
 80015f2:	d006      	beq.n	8001602 <__aeabi_dmul+0x15a>
 80015f4:	4642      	mov	r2, r8
 80015f6:	1d11      	adds	r1, r2, #4
 80015f8:	4541      	cmp	r1, r8
 80015fa:	4192      	sbcs	r2, r2
 80015fc:	4688      	mov	r8, r1
 80015fe:	4252      	negs	r2, r2
 8001600:	4492      	add	sl, r2
 8001602:	4652      	mov	r2, sl
 8001604:	01d2      	lsls	r2, r2, #7
 8001606:	d506      	bpl.n	8001616 <__aeabi_dmul+0x16e>
 8001608:	4652      	mov	r2, sl
 800160a:	4b80      	ldr	r3, [pc, #512]	@ (800180c <__aeabi_dmul+0x364>)
 800160c:	401a      	ands	r2, r3
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	4692      	mov	sl, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	18c3      	adds	r3, r0, r3
 8001616:	4a7e      	ldr	r2, [pc, #504]	@ (8001810 <__aeabi_dmul+0x368>)
 8001618:	4293      	cmp	r3, r2
 800161a:	dd00      	ble.n	800161e <__aeabi_dmul+0x176>
 800161c:	e18f      	b.n	800193e <__aeabi_dmul+0x496>
 800161e:	4642      	mov	r2, r8
 8001620:	08d1      	lsrs	r1, r2, #3
 8001622:	4652      	mov	r2, sl
 8001624:	0752      	lsls	r2, r2, #29
 8001626:	430a      	orrs	r2, r1
 8001628:	4651      	mov	r1, sl
 800162a:	055b      	lsls	r3, r3, #21
 800162c:	024c      	lsls	r4, r1, #9
 800162e:	0b24      	lsrs	r4, r4, #12
 8001630:	0d5b      	lsrs	r3, r3, #21
 8001632:	e797      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001634:	4b73      	ldr	r3, [pc, #460]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001636:	4326      	orrs	r6, r4
 8001638:	469c      	mov	ip, r3
 800163a:	44e3      	add	fp, ip
 800163c:	2e00      	cmp	r6, #0
 800163e:	d100      	bne.n	8001642 <__aeabi_dmul+0x19a>
 8001640:	e16f      	b.n	8001922 <__aeabi_dmul+0x47a>
 8001642:	2303      	movs	r3, #3
 8001644:	4649      	mov	r1, r9
 8001646:	431d      	orrs	r5, r3
 8001648:	9b00      	ldr	r3, [sp, #0]
 800164a:	4059      	eors	r1, r3
 800164c:	b2cb      	uxtb	r3, r1
 800164e:	9303      	str	r3, [sp, #12]
 8001650:	2d0a      	cmp	r5, #10
 8001652:	dd00      	ble.n	8001656 <__aeabi_dmul+0x1ae>
 8001654:	e133      	b.n	80018be <__aeabi_dmul+0x416>
 8001656:	2301      	movs	r3, #1
 8001658:	40ab      	lsls	r3, r5
 800165a:	001d      	movs	r5, r3
 800165c:	2303      	movs	r3, #3
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	2288      	movs	r2, #136	@ 0x88
 8001662:	422a      	tst	r2, r5
 8001664:	d197      	bne.n	8001596 <__aeabi_dmul+0xee>
 8001666:	4642      	mov	r2, r8
 8001668:	4643      	mov	r3, r8
 800166a:	0412      	lsls	r2, r2, #16
 800166c:	0c12      	lsrs	r2, r2, #16
 800166e:	0016      	movs	r6, r2
 8001670:	9801      	ldr	r0, [sp, #4]
 8001672:	0c1d      	lsrs	r5, r3, #16
 8001674:	0c03      	lsrs	r3, r0, #16
 8001676:	0400      	lsls	r0, r0, #16
 8001678:	0c00      	lsrs	r0, r0, #16
 800167a:	4346      	muls	r6, r0
 800167c:	46b4      	mov	ip, r6
 800167e:	001e      	movs	r6, r3
 8001680:	436e      	muls	r6, r5
 8001682:	9600      	str	r6, [sp, #0]
 8001684:	0016      	movs	r6, r2
 8001686:	0007      	movs	r7, r0
 8001688:	435e      	muls	r6, r3
 800168a:	4661      	mov	r1, ip
 800168c:	46b0      	mov	r8, r6
 800168e:	436f      	muls	r7, r5
 8001690:	0c0e      	lsrs	r6, r1, #16
 8001692:	44b8      	add	r8, r7
 8001694:	4446      	add	r6, r8
 8001696:	42b7      	cmp	r7, r6
 8001698:	d905      	bls.n	80016a6 <__aeabi_dmul+0x1fe>
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	0249      	lsls	r1, r1, #9
 800169e:	4688      	mov	r8, r1
 80016a0:	9f00      	ldr	r7, [sp, #0]
 80016a2:	4447      	add	r7, r8
 80016a4:	9700      	str	r7, [sp, #0]
 80016a6:	4661      	mov	r1, ip
 80016a8:	0409      	lsls	r1, r1, #16
 80016aa:	0c09      	lsrs	r1, r1, #16
 80016ac:	0c37      	lsrs	r7, r6, #16
 80016ae:	0436      	lsls	r6, r6, #16
 80016b0:	468c      	mov	ip, r1
 80016b2:	0031      	movs	r1, r6
 80016b4:	4461      	add	r1, ip
 80016b6:	9101      	str	r1, [sp, #4]
 80016b8:	0011      	movs	r1, r2
 80016ba:	0c26      	lsrs	r6, r4, #16
 80016bc:	0424      	lsls	r4, r4, #16
 80016be:	0c24      	lsrs	r4, r4, #16
 80016c0:	4361      	muls	r1, r4
 80016c2:	468c      	mov	ip, r1
 80016c4:	0021      	movs	r1, r4
 80016c6:	4369      	muls	r1, r5
 80016c8:	4689      	mov	r9, r1
 80016ca:	4661      	mov	r1, ip
 80016cc:	0c09      	lsrs	r1, r1, #16
 80016ce:	4688      	mov	r8, r1
 80016d0:	4372      	muls	r2, r6
 80016d2:	444a      	add	r2, r9
 80016d4:	4442      	add	r2, r8
 80016d6:	4375      	muls	r5, r6
 80016d8:	4591      	cmp	r9, r2
 80016da:	d903      	bls.n	80016e4 <__aeabi_dmul+0x23c>
 80016dc:	2180      	movs	r1, #128	@ 0x80
 80016de:	0249      	lsls	r1, r1, #9
 80016e0:	4688      	mov	r8, r1
 80016e2:	4445      	add	r5, r8
 80016e4:	0c11      	lsrs	r1, r2, #16
 80016e6:	4688      	mov	r8, r1
 80016e8:	4661      	mov	r1, ip
 80016ea:	0409      	lsls	r1, r1, #16
 80016ec:	0c09      	lsrs	r1, r1, #16
 80016ee:	468c      	mov	ip, r1
 80016f0:	0412      	lsls	r2, r2, #16
 80016f2:	4462      	add	r2, ip
 80016f4:	18b9      	adds	r1, r7, r2
 80016f6:	9102      	str	r1, [sp, #8]
 80016f8:	4651      	mov	r1, sl
 80016fa:	0c09      	lsrs	r1, r1, #16
 80016fc:	468c      	mov	ip, r1
 80016fe:	4651      	mov	r1, sl
 8001700:	040f      	lsls	r7, r1, #16
 8001702:	0c3f      	lsrs	r7, r7, #16
 8001704:	0039      	movs	r1, r7
 8001706:	4341      	muls	r1, r0
 8001708:	4445      	add	r5, r8
 800170a:	4688      	mov	r8, r1
 800170c:	4661      	mov	r1, ip
 800170e:	4341      	muls	r1, r0
 8001710:	468a      	mov	sl, r1
 8001712:	4641      	mov	r1, r8
 8001714:	4660      	mov	r0, ip
 8001716:	0c09      	lsrs	r1, r1, #16
 8001718:	4689      	mov	r9, r1
 800171a:	4358      	muls	r0, r3
 800171c:	437b      	muls	r3, r7
 800171e:	4453      	add	r3, sl
 8001720:	444b      	add	r3, r9
 8001722:	459a      	cmp	sl, r3
 8001724:	d903      	bls.n	800172e <__aeabi_dmul+0x286>
 8001726:	2180      	movs	r1, #128	@ 0x80
 8001728:	0249      	lsls	r1, r1, #9
 800172a:	4689      	mov	r9, r1
 800172c:	4448      	add	r0, r9
 800172e:	0c19      	lsrs	r1, r3, #16
 8001730:	4689      	mov	r9, r1
 8001732:	4641      	mov	r1, r8
 8001734:	0409      	lsls	r1, r1, #16
 8001736:	0c09      	lsrs	r1, r1, #16
 8001738:	4688      	mov	r8, r1
 800173a:	0039      	movs	r1, r7
 800173c:	4361      	muls	r1, r4
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	4443      	add	r3, r8
 8001742:	4688      	mov	r8, r1
 8001744:	4661      	mov	r1, ip
 8001746:	434c      	muls	r4, r1
 8001748:	4371      	muls	r1, r6
 800174a:	468c      	mov	ip, r1
 800174c:	4641      	mov	r1, r8
 800174e:	4377      	muls	r7, r6
 8001750:	0c0e      	lsrs	r6, r1, #16
 8001752:	193f      	adds	r7, r7, r4
 8001754:	19f6      	adds	r6, r6, r7
 8001756:	4448      	add	r0, r9
 8001758:	42b4      	cmp	r4, r6
 800175a:	d903      	bls.n	8001764 <__aeabi_dmul+0x2bc>
 800175c:	2180      	movs	r1, #128	@ 0x80
 800175e:	0249      	lsls	r1, r1, #9
 8001760:	4689      	mov	r9, r1
 8001762:	44cc      	add	ip, r9
 8001764:	9902      	ldr	r1, [sp, #8]
 8001766:	9f00      	ldr	r7, [sp, #0]
 8001768:	4689      	mov	r9, r1
 800176a:	0431      	lsls	r1, r6, #16
 800176c:	444f      	add	r7, r9
 800176e:	4689      	mov	r9, r1
 8001770:	4641      	mov	r1, r8
 8001772:	4297      	cmp	r7, r2
 8001774:	4192      	sbcs	r2, r2
 8001776:	040c      	lsls	r4, r1, #16
 8001778:	0c24      	lsrs	r4, r4, #16
 800177a:	444c      	add	r4, r9
 800177c:	18ff      	adds	r7, r7, r3
 800177e:	4252      	negs	r2, r2
 8001780:	1964      	adds	r4, r4, r5
 8001782:	18a1      	adds	r1, r4, r2
 8001784:	429f      	cmp	r7, r3
 8001786:	419b      	sbcs	r3, r3
 8001788:	4688      	mov	r8, r1
 800178a:	4682      	mov	sl, r0
 800178c:	425b      	negs	r3, r3
 800178e:	4699      	mov	r9, r3
 8001790:	4590      	cmp	r8, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	42ac      	cmp	r4, r5
 8001796:	41a4      	sbcs	r4, r4
 8001798:	44c2      	add	sl, r8
 800179a:	44d1      	add	r9, sl
 800179c:	4252      	negs	r2, r2
 800179e:	4264      	negs	r4, r4
 80017a0:	4314      	orrs	r4, r2
 80017a2:	4599      	cmp	r9, r3
 80017a4:	419b      	sbcs	r3, r3
 80017a6:	4582      	cmp	sl, r0
 80017a8:	4192      	sbcs	r2, r2
 80017aa:	425b      	negs	r3, r3
 80017ac:	4252      	negs	r2, r2
 80017ae:	4313      	orrs	r3, r2
 80017b0:	464a      	mov	r2, r9
 80017b2:	0c36      	lsrs	r6, r6, #16
 80017b4:	19a4      	adds	r4, r4, r6
 80017b6:	18e3      	adds	r3, r4, r3
 80017b8:	4463      	add	r3, ip
 80017ba:	025b      	lsls	r3, r3, #9
 80017bc:	0dd2      	lsrs	r2, r2, #23
 80017be:	431a      	orrs	r2, r3
 80017c0:	9901      	ldr	r1, [sp, #4]
 80017c2:	4692      	mov	sl, r2
 80017c4:	027a      	lsls	r2, r7, #9
 80017c6:	430a      	orrs	r2, r1
 80017c8:	1e50      	subs	r0, r2, #1
 80017ca:	4182      	sbcs	r2, r0
 80017cc:	0dff      	lsrs	r7, r7, #23
 80017ce:	4317      	orrs	r7, r2
 80017d0:	464a      	mov	r2, r9
 80017d2:	0252      	lsls	r2, r2, #9
 80017d4:	4317      	orrs	r7, r2
 80017d6:	46b8      	mov	r8, r7
 80017d8:	01db      	lsls	r3, r3, #7
 80017da:	d500      	bpl.n	80017de <__aeabi_dmul+0x336>
 80017dc:	e6ed      	b.n	80015ba <__aeabi_dmul+0x112>
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <__aeabi_dmul+0x36c>)
 80017e0:	9a03      	ldr	r2, [sp, #12]
 80017e2:	445b      	add	r3, fp
 80017e4:	4691      	mov	r9, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc00      	bgt.n	80017ec <__aeabi_dmul+0x344>
 80017ea:	e0ac      	b.n	8001946 <__aeabi_dmul+0x49e>
 80017ec:	003a      	movs	r2, r7
 80017ee:	0752      	lsls	r2, r2, #29
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dmul+0x34c>
 80017f2:	e710      	b.n	8001616 <__aeabi_dmul+0x16e>
 80017f4:	220f      	movs	r2, #15
 80017f6:	4658      	mov	r0, fp
 80017f8:	403a      	ands	r2, r7
 80017fa:	2a04      	cmp	r2, #4
 80017fc:	d000      	beq.n	8001800 <__aeabi_dmul+0x358>
 80017fe:	e6f9      	b.n	80015f4 <__aeabi_dmul+0x14c>
 8001800:	e709      	b.n	8001616 <__aeabi_dmul+0x16e>
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	000007ff 	.word	0x000007ff
 8001808:	fffffc01 	.word	0xfffffc01
 800180c:	feffffff 	.word	0xfeffffff
 8001810:	000007fe 	.word	0x000007fe
 8001814:	000003ff 	.word	0x000003ff
 8001818:	0022      	movs	r2, r4
 800181a:	4332      	orrs	r2, r6
 800181c:	d06f      	beq.n	80018fe <__aeabi_dmul+0x456>
 800181e:	2c00      	cmp	r4, #0
 8001820:	d100      	bne.n	8001824 <__aeabi_dmul+0x37c>
 8001822:	e0c2      	b.n	80019aa <__aeabi_dmul+0x502>
 8001824:	0020      	movs	r0, r4
 8001826:	f000 fddf 	bl	80023e8 <__clzsi2>
 800182a:	0002      	movs	r2, r0
 800182c:	0003      	movs	r3, r0
 800182e:	3a0b      	subs	r2, #11
 8001830:	201d      	movs	r0, #29
 8001832:	1a82      	subs	r2, r0, r2
 8001834:	0030      	movs	r0, r6
 8001836:	0019      	movs	r1, r3
 8001838:	40d0      	lsrs	r0, r2
 800183a:	3908      	subs	r1, #8
 800183c:	408c      	lsls	r4, r1
 800183e:	0002      	movs	r2, r0
 8001840:	4322      	orrs	r2, r4
 8001842:	0034      	movs	r4, r6
 8001844:	408c      	lsls	r4, r1
 8001846:	4659      	mov	r1, fp
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	4986      	ldr	r1, [pc, #536]	@ (8001a64 <__aeabi_dmul+0x5bc>)
 800184c:	468b      	mov	fp, r1
 800184e:	449b      	add	fp, r3
 8001850:	2d0a      	cmp	r5, #10
 8001852:	dd00      	ble.n	8001856 <__aeabi_dmul+0x3ae>
 8001854:	e6a4      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001856:	4649      	mov	r1, r9
 8001858:	9b00      	ldr	r3, [sp, #0]
 800185a:	9401      	str	r4, [sp, #4]
 800185c:	4059      	eors	r1, r3
 800185e:	b2cb      	uxtb	r3, r1
 8001860:	0014      	movs	r4, r2
 8001862:	2000      	movs	r0, #0
 8001864:	9303      	str	r3, [sp, #12]
 8001866:	2d02      	cmp	r5, #2
 8001868:	dd00      	ble.n	800186c <__aeabi_dmul+0x3c4>
 800186a:	e667      	b.n	800153c <__aeabi_dmul+0x94>
 800186c:	e6fb      	b.n	8001666 <__aeabi_dmul+0x1be>
 800186e:	4653      	mov	r3, sl
 8001870:	4303      	orrs	r3, r0
 8001872:	4698      	mov	r8, r3
 8001874:	d03c      	beq.n	80018f0 <__aeabi_dmul+0x448>
 8001876:	4653      	mov	r3, sl
 8001878:	2b00      	cmp	r3, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dmul+0x3d6>
 800187c:	e0a3      	b.n	80019c6 <__aeabi_dmul+0x51e>
 800187e:	4650      	mov	r0, sl
 8001880:	f000 fdb2 	bl	80023e8 <__clzsi2>
 8001884:	230b      	movs	r3, #11
 8001886:	425b      	negs	r3, r3
 8001888:	469c      	mov	ip, r3
 800188a:	0002      	movs	r2, r0
 800188c:	4484      	add	ip, r0
 800188e:	0011      	movs	r1, r2
 8001890:	4650      	mov	r0, sl
 8001892:	3908      	subs	r1, #8
 8001894:	4088      	lsls	r0, r1
 8001896:	231d      	movs	r3, #29
 8001898:	4680      	mov	r8, r0
 800189a:	4660      	mov	r0, ip
 800189c:	1a1b      	subs	r3, r3, r0
 800189e:	0020      	movs	r0, r4
 80018a0:	40d8      	lsrs	r0, r3
 80018a2:	0003      	movs	r3, r0
 80018a4:	4640      	mov	r0, r8
 80018a6:	4303      	orrs	r3, r0
 80018a8:	469a      	mov	sl, r3
 80018aa:	0023      	movs	r3, r4
 80018ac:	408b      	lsls	r3, r1
 80018ae:	4698      	mov	r8, r3
 80018b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a64 <__aeabi_dmul+0x5bc>)
 80018b2:	2500      	movs	r5, #0
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	469b      	mov	fp, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	e61a      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018be:	2d0f      	cmp	r5, #15
 80018c0:	d000      	beq.n	80018c4 <__aeabi_dmul+0x41c>
 80018c2:	e0c9      	b.n	8001a58 <__aeabi_dmul+0x5b0>
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	4652      	mov	r2, sl
 80018c8:	031b      	lsls	r3, r3, #12
 80018ca:	421a      	tst	r2, r3
 80018cc:	d002      	beq.n	80018d4 <__aeabi_dmul+0x42c>
 80018ce:	421c      	tst	r4, r3
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dmul+0x42c>
 80018d2:	e092      	b.n	80019fa <__aeabi_dmul+0x552>
 80018d4:	2480      	movs	r4, #128	@ 0x80
 80018d6:	4653      	mov	r3, sl
 80018d8:	0324      	lsls	r4, r4, #12
 80018da:	431c      	orrs	r4, r3
 80018dc:	0324      	lsls	r4, r4, #12
 80018de:	4642      	mov	r2, r8
 80018e0:	0b24      	lsrs	r4, r4, #12
 80018e2:	e63e      	b.n	8001562 <__aeabi_dmul+0xba>
 80018e4:	469b      	mov	fp, r3
 80018e6:	2303      	movs	r3, #3
 80018e8:	4680      	mov	r8, r0
 80018ea:	250c      	movs	r5, #12
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	e601      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018f0:	2300      	movs	r3, #0
 80018f2:	469a      	mov	sl, r3
 80018f4:	469b      	mov	fp, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	2504      	movs	r5, #4
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	e5fa      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018fe:	2101      	movs	r1, #1
 8001900:	430d      	orrs	r5, r1
 8001902:	2d0a      	cmp	r5, #10
 8001904:	dd00      	ble.n	8001908 <__aeabi_dmul+0x460>
 8001906:	e64b      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001908:	4649      	mov	r1, r9
 800190a:	9800      	ldr	r0, [sp, #0]
 800190c:	4041      	eors	r1, r0
 800190e:	b2c9      	uxtb	r1, r1
 8001910:	9103      	str	r1, [sp, #12]
 8001912:	2d02      	cmp	r5, #2
 8001914:	dc00      	bgt.n	8001918 <__aeabi_dmul+0x470>
 8001916:	e096      	b.n	8001a46 <__aeabi_dmul+0x59e>
 8001918:	2300      	movs	r3, #0
 800191a:	2400      	movs	r4, #0
 800191c:	2001      	movs	r0, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	e60c      	b.n	800153c <__aeabi_dmul+0x94>
 8001922:	4649      	mov	r1, r9
 8001924:	2302      	movs	r3, #2
 8001926:	9a00      	ldr	r2, [sp, #0]
 8001928:	432b      	orrs	r3, r5
 800192a:	4051      	eors	r1, r2
 800192c:	b2ca      	uxtb	r2, r1
 800192e:	9203      	str	r2, [sp, #12]
 8001930:	2b0a      	cmp	r3, #10
 8001932:	dd00      	ble.n	8001936 <__aeabi_dmul+0x48e>
 8001934:	e634      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001936:	2d00      	cmp	r5, #0
 8001938:	d157      	bne.n	80019ea <__aeabi_dmul+0x542>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	4699      	mov	r9, r3
 800193e:	2400      	movs	r4, #0
 8001940:	2200      	movs	r2, #0
 8001942:	4b49      	ldr	r3, [pc, #292]	@ (8001a68 <__aeabi_dmul+0x5c0>)
 8001944:	e60e      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001946:	4658      	mov	r0, fp
 8001948:	2101      	movs	r1, #1
 800194a:	1ac9      	subs	r1, r1, r3
 800194c:	2938      	cmp	r1, #56	@ 0x38
 800194e:	dd00      	ble.n	8001952 <__aeabi_dmul+0x4aa>
 8001950:	e62f      	b.n	80015b2 <__aeabi_dmul+0x10a>
 8001952:	291f      	cmp	r1, #31
 8001954:	dd56      	ble.n	8001a04 <__aeabi_dmul+0x55c>
 8001956:	221f      	movs	r2, #31
 8001958:	4654      	mov	r4, sl
 800195a:	4252      	negs	r2, r2
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	40dc      	lsrs	r4, r3
 8001960:	2920      	cmp	r1, #32
 8001962:	d007      	beq.n	8001974 <__aeabi_dmul+0x4cc>
 8001964:	4b41      	ldr	r3, [pc, #260]	@ (8001a6c <__aeabi_dmul+0x5c4>)
 8001966:	4642      	mov	r2, r8
 8001968:	469c      	mov	ip, r3
 800196a:	4653      	mov	r3, sl
 800196c:	4460      	add	r0, ip
 800196e:	4083      	lsls	r3, r0
 8001970:	431a      	orrs	r2, r3
 8001972:	4690      	mov	r8, r2
 8001974:	4642      	mov	r2, r8
 8001976:	2107      	movs	r1, #7
 8001978:	1e53      	subs	r3, r2, #1
 800197a:	419a      	sbcs	r2, r3
 800197c:	000b      	movs	r3, r1
 800197e:	4322      	orrs	r2, r4
 8001980:	4013      	ands	r3, r2
 8001982:	2400      	movs	r4, #0
 8001984:	4211      	tst	r1, r2
 8001986:	d009      	beq.n	800199c <__aeabi_dmul+0x4f4>
 8001988:	230f      	movs	r3, #15
 800198a:	4013      	ands	r3, r2
 800198c:	2b04      	cmp	r3, #4
 800198e:	d05d      	beq.n	8001a4c <__aeabi_dmul+0x5a4>
 8001990:	1d11      	adds	r1, r2, #4
 8001992:	4291      	cmp	r1, r2
 8001994:	419b      	sbcs	r3, r3
 8001996:	000a      	movs	r2, r1
 8001998:	425b      	negs	r3, r3
 800199a:	075b      	lsls	r3, r3, #29
 800199c:	08d2      	lsrs	r2, r2, #3
 800199e:	431a      	orrs	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	e5df      	b.n	8001564 <__aeabi_dmul+0xbc>
 80019a4:	9b03      	ldr	r3, [sp, #12]
 80019a6:	4699      	mov	r9, r3
 80019a8:	e5fa      	b.n	80015a0 <__aeabi_dmul+0xf8>
 80019aa:	9801      	ldr	r0, [sp, #4]
 80019ac:	f000 fd1c 	bl	80023e8 <__clzsi2>
 80019b0:	0002      	movs	r2, r0
 80019b2:	0003      	movs	r3, r0
 80019b4:	3215      	adds	r2, #21
 80019b6:	3320      	adds	r3, #32
 80019b8:	2a1c      	cmp	r2, #28
 80019ba:	dc00      	bgt.n	80019be <__aeabi_dmul+0x516>
 80019bc:	e738      	b.n	8001830 <__aeabi_dmul+0x388>
 80019be:	9a01      	ldr	r2, [sp, #4]
 80019c0:	3808      	subs	r0, #8
 80019c2:	4082      	lsls	r2, r0
 80019c4:	e73f      	b.n	8001846 <__aeabi_dmul+0x39e>
 80019c6:	f000 fd0f 	bl	80023e8 <__clzsi2>
 80019ca:	2315      	movs	r3, #21
 80019cc:	469c      	mov	ip, r3
 80019ce:	4484      	add	ip, r0
 80019d0:	0002      	movs	r2, r0
 80019d2:	4663      	mov	r3, ip
 80019d4:	3220      	adds	r2, #32
 80019d6:	2b1c      	cmp	r3, #28
 80019d8:	dc00      	bgt.n	80019dc <__aeabi_dmul+0x534>
 80019da:	e758      	b.n	800188e <__aeabi_dmul+0x3e6>
 80019dc:	2300      	movs	r3, #0
 80019de:	4698      	mov	r8, r3
 80019e0:	0023      	movs	r3, r4
 80019e2:	3808      	subs	r0, #8
 80019e4:	4083      	lsls	r3, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	e762      	b.n	80018b0 <__aeabi_dmul+0x408>
 80019ea:	001d      	movs	r5, r3
 80019ec:	2300      	movs	r3, #0
 80019ee:	2400      	movs	r4, #0
 80019f0:	2002      	movs	r0, #2
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	e5a2      	b.n	800153c <__aeabi_dmul+0x94>
 80019f6:	9002      	str	r0, [sp, #8]
 80019f8:	e632      	b.n	8001660 <__aeabi_dmul+0x1b8>
 80019fa:	431c      	orrs	r4, r3
 80019fc:	9b00      	ldr	r3, [sp, #0]
 80019fe:	9a01      	ldr	r2, [sp, #4]
 8001a00:	4699      	mov	r9, r3
 8001a02:	e5ae      	b.n	8001562 <__aeabi_dmul+0xba>
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <__aeabi_dmul+0x5c8>)
 8001a06:	4652      	mov	r2, sl
 8001a08:	18c3      	adds	r3, r0, r3
 8001a0a:	4640      	mov	r0, r8
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	40c8      	lsrs	r0, r1
 8001a10:	4302      	orrs	r2, r0
 8001a12:	4640      	mov	r0, r8
 8001a14:	4098      	lsls	r0, r3
 8001a16:	0003      	movs	r3, r0
 8001a18:	1e58      	subs	r0, r3, #1
 8001a1a:	4183      	sbcs	r3, r0
 8001a1c:	4654      	mov	r4, sl
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	40cc      	lsrs	r4, r1
 8001a22:	0753      	lsls	r3, r2, #29
 8001a24:	d009      	beq.n	8001a3a <__aeabi_dmul+0x592>
 8001a26:	230f      	movs	r3, #15
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d005      	beq.n	8001a3a <__aeabi_dmul+0x592>
 8001a2e:	1d13      	adds	r3, r2, #4
 8001a30:	4293      	cmp	r3, r2
 8001a32:	4192      	sbcs	r2, r2
 8001a34:	4252      	negs	r2, r2
 8001a36:	18a4      	adds	r4, r4, r2
 8001a38:	001a      	movs	r2, r3
 8001a3a:	0223      	lsls	r3, r4, #8
 8001a3c:	d508      	bpl.n	8001a50 <__aeabi_dmul+0x5a8>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2400      	movs	r4, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	e58e      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001a46:	4689      	mov	r9, r1
 8001a48:	2400      	movs	r4, #0
 8001a4a:	e58b      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e7a5      	b.n	800199c <__aeabi_dmul+0x4f4>
 8001a50:	0763      	lsls	r3, r4, #29
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0b24      	lsrs	r4, r4, #12
 8001a56:	e7a1      	b.n	800199c <__aeabi_dmul+0x4f4>
 8001a58:	9b00      	ldr	r3, [sp, #0]
 8001a5a:	46a2      	mov	sl, r4
 8001a5c:	4699      	mov	r9, r3
 8001a5e:	9b01      	ldr	r3, [sp, #4]
 8001a60:	4698      	mov	r8, r3
 8001a62:	e737      	b.n	80018d4 <__aeabi_dmul+0x42c>
 8001a64:	fffffc0d 	.word	0xfffffc0d
 8001a68:	000007ff 	.word	0x000007ff
 8001a6c:	0000043e 	.word	0x0000043e
 8001a70:	0000041e 	.word	0x0000041e

08001a74 <__aeabi_dsub>:
 8001a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a76:	4657      	mov	r7, sl
 8001a78:	464e      	mov	r6, r9
 8001a7a:	4645      	mov	r5, r8
 8001a7c:	46de      	mov	lr, fp
 8001a7e:	b5e0      	push	{r5, r6, r7, lr}
 8001a80:	b083      	sub	sp, #12
 8001a82:	9000      	str	r0, [sp, #0]
 8001a84:	9101      	str	r1, [sp, #4]
 8001a86:	030c      	lsls	r4, r1, #12
 8001a88:	004d      	lsls	r5, r1, #1
 8001a8a:	0fce      	lsrs	r6, r1, #31
 8001a8c:	0a61      	lsrs	r1, r4, #9
 8001a8e:	9c00      	ldr	r4, [sp, #0]
 8001a90:	005f      	lsls	r7, r3, #1
 8001a92:	0f64      	lsrs	r4, r4, #29
 8001a94:	430c      	orrs	r4, r1
 8001a96:	9900      	ldr	r1, [sp, #0]
 8001a98:	9200      	str	r2, [sp, #0]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	00c8      	lsls	r0, r1, #3
 8001a9e:	0319      	lsls	r1, r3, #12
 8001aa0:	0d7b      	lsrs	r3, r7, #21
 8001aa2:	4699      	mov	r9, r3
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	4fcc      	ldr	r7, [pc, #816]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001aa8:	0fdb      	lsrs	r3, r3, #31
 8001aaa:	469c      	mov	ip, r3
 8001aac:	0a4b      	lsrs	r3, r1, #9
 8001aae:	9900      	ldr	r1, [sp, #0]
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	0f49      	lsrs	r1, r1, #29
 8001ab4:	4319      	orrs	r1, r3
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	468b      	mov	fp, r1
 8001aba:	00da      	lsls	r2, r3, #3
 8001abc:	4692      	mov	sl, r2
 8001abe:	0d6d      	lsrs	r5, r5, #21
 8001ac0:	45b9      	cmp	r9, r7
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dsub+0x52>
 8001ac4:	e0bf      	b.n	8001c46 <__aeabi_dsub+0x1d2>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	4661      	mov	r1, ip
 8001aca:	4059      	eors	r1, r3
 8001acc:	464b      	mov	r3, r9
 8001ace:	468c      	mov	ip, r1
 8001ad0:	1aeb      	subs	r3, r5, r3
 8001ad2:	428e      	cmp	r6, r1
 8001ad4:	d075      	beq.n	8001bc2 <__aeabi_dsub+0x14e>
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dsub+0x68>
 8001ada:	e2a3      	b.n	8002024 <__aeabi_dsub+0x5b0>
 8001adc:	4649      	mov	r1, r9
 8001ade:	2900      	cmp	r1, #0
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dsub+0x70>
 8001ae2:	e0ce      	b.n	8001c82 <__aeabi_dsub+0x20e>
 8001ae4:	42bd      	cmp	r5, r7
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0x76>
 8001ae8:	e200      	b.n	8001eec <__aeabi_dsub+0x478>
 8001aea:	2701      	movs	r7, #1
 8001aec:	2b38      	cmp	r3, #56	@ 0x38
 8001aee:	dc19      	bgt.n	8001b24 <__aeabi_dsub+0xb0>
 8001af0:	2780      	movs	r7, #128	@ 0x80
 8001af2:	4659      	mov	r1, fp
 8001af4:	043f      	lsls	r7, r7, #16
 8001af6:	4339      	orrs	r1, r7
 8001af8:	468b      	mov	fp, r1
 8001afa:	2b1f      	cmp	r3, #31
 8001afc:	dd00      	ble.n	8001b00 <__aeabi_dsub+0x8c>
 8001afe:	e1fa      	b.n	8001ef6 <__aeabi_dsub+0x482>
 8001b00:	2720      	movs	r7, #32
 8001b02:	1af9      	subs	r1, r7, r3
 8001b04:	468c      	mov	ip, r1
 8001b06:	4659      	mov	r1, fp
 8001b08:	4667      	mov	r7, ip
 8001b0a:	40b9      	lsls	r1, r7
 8001b0c:	000f      	movs	r7, r1
 8001b0e:	0011      	movs	r1, r2
 8001b10:	40d9      	lsrs	r1, r3
 8001b12:	430f      	orrs	r7, r1
 8001b14:	4661      	mov	r1, ip
 8001b16:	408a      	lsls	r2, r1
 8001b18:	1e51      	subs	r1, r2, #1
 8001b1a:	418a      	sbcs	r2, r1
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	40d9      	lsrs	r1, r3
 8001b20:	4317      	orrs	r7, r2
 8001b22:	1a64      	subs	r4, r4, r1
 8001b24:	1bc7      	subs	r7, r0, r7
 8001b26:	42b8      	cmp	r0, r7
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	4240      	negs	r0, r0
 8001b2c:	1a24      	subs	r4, r4, r0
 8001b2e:	0223      	lsls	r3, r4, #8
 8001b30:	d400      	bmi.n	8001b34 <__aeabi_dsub+0xc0>
 8001b32:	e140      	b.n	8001db6 <__aeabi_dsub+0x342>
 8001b34:	0264      	lsls	r4, r4, #9
 8001b36:	0a64      	lsrs	r4, r4, #9
 8001b38:	2c00      	cmp	r4, #0
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0xca>
 8001b3c:	e154      	b.n	8001de8 <__aeabi_dsub+0x374>
 8001b3e:	0020      	movs	r0, r4
 8001b40:	f000 fc52 	bl	80023e8 <__clzsi2>
 8001b44:	0003      	movs	r3, r0
 8001b46:	3b08      	subs	r3, #8
 8001b48:	2120      	movs	r1, #32
 8001b4a:	0038      	movs	r0, r7
 8001b4c:	1aca      	subs	r2, r1, r3
 8001b4e:	40d0      	lsrs	r0, r2
 8001b50:	409c      	lsls	r4, r3
 8001b52:	0002      	movs	r2, r0
 8001b54:	409f      	lsls	r7, r3
 8001b56:	4322      	orrs	r2, r4
 8001b58:	429d      	cmp	r5, r3
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dsub+0xea>
 8001b5c:	e1a6      	b.n	8001eac <__aeabi_dsub+0x438>
 8001b5e:	1b58      	subs	r0, r3, r5
 8001b60:	3001      	adds	r0, #1
 8001b62:	1a09      	subs	r1, r1, r0
 8001b64:	003c      	movs	r4, r7
 8001b66:	408f      	lsls	r7, r1
 8001b68:	40c4      	lsrs	r4, r0
 8001b6a:	1e7b      	subs	r3, r7, #1
 8001b6c:	419f      	sbcs	r7, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	408b      	lsls	r3, r1
 8001b72:	4327      	orrs	r7, r4
 8001b74:	431f      	orrs	r7, r3
 8001b76:	40c2      	lsrs	r2, r0
 8001b78:	003b      	movs	r3, r7
 8001b7a:	0014      	movs	r4, r2
 8001b7c:	2500      	movs	r5, #0
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dsub+0x110>
 8001b82:	e1f7      	b.n	8001f74 <__aeabi_dsub+0x500>
 8001b84:	077b      	lsls	r3, r7, #29
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x116>
 8001b88:	e377      	b.n	800227a <__aeabi_dsub+0x806>
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	0038      	movs	r0, r7
 8001b8e:	403b      	ands	r3, r7
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d004      	beq.n	8001b9e <__aeabi_dsub+0x12a>
 8001b94:	1d38      	adds	r0, r7, #4
 8001b96:	42b8      	cmp	r0, r7
 8001b98:	41bf      	sbcs	r7, r7
 8001b9a:	427f      	negs	r7, r7
 8001b9c:	19e4      	adds	r4, r4, r7
 8001b9e:	0223      	lsls	r3, r4, #8
 8001ba0:	d400      	bmi.n	8001ba4 <__aeabi_dsub+0x130>
 8001ba2:	e368      	b.n	8002276 <__aeabi_dsub+0x802>
 8001ba4:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001ba6:	3501      	adds	r5, #1
 8001ba8:	429d      	cmp	r5, r3
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x13a>
 8001bac:	e0f4      	b.n	8001d98 <__aeabi_dsub+0x324>
 8001bae:	4b8b      	ldr	r3, [pc, #556]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001bb0:	056d      	lsls	r5, r5, #21
 8001bb2:	401c      	ands	r4, r3
 8001bb4:	0d6d      	lsrs	r5, r5, #21
 8001bb6:	0767      	lsls	r7, r4, #29
 8001bb8:	08c0      	lsrs	r0, r0, #3
 8001bba:	0264      	lsls	r4, r4, #9
 8001bbc:	4307      	orrs	r7, r0
 8001bbe:	0b24      	lsrs	r4, r4, #12
 8001bc0:	e0ec      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_dsub+0x154>
 8001bc6:	e329      	b.n	800221c <__aeabi_dsub+0x7a8>
 8001bc8:	4649      	mov	r1, r9
 8001bca:	2900      	cmp	r1, #0
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x15c>
 8001bce:	e0d6      	b.n	8001d7e <__aeabi_dsub+0x30a>
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x164>
 8001bd6:	e12e      	b.n	8001e36 <__aeabi_dsub+0x3c2>
 8001bd8:	1e59      	subs	r1, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x16c>
 8001bde:	e1e6      	b.n	8001fae <__aeabi_dsub+0x53a>
 8001be0:	42bb      	cmp	r3, r7
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x172>
 8001be4:	e182      	b.n	8001eec <__aeabi_dsub+0x478>
 8001be6:	2701      	movs	r7, #1
 8001be8:	000b      	movs	r3, r1
 8001bea:	2938      	cmp	r1, #56	@ 0x38
 8001bec:	dc14      	bgt.n	8001c18 <__aeabi_dsub+0x1a4>
 8001bee:	2b1f      	cmp	r3, #31
 8001bf0:	dd00      	ble.n	8001bf4 <__aeabi_dsub+0x180>
 8001bf2:	e23c      	b.n	800206e <__aeabi_dsub+0x5fa>
 8001bf4:	2720      	movs	r7, #32
 8001bf6:	1af9      	subs	r1, r7, r3
 8001bf8:	468c      	mov	ip, r1
 8001bfa:	4659      	mov	r1, fp
 8001bfc:	4667      	mov	r7, ip
 8001bfe:	40b9      	lsls	r1, r7
 8001c00:	000f      	movs	r7, r1
 8001c02:	0011      	movs	r1, r2
 8001c04:	40d9      	lsrs	r1, r3
 8001c06:	430f      	orrs	r7, r1
 8001c08:	4661      	mov	r1, ip
 8001c0a:	408a      	lsls	r2, r1
 8001c0c:	1e51      	subs	r1, r2, #1
 8001c0e:	418a      	sbcs	r2, r1
 8001c10:	4659      	mov	r1, fp
 8001c12:	40d9      	lsrs	r1, r3
 8001c14:	4317      	orrs	r7, r2
 8001c16:	1864      	adds	r4, r4, r1
 8001c18:	183f      	adds	r7, r7, r0
 8001c1a:	4287      	cmp	r7, r0
 8001c1c:	4180      	sbcs	r0, r0
 8001c1e:	4240      	negs	r0, r0
 8001c20:	1824      	adds	r4, r4, r0
 8001c22:	0223      	lsls	r3, r4, #8
 8001c24:	d400      	bmi.n	8001c28 <__aeabi_dsub+0x1b4>
 8001c26:	e0c6      	b.n	8001db6 <__aeabi_dsub+0x342>
 8001c28:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001c2a:	3501      	adds	r5, #1
 8001c2c:	429d      	cmp	r5, r3
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x1be>
 8001c30:	e0b2      	b.n	8001d98 <__aeabi_dsub+0x324>
 8001c32:	2101      	movs	r1, #1
 8001c34:	4b69      	ldr	r3, [pc, #420]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001c36:	087a      	lsrs	r2, r7, #1
 8001c38:	401c      	ands	r4, r3
 8001c3a:	4039      	ands	r1, r7
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	07e7      	lsls	r7, r4, #31
 8001c40:	4317      	orrs	r7, r2
 8001c42:	0864      	lsrs	r4, r4, #1
 8001c44:	e79e      	b.n	8001b84 <__aeabi_dsub+0x110>
 8001c46:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <__aeabi_dsub+0x36c>)
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	468a      	mov	sl, r1
 8001c4c:	18eb      	adds	r3, r5, r3
 8001c4e:	2900      	cmp	r1, #0
 8001c50:	d028      	beq.n	8001ca4 <__aeabi_dsub+0x230>
 8001c52:	4566      	cmp	r6, ip
 8001c54:	d02c      	beq.n	8001cb0 <__aeabi_dsub+0x23c>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d05b      	beq.n	8001d12 <__aeabi_dsub+0x29e>
 8001c5a:	2d00      	cmp	r5, #0
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x1ec>
 8001c5e:	e12c      	b.n	8001eba <__aeabi_dsub+0x446>
 8001c60:	465b      	mov	r3, fp
 8001c62:	4666      	mov	r6, ip
 8001c64:	075f      	lsls	r7, r3, #29
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	4317      	orrs	r7, r2
 8001c6a:	08dd      	lsrs	r5, r3, #3
 8001c6c:	003b      	movs	r3, r7
 8001c6e:	432b      	orrs	r3, r5
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x200>
 8001c72:	e0e2      	b.n	8001e3a <__aeabi_dsub+0x3c6>
 8001c74:	2480      	movs	r4, #128	@ 0x80
 8001c76:	0324      	lsls	r4, r4, #12
 8001c78:	432c      	orrs	r4, r5
 8001c7a:	0324      	lsls	r4, r4, #12
 8001c7c:	4d56      	ldr	r5, [pc, #344]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001c7e:	0b24      	lsrs	r4, r4, #12
 8001c80:	e08c      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001c82:	4659      	mov	r1, fp
 8001c84:	4311      	orrs	r1, r2
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x216>
 8001c88:	e0d5      	b.n	8001e36 <__aeabi_dsub+0x3c2>
 8001c8a:	1e59      	subs	r1, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x21e>
 8001c90:	e1b9      	b.n	8002006 <__aeabi_dsub+0x592>
 8001c92:	42bb      	cmp	r3, r7
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x224>
 8001c96:	e1b1      	b.n	8001ffc <__aeabi_dsub+0x588>
 8001c98:	2701      	movs	r7, #1
 8001c9a:	000b      	movs	r3, r1
 8001c9c:	2938      	cmp	r1, #56	@ 0x38
 8001c9e:	dd00      	ble.n	8001ca2 <__aeabi_dsub+0x22e>
 8001ca0:	e740      	b.n	8001b24 <__aeabi_dsub+0xb0>
 8001ca2:	e72a      	b.n	8001afa <__aeabi_dsub+0x86>
 8001ca4:	4661      	mov	r1, ip
 8001ca6:	2701      	movs	r7, #1
 8001ca8:	4079      	eors	r1, r7
 8001caa:	468c      	mov	ip, r1
 8001cac:	4566      	cmp	r6, ip
 8001cae:	d1d2      	bne.n	8001c56 <__aeabi_dsub+0x1e2>
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x242>
 8001cb4:	e0c5      	b.n	8001e42 <__aeabi_dsub+0x3ce>
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_dsub+0x248>
 8001cba:	e155      	b.n	8001f68 <__aeabi_dsub+0x4f4>
 8001cbc:	464b      	mov	r3, r9
 8001cbe:	0025      	movs	r5, r4
 8001cc0:	4305      	orrs	r5, r0
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x252>
 8001cc4:	e212      	b.n	80020ec <__aeabi_dsub+0x678>
 8001cc6:	1e59      	subs	r1, r3, #1
 8001cc8:	468c      	mov	ip, r1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x25c>
 8001cce:	e249      	b.n	8002164 <__aeabi_dsub+0x6f0>
 8001cd0:	4d41      	ldr	r5, [pc, #260]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001cd2:	42ab      	cmp	r3, r5
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x264>
 8001cd6:	e28f      	b.n	80021f8 <__aeabi_dsub+0x784>
 8001cd8:	2701      	movs	r7, #1
 8001cda:	2938      	cmp	r1, #56	@ 0x38
 8001cdc:	dc11      	bgt.n	8001d02 <__aeabi_dsub+0x28e>
 8001cde:	4663      	mov	r3, ip
 8001ce0:	2b1f      	cmp	r3, #31
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dsub+0x272>
 8001ce4:	e25b      	b.n	800219e <__aeabi_dsub+0x72a>
 8001ce6:	4661      	mov	r1, ip
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0027      	movs	r7, r4
 8001cec:	1a5b      	subs	r3, r3, r1
 8001cee:	0005      	movs	r5, r0
 8001cf0:	4098      	lsls	r0, r3
 8001cf2:	409f      	lsls	r7, r3
 8001cf4:	40cd      	lsrs	r5, r1
 8001cf6:	1e43      	subs	r3, r0, #1
 8001cf8:	4198      	sbcs	r0, r3
 8001cfa:	40cc      	lsrs	r4, r1
 8001cfc:	432f      	orrs	r7, r5
 8001cfe:	4307      	orrs	r7, r0
 8001d00:	44a3      	add	fp, r4
 8001d02:	18bf      	adds	r7, r7, r2
 8001d04:	4297      	cmp	r7, r2
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	445a      	add	r2, fp
 8001d0c:	0014      	movs	r4, r2
 8001d0e:	464d      	mov	r5, r9
 8001d10:	e787      	b.n	8001c22 <__aeabi_dsub+0x1ae>
 8001d12:	4f34      	ldr	r7, [pc, #208]	@ (8001de4 <__aeabi_dsub+0x370>)
 8001d14:	1c6b      	adds	r3, r5, #1
 8001d16:	423b      	tst	r3, r7
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x2a8>
 8001d1a:	e0b6      	b.n	8001e8a <__aeabi_dsub+0x416>
 8001d1c:	4659      	mov	r1, fp
 8001d1e:	0023      	movs	r3, r4
 8001d20:	4311      	orrs	r1, r2
 8001d22:	000f      	movs	r7, r1
 8001d24:	4303      	orrs	r3, r0
 8001d26:	2d00      	cmp	r5, #0
 8001d28:	d000      	beq.n	8001d2c <__aeabi_dsub+0x2b8>
 8001d2a:	e126      	b.n	8001f7a <__aeabi_dsub+0x506>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x2be>
 8001d30:	e1c0      	b.n	80020b4 <__aeabi_dsub+0x640>
 8001d32:	2900      	cmp	r1, #0
 8001d34:	d100      	bne.n	8001d38 <__aeabi_dsub+0x2c4>
 8001d36:	e0a1      	b.n	8001e7c <__aeabi_dsub+0x408>
 8001d38:	1a83      	subs	r3, r0, r2
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	465b      	mov	r3, fp
 8001d3e:	4540      	cmp	r0, r8
 8001d40:	41ad      	sbcs	r5, r5
 8001d42:	1ae3      	subs	r3, r4, r3
 8001d44:	426d      	negs	r5, r5
 8001d46:	1b5b      	subs	r3, r3, r5
 8001d48:	2580      	movs	r5, #128	@ 0x80
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	422b      	tst	r3, r5
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x2de>
 8001d50:	e14b      	b.n	8001fea <__aeabi_dsub+0x576>
 8001d52:	465b      	mov	r3, fp
 8001d54:	1a10      	subs	r0, r2, r0
 8001d56:	4282      	cmp	r2, r0
 8001d58:	4192      	sbcs	r2, r2
 8001d5a:	1b1c      	subs	r4, r3, r4
 8001d5c:	0007      	movs	r7, r0
 8001d5e:	2601      	movs	r6, #1
 8001d60:	4663      	mov	r3, ip
 8001d62:	4252      	negs	r2, r2
 8001d64:	1aa4      	subs	r4, r4, r2
 8001d66:	4327      	orrs	r7, r4
 8001d68:	401e      	ands	r6, r3
 8001d6a:	2f00      	cmp	r7, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x2fc>
 8001d6e:	e142      	b.n	8001ff6 <__aeabi_dsub+0x582>
 8001d70:	422c      	tst	r4, r5
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x302>
 8001d74:	e26d      	b.n	8002252 <__aeabi_dsub+0x7de>
 8001d76:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001d78:	2501      	movs	r5, #1
 8001d7a:	401c      	ands	r4, r3
 8001d7c:	e71b      	b.n	8001bb6 <__aeabi_dsub+0x142>
 8001d7e:	42bd      	cmp	r5, r7
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x310>
 8001d82:	e13b      	b.n	8001ffc <__aeabi_dsub+0x588>
 8001d84:	2701      	movs	r7, #1
 8001d86:	2b38      	cmp	r3, #56	@ 0x38
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dsub+0x318>
 8001d8a:	e745      	b.n	8001c18 <__aeabi_dsub+0x1a4>
 8001d8c:	2780      	movs	r7, #128	@ 0x80
 8001d8e:	4659      	mov	r1, fp
 8001d90:	043f      	lsls	r7, r7, #16
 8001d92:	4339      	orrs	r1, r7
 8001d94:	468b      	mov	fp, r1
 8001d96:	e72a      	b.n	8001bee <__aeabi_dsub+0x17a>
 8001d98:	2400      	movs	r4, #0
 8001d9a:	2700      	movs	r7, #0
 8001d9c:	052d      	lsls	r5, r5, #20
 8001d9e:	4325      	orrs	r5, r4
 8001da0:	07f6      	lsls	r6, r6, #31
 8001da2:	4335      	orrs	r5, r6
 8001da4:	0038      	movs	r0, r7
 8001da6:	0029      	movs	r1, r5
 8001da8:	b003      	add	sp, #12
 8001daa:	bcf0      	pop	{r4, r5, r6, r7}
 8001dac:	46bb      	mov	fp, r7
 8001dae:	46b2      	mov	sl, r6
 8001db0:	46a9      	mov	r9, r5
 8001db2:	46a0      	mov	r8, r4
 8001db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db6:	077b      	lsls	r3, r7, #29
 8001db8:	d004      	beq.n	8001dc4 <__aeabi_dsub+0x350>
 8001dba:	230f      	movs	r3, #15
 8001dbc:	403b      	ands	r3, r7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d000      	beq.n	8001dc4 <__aeabi_dsub+0x350>
 8001dc2:	e6e7      	b.n	8001b94 <__aeabi_dsub+0x120>
 8001dc4:	002b      	movs	r3, r5
 8001dc6:	08f8      	lsrs	r0, r7, #3
 8001dc8:	4a03      	ldr	r2, [pc, #12]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001dca:	0767      	lsls	r7, r4, #29
 8001dcc:	4307      	orrs	r7, r0
 8001dce:	08e5      	lsrs	r5, r4, #3
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x362>
 8001dd4:	e74a      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001dd6:	e0a5      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001dd8:	000007ff 	.word	0x000007ff
 8001ddc:	ff7fffff 	.word	0xff7fffff
 8001de0:	fffff801 	.word	0xfffff801
 8001de4:	000007fe 	.word	0x000007fe
 8001de8:	0038      	movs	r0, r7
 8001dea:	f000 fafd 	bl	80023e8 <__clzsi2>
 8001dee:	0003      	movs	r3, r0
 8001df0:	3318      	adds	r3, #24
 8001df2:	2b1f      	cmp	r3, #31
 8001df4:	dc00      	bgt.n	8001df8 <__aeabi_dsub+0x384>
 8001df6:	e6a7      	b.n	8001b48 <__aeabi_dsub+0xd4>
 8001df8:	003a      	movs	r2, r7
 8001dfa:	3808      	subs	r0, #8
 8001dfc:	4082      	lsls	r2, r0
 8001dfe:	429d      	cmp	r5, r3
 8001e00:	dd00      	ble.n	8001e04 <__aeabi_dsub+0x390>
 8001e02:	e08a      	b.n	8001f1a <__aeabi_dsub+0x4a6>
 8001e04:	1b5b      	subs	r3, r3, r5
 8001e06:	1c58      	adds	r0, r3, #1
 8001e08:	281f      	cmp	r0, #31
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_dsub+0x39a>
 8001e0c:	e1d8      	b.n	80021c0 <__aeabi_dsub+0x74c>
 8001e0e:	0017      	movs	r7, r2
 8001e10:	3b1f      	subs	r3, #31
 8001e12:	40df      	lsrs	r7, r3
 8001e14:	2820      	cmp	r0, #32
 8001e16:	d005      	beq.n	8001e24 <__aeabi_dsub+0x3b0>
 8001e18:	2340      	movs	r3, #64	@ 0x40
 8001e1a:	1a1b      	subs	r3, r3, r0
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	1e53      	subs	r3, r2, #1
 8001e20:	419a      	sbcs	r2, r3
 8001e22:	4317      	orrs	r7, r2
 8001e24:	2500      	movs	r5, #0
 8001e26:	2f00      	cmp	r7, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x3b8>
 8001e2a:	e0e5      	b.n	8001ff8 <__aeabi_dsub+0x584>
 8001e2c:	077b      	lsls	r3, r7, #29
 8001e2e:	d000      	beq.n	8001e32 <__aeabi_dsub+0x3be>
 8001e30:	e6ab      	b.n	8001b8a <__aeabi_dsub+0x116>
 8001e32:	002c      	movs	r4, r5
 8001e34:	e7c6      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001e36:	08c0      	lsrs	r0, r0, #3
 8001e38:	e7c6      	b.n	8001dc8 <__aeabi_dsub+0x354>
 8001e3a:	2700      	movs	r7, #0
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	4dd1      	ldr	r5, [pc, #836]	@ (8002184 <__aeabi_dsub+0x710>)
 8001e40:	e7ac      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001e42:	4fd1      	ldr	r7, [pc, #836]	@ (8002188 <__aeabi_dsub+0x714>)
 8001e44:	1c6b      	adds	r3, r5, #1
 8001e46:	423b      	tst	r3, r7
 8001e48:	d171      	bne.n	8001f2e <__aeabi_dsub+0x4ba>
 8001e4a:	0023      	movs	r3, r4
 8001e4c:	4303      	orrs	r3, r0
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	d000      	beq.n	8001e54 <__aeabi_dsub+0x3e0>
 8001e52:	e14e      	b.n	80020f2 <__aeabi_dsub+0x67e>
 8001e54:	4657      	mov	r7, sl
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x3e8>
 8001e5a:	e1b5      	b.n	80021c8 <__aeabi_dsub+0x754>
 8001e5c:	2f00      	cmp	r7, #0
 8001e5e:	d00d      	beq.n	8001e7c <__aeabi_dsub+0x408>
 8001e60:	1883      	adds	r3, r0, r2
 8001e62:	4283      	cmp	r3, r0
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	445c      	add	r4, fp
 8001e68:	4240      	negs	r0, r0
 8001e6a:	1824      	adds	r4, r4, r0
 8001e6c:	0222      	lsls	r2, r4, #8
 8001e6e:	d500      	bpl.n	8001e72 <__aeabi_dsub+0x3fe>
 8001e70:	e1c8      	b.n	8002204 <__aeabi_dsub+0x790>
 8001e72:	001f      	movs	r7, r3
 8001e74:	4698      	mov	r8, r3
 8001e76:	4327      	orrs	r7, r4
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x408>
 8001e7a:	e0bc      	b.n	8001ff6 <__aeabi_dsub+0x582>
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	0767      	lsls	r7, r4, #29
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	431f      	orrs	r7, r3
 8001e84:	08e5      	lsrs	r5, r4, #3
 8001e86:	2300      	movs	r3, #0
 8001e88:	e04c      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001e8a:	1a83      	subs	r3, r0, r2
 8001e8c:	4698      	mov	r8, r3
 8001e8e:	465b      	mov	r3, fp
 8001e90:	4540      	cmp	r0, r8
 8001e92:	41bf      	sbcs	r7, r7
 8001e94:	1ae3      	subs	r3, r4, r3
 8001e96:	427f      	negs	r7, r7
 8001e98:	1bdb      	subs	r3, r3, r7
 8001e9a:	021f      	lsls	r7, r3, #8
 8001e9c:	d47c      	bmi.n	8001f98 <__aeabi_dsub+0x524>
 8001e9e:	4647      	mov	r7, r8
 8001ea0:	431f      	orrs	r7, r3
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x432>
 8001ea4:	e0a6      	b.n	8001ff4 <__aeabi_dsub+0x580>
 8001ea6:	001c      	movs	r4, r3
 8001ea8:	4647      	mov	r7, r8
 8001eaa:	e645      	b.n	8001b38 <__aeabi_dsub+0xc4>
 8001eac:	4cb7      	ldr	r4, [pc, #732]	@ (800218c <__aeabi_dsub+0x718>)
 8001eae:	1aed      	subs	r5, r5, r3
 8001eb0:	4014      	ands	r4, r2
 8001eb2:	077b      	lsls	r3, r7, #29
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dsub+0x444>
 8001eb6:	e780      	b.n	8001dba <__aeabi_dsub+0x346>
 8001eb8:	e784      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001eba:	464b      	mov	r3, r9
 8001ebc:	0025      	movs	r5, r4
 8001ebe:	4305      	orrs	r5, r0
 8001ec0:	d066      	beq.n	8001f90 <__aeabi_dsub+0x51c>
 8001ec2:	1e5f      	subs	r7, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dsub+0x456>
 8001ec8:	e0fc      	b.n	80020c4 <__aeabi_dsub+0x650>
 8001eca:	4dae      	ldr	r5, [pc, #696]	@ (8002184 <__aeabi_dsub+0x710>)
 8001ecc:	42ab      	cmp	r3, r5
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dsub+0x45e>
 8001ed0:	e15e      	b.n	8002190 <__aeabi_dsub+0x71c>
 8001ed2:	4666      	mov	r6, ip
 8001ed4:	2f38      	cmp	r7, #56	@ 0x38
 8001ed6:	dc00      	bgt.n	8001eda <__aeabi_dsub+0x466>
 8001ed8:	e0b4      	b.n	8002044 <__aeabi_dsub+0x5d0>
 8001eda:	2001      	movs	r0, #1
 8001edc:	1a17      	subs	r7, r2, r0
 8001ede:	42ba      	cmp	r2, r7
 8001ee0:	4192      	sbcs	r2, r2
 8001ee2:	465b      	mov	r3, fp
 8001ee4:	4252      	negs	r2, r2
 8001ee6:	464d      	mov	r5, r9
 8001ee8:	1a9c      	subs	r4, r3, r2
 8001eea:	e620      	b.n	8001b2e <__aeabi_dsub+0xba>
 8001eec:	0767      	lsls	r7, r4, #29
 8001eee:	08c0      	lsrs	r0, r0, #3
 8001ef0:	4307      	orrs	r7, r0
 8001ef2:	08e5      	lsrs	r5, r4, #3
 8001ef4:	e6ba      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001ef6:	001f      	movs	r7, r3
 8001ef8:	4659      	mov	r1, fp
 8001efa:	3f20      	subs	r7, #32
 8001efc:	40f9      	lsrs	r1, r7
 8001efe:	000f      	movs	r7, r1
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d005      	beq.n	8001f10 <__aeabi_dsub+0x49c>
 8001f04:	2140      	movs	r1, #64	@ 0x40
 8001f06:	1acb      	subs	r3, r1, r3
 8001f08:	4659      	mov	r1, fp
 8001f0a:	4099      	lsls	r1, r3
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	4692      	mov	sl, r2
 8001f10:	4653      	mov	r3, sl
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	4193      	sbcs	r3, r2
 8001f16:	431f      	orrs	r7, r3
 8001f18:	e604      	b.n	8001b24 <__aeabi_dsub+0xb0>
 8001f1a:	1aeb      	subs	r3, r5, r3
 8001f1c:	4d9b      	ldr	r5, [pc, #620]	@ (800218c <__aeabi_dsub+0x718>)
 8001f1e:	4015      	ands	r5, r2
 8001f20:	076f      	lsls	r7, r5, #29
 8001f22:	08ed      	lsrs	r5, r5, #3
 8001f24:	032c      	lsls	r4, r5, #12
 8001f26:	055d      	lsls	r5, r3, #21
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	0d6d      	lsrs	r5, r5, #21
 8001f2c:	e736      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f2e:	4d95      	ldr	r5, [pc, #596]	@ (8002184 <__aeabi_dsub+0x710>)
 8001f30:	42ab      	cmp	r3, r5
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dsub+0x4c2>
 8001f34:	e0d6      	b.n	80020e4 <__aeabi_dsub+0x670>
 8001f36:	1882      	adds	r2, r0, r2
 8001f38:	0021      	movs	r1, r4
 8001f3a:	4282      	cmp	r2, r0
 8001f3c:	4180      	sbcs	r0, r0
 8001f3e:	4459      	add	r1, fp
 8001f40:	4240      	negs	r0, r0
 8001f42:	1808      	adds	r0, r1, r0
 8001f44:	07c7      	lsls	r7, r0, #31
 8001f46:	0852      	lsrs	r2, r2, #1
 8001f48:	4317      	orrs	r7, r2
 8001f4a:	0844      	lsrs	r4, r0, #1
 8001f4c:	0752      	lsls	r2, r2, #29
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x4de>
 8001f50:	e185      	b.n	800225e <__aeabi_dsub+0x7ea>
 8001f52:	220f      	movs	r2, #15
 8001f54:	001d      	movs	r5, r3
 8001f56:	403a      	ands	r2, r7
 8001f58:	2a04      	cmp	r2, #4
 8001f5a:	d000      	beq.n	8001f5e <__aeabi_dsub+0x4ea>
 8001f5c:	e61a      	b.n	8001b94 <__aeabi_dsub+0x120>
 8001f5e:	08ff      	lsrs	r7, r7, #3
 8001f60:	0764      	lsls	r4, r4, #29
 8001f62:	4327      	orrs	r7, r4
 8001f64:	0905      	lsrs	r5, r0, #4
 8001f66:	e7dd      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001f68:	465b      	mov	r3, fp
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	075f      	lsls	r7, r3, #29
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08dd      	lsrs	r5, r3, #3
 8001f72:	e67b      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001f74:	2700      	movs	r7, #0
 8001f76:	2400      	movs	r4, #0
 8001f78:	e710      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d000      	beq.n	8001f80 <__aeabi_dsub+0x50c>
 8001f7e:	e0d6      	b.n	800212e <__aeabi_dsub+0x6ba>
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d000      	beq.n	8001f86 <__aeabi_dsub+0x512>
 8001f84:	e12f      	b.n	80021e6 <__aeabi_dsub+0x772>
 8001f86:	2480      	movs	r4, #128	@ 0x80
 8001f88:	2600      	movs	r6, #0
 8001f8a:	4d7e      	ldr	r5, [pc, #504]	@ (8002184 <__aeabi_dsub+0x710>)
 8001f8c:	0324      	lsls	r4, r4, #12
 8001f8e:	e705      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f90:	4666      	mov	r6, ip
 8001f92:	465c      	mov	r4, fp
 8001f94:	08d0      	lsrs	r0, r2, #3
 8001f96:	e717      	b.n	8001dc8 <__aeabi_dsub+0x354>
 8001f98:	465b      	mov	r3, fp
 8001f9a:	1a17      	subs	r7, r2, r0
 8001f9c:	42ba      	cmp	r2, r7
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	1b1c      	subs	r4, r3, r4
 8001fa2:	2601      	movs	r6, #1
 8001fa4:	4663      	mov	r3, ip
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	1aa4      	subs	r4, r4, r2
 8001faa:	401e      	ands	r6, r3
 8001fac:	e5c4      	b.n	8001b38 <__aeabi_dsub+0xc4>
 8001fae:	1883      	adds	r3, r0, r2
 8001fb0:	4283      	cmp	r3, r0
 8001fb2:	4180      	sbcs	r0, r0
 8001fb4:	445c      	add	r4, fp
 8001fb6:	4240      	negs	r0, r0
 8001fb8:	1825      	adds	r5, r4, r0
 8001fba:	022a      	lsls	r2, r5, #8
 8001fbc:	d400      	bmi.n	8001fc0 <__aeabi_dsub+0x54c>
 8001fbe:	e0da      	b.n	8002176 <__aeabi_dsub+0x702>
 8001fc0:	4a72      	ldr	r2, [pc, #456]	@ (800218c <__aeabi_dsub+0x718>)
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	4015      	ands	r5, r2
 8001fc6:	07ea      	lsls	r2, r5, #31
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	0869      	lsrs	r1, r5, #1
 8001fcc:	075b      	lsls	r3, r3, #29
 8001fce:	d400      	bmi.n	8001fd2 <__aeabi_dsub+0x55e>
 8001fd0:	e14a      	b.n	8002268 <__aeabi_dsub+0x7f4>
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x568>
 8001fda:	e0fc      	b.n	80021d6 <__aeabi_dsub+0x762>
 8001fdc:	1d17      	adds	r7, r2, #4
 8001fde:	4297      	cmp	r7, r2
 8001fe0:	41a4      	sbcs	r4, r4
 8001fe2:	4264      	negs	r4, r4
 8001fe4:	2502      	movs	r5, #2
 8001fe6:	1864      	adds	r4, r4, r1
 8001fe8:	e6ec      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001fea:	4647      	mov	r7, r8
 8001fec:	001c      	movs	r4, r3
 8001fee:	431f      	orrs	r7, r3
 8001ff0:	d000      	beq.n	8001ff4 <__aeabi_dsub+0x580>
 8001ff2:	e743      	b.n	8001e7c <__aeabi_dsub+0x408>
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	2400      	movs	r4, #0
 8001ffa:	e6cf      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001ffc:	08c0      	lsrs	r0, r0, #3
 8001ffe:	0767      	lsls	r7, r4, #29
 8002000:	4307      	orrs	r7, r0
 8002002:	08e5      	lsrs	r5, r4, #3
 8002004:	e632      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002006:	1a87      	subs	r7, r0, r2
 8002008:	465b      	mov	r3, fp
 800200a:	42b8      	cmp	r0, r7
 800200c:	4180      	sbcs	r0, r0
 800200e:	1ae4      	subs	r4, r4, r3
 8002010:	4240      	negs	r0, r0
 8002012:	1a24      	subs	r4, r4, r0
 8002014:	0223      	lsls	r3, r4, #8
 8002016:	d428      	bmi.n	800206a <__aeabi_dsub+0x5f6>
 8002018:	0763      	lsls	r3, r4, #29
 800201a:	08ff      	lsrs	r7, r7, #3
 800201c:	431f      	orrs	r7, r3
 800201e:	08e5      	lsrs	r5, r4, #3
 8002020:	2301      	movs	r3, #1
 8002022:	e77f      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d100      	bne.n	800202a <__aeabi_dsub+0x5b6>
 8002028:	e673      	b.n	8001d12 <__aeabi_dsub+0x29e>
 800202a:	464b      	mov	r3, r9
 800202c:	1b5f      	subs	r7, r3, r5
 800202e:	003b      	movs	r3, r7
 8002030:	2d00      	cmp	r5, #0
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x5c2>
 8002034:	e742      	b.n	8001ebc <__aeabi_dsub+0x448>
 8002036:	2f38      	cmp	r7, #56	@ 0x38
 8002038:	dd00      	ble.n	800203c <__aeabi_dsub+0x5c8>
 800203a:	e0ec      	b.n	8002216 <__aeabi_dsub+0x7a2>
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	000e      	movs	r6, r1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431c      	orrs	r4, r3
 8002044:	2f1f      	cmp	r7, #31
 8002046:	dc25      	bgt.n	8002094 <__aeabi_dsub+0x620>
 8002048:	2520      	movs	r5, #32
 800204a:	0023      	movs	r3, r4
 800204c:	1bed      	subs	r5, r5, r7
 800204e:	0001      	movs	r1, r0
 8002050:	40a8      	lsls	r0, r5
 8002052:	40ab      	lsls	r3, r5
 8002054:	40f9      	lsrs	r1, r7
 8002056:	1e45      	subs	r5, r0, #1
 8002058:	41a8      	sbcs	r0, r5
 800205a:	430b      	orrs	r3, r1
 800205c:	40fc      	lsrs	r4, r7
 800205e:	4318      	orrs	r0, r3
 8002060:	465b      	mov	r3, fp
 8002062:	1b1b      	subs	r3, r3, r4
 8002064:	469b      	mov	fp, r3
 8002066:	e739      	b.n	8001edc <__aeabi_dsub+0x468>
 8002068:	4666      	mov	r6, ip
 800206a:	2501      	movs	r5, #1
 800206c:	e562      	b.n	8001b34 <__aeabi_dsub+0xc0>
 800206e:	001f      	movs	r7, r3
 8002070:	4659      	mov	r1, fp
 8002072:	3f20      	subs	r7, #32
 8002074:	40f9      	lsrs	r1, r7
 8002076:	468c      	mov	ip, r1
 8002078:	2b20      	cmp	r3, #32
 800207a:	d005      	beq.n	8002088 <__aeabi_dsub+0x614>
 800207c:	2740      	movs	r7, #64	@ 0x40
 800207e:	4659      	mov	r1, fp
 8002080:	1afb      	subs	r3, r7, r3
 8002082:	4099      	lsls	r1, r3
 8002084:	430a      	orrs	r2, r1
 8002086:	4692      	mov	sl, r2
 8002088:	4657      	mov	r7, sl
 800208a:	1e7b      	subs	r3, r7, #1
 800208c:	419f      	sbcs	r7, r3
 800208e:	4663      	mov	r3, ip
 8002090:	431f      	orrs	r7, r3
 8002092:	e5c1      	b.n	8001c18 <__aeabi_dsub+0x1a4>
 8002094:	003b      	movs	r3, r7
 8002096:	0025      	movs	r5, r4
 8002098:	3b20      	subs	r3, #32
 800209a:	40dd      	lsrs	r5, r3
 800209c:	2f20      	cmp	r7, #32
 800209e:	d004      	beq.n	80020aa <__aeabi_dsub+0x636>
 80020a0:	2340      	movs	r3, #64	@ 0x40
 80020a2:	1bdb      	subs	r3, r3, r7
 80020a4:	409c      	lsls	r4, r3
 80020a6:	4320      	orrs	r0, r4
 80020a8:	4680      	mov	r8, r0
 80020aa:	4640      	mov	r0, r8
 80020ac:	1e43      	subs	r3, r0, #1
 80020ae:	4198      	sbcs	r0, r3
 80020b0:	4328      	orrs	r0, r5
 80020b2:	e713      	b.n	8001edc <__aeabi_dsub+0x468>
 80020b4:	2900      	cmp	r1, #0
 80020b6:	d09d      	beq.n	8001ff4 <__aeabi_dsub+0x580>
 80020b8:	2601      	movs	r6, #1
 80020ba:	4663      	mov	r3, ip
 80020bc:	465c      	mov	r4, fp
 80020be:	4690      	mov	r8, r2
 80020c0:	401e      	ands	r6, r3
 80020c2:	e6db      	b.n	8001e7c <__aeabi_dsub+0x408>
 80020c4:	1a17      	subs	r7, r2, r0
 80020c6:	465b      	mov	r3, fp
 80020c8:	42ba      	cmp	r2, r7
 80020ca:	4192      	sbcs	r2, r2
 80020cc:	1b1c      	subs	r4, r3, r4
 80020ce:	4252      	negs	r2, r2
 80020d0:	1aa4      	subs	r4, r4, r2
 80020d2:	0223      	lsls	r3, r4, #8
 80020d4:	d4c8      	bmi.n	8002068 <__aeabi_dsub+0x5f4>
 80020d6:	0763      	lsls	r3, r4, #29
 80020d8:	08ff      	lsrs	r7, r7, #3
 80020da:	431f      	orrs	r7, r3
 80020dc:	4666      	mov	r6, ip
 80020de:	2301      	movs	r3, #1
 80020e0:	08e5      	lsrs	r5, r4, #3
 80020e2:	e71f      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 80020e4:	001d      	movs	r5, r3
 80020e6:	2400      	movs	r4, #0
 80020e8:	2700      	movs	r7, #0
 80020ea:	e657      	b.n	8001d9c <__aeabi_dsub+0x328>
 80020ec:	465c      	mov	r4, fp
 80020ee:	08d0      	lsrs	r0, r2, #3
 80020f0:	e66a      	b.n	8001dc8 <__aeabi_dsub+0x354>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x684>
 80020f6:	e737      	b.n	8001f68 <__aeabi_dsub+0x4f4>
 80020f8:	4653      	mov	r3, sl
 80020fa:	08c0      	lsrs	r0, r0, #3
 80020fc:	0767      	lsls	r7, r4, #29
 80020fe:	4307      	orrs	r7, r0
 8002100:	08e5      	lsrs	r5, r4, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x694>
 8002106:	e5b1      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	031b      	lsls	r3, r3, #12
 800210c:	421d      	tst	r5, r3
 800210e:	d008      	beq.n	8002122 <__aeabi_dsub+0x6ae>
 8002110:	4659      	mov	r1, fp
 8002112:	08c8      	lsrs	r0, r1, #3
 8002114:	4218      	tst	r0, r3
 8002116:	d104      	bne.n	8002122 <__aeabi_dsub+0x6ae>
 8002118:	08d2      	lsrs	r2, r2, #3
 800211a:	0749      	lsls	r1, r1, #29
 800211c:	430a      	orrs	r2, r1
 800211e:	0017      	movs	r7, r2
 8002120:	0005      	movs	r5, r0
 8002122:	0f7b      	lsrs	r3, r7, #29
 8002124:	00ff      	lsls	r7, r7, #3
 8002126:	08ff      	lsrs	r7, r7, #3
 8002128:	075b      	lsls	r3, r3, #29
 800212a:	431f      	orrs	r7, r3
 800212c:	e59e      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 800212e:	08c0      	lsrs	r0, r0, #3
 8002130:	0763      	lsls	r3, r4, #29
 8002132:	4318      	orrs	r0, r3
 8002134:	08e5      	lsrs	r5, r4, #3
 8002136:	2900      	cmp	r1, #0
 8002138:	d053      	beq.n	80021e2 <__aeabi_dsub+0x76e>
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	421d      	tst	r5, r3
 8002140:	d00a      	beq.n	8002158 <__aeabi_dsub+0x6e4>
 8002142:	4659      	mov	r1, fp
 8002144:	08cc      	lsrs	r4, r1, #3
 8002146:	421c      	tst	r4, r3
 8002148:	d106      	bne.n	8002158 <__aeabi_dsub+0x6e4>
 800214a:	2601      	movs	r6, #1
 800214c:	4663      	mov	r3, ip
 800214e:	0025      	movs	r5, r4
 8002150:	08d0      	lsrs	r0, r2, #3
 8002152:	0749      	lsls	r1, r1, #29
 8002154:	4308      	orrs	r0, r1
 8002156:	401e      	ands	r6, r3
 8002158:	0f47      	lsrs	r7, r0, #29
 800215a:	00c0      	lsls	r0, r0, #3
 800215c:	08c0      	lsrs	r0, r0, #3
 800215e:	077f      	lsls	r7, r7, #29
 8002160:	4307      	orrs	r7, r0
 8002162:	e583      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002164:	1883      	adds	r3, r0, r2
 8002166:	4293      	cmp	r3, r2
 8002168:	4192      	sbcs	r2, r2
 800216a:	445c      	add	r4, fp
 800216c:	4252      	negs	r2, r2
 800216e:	18a5      	adds	r5, r4, r2
 8002170:	022a      	lsls	r2, r5, #8
 8002172:	d500      	bpl.n	8002176 <__aeabi_dsub+0x702>
 8002174:	e724      	b.n	8001fc0 <__aeabi_dsub+0x54c>
 8002176:	076f      	lsls	r7, r5, #29
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	431f      	orrs	r7, r3
 800217c:	08ed      	lsrs	r5, r5, #3
 800217e:	2301      	movs	r3, #1
 8002180:	e6d0      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	000007ff 	.word	0x000007ff
 8002188:	000007fe 	.word	0x000007fe
 800218c:	ff7fffff 	.word	0xff7fffff
 8002190:	465b      	mov	r3, fp
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	075f      	lsls	r7, r3, #29
 8002196:	4666      	mov	r6, ip
 8002198:	4317      	orrs	r7, r2
 800219a:	08dd      	lsrs	r5, r3, #3
 800219c:	e566      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 800219e:	0025      	movs	r5, r4
 80021a0:	3b20      	subs	r3, #32
 80021a2:	40dd      	lsrs	r5, r3
 80021a4:	4663      	mov	r3, ip
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d005      	beq.n	80021b6 <__aeabi_dsub+0x742>
 80021aa:	2340      	movs	r3, #64	@ 0x40
 80021ac:	4661      	mov	r1, ip
 80021ae:	1a5b      	subs	r3, r3, r1
 80021b0:	409c      	lsls	r4, r3
 80021b2:	4320      	orrs	r0, r4
 80021b4:	4680      	mov	r8, r0
 80021b6:	4647      	mov	r7, r8
 80021b8:	1e7b      	subs	r3, r7, #1
 80021ba:	419f      	sbcs	r7, r3
 80021bc:	432f      	orrs	r7, r5
 80021be:	e5a0      	b.n	8001d02 <__aeabi_dsub+0x28e>
 80021c0:	2120      	movs	r1, #32
 80021c2:	2700      	movs	r7, #0
 80021c4:	1a09      	subs	r1, r1, r0
 80021c6:	e4d2      	b.n	8001b6e <__aeabi_dsub+0xfa>
 80021c8:	2f00      	cmp	r7, #0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x75a>
 80021cc:	e713      	b.n	8001ff6 <__aeabi_dsub+0x582>
 80021ce:	465c      	mov	r4, fp
 80021d0:	0017      	movs	r7, r2
 80021d2:	2500      	movs	r5, #0
 80021d4:	e5f6      	b.n	8001dc4 <__aeabi_dsub+0x350>
 80021d6:	08d7      	lsrs	r7, r2, #3
 80021d8:	0749      	lsls	r1, r1, #29
 80021da:	2302      	movs	r3, #2
 80021dc:	430f      	orrs	r7, r1
 80021de:	092d      	lsrs	r5, r5, #4
 80021e0:	e6a0      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 80021e2:	0007      	movs	r7, r0
 80021e4:	e542      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 80021e6:	465b      	mov	r3, fp
 80021e8:	2601      	movs	r6, #1
 80021ea:	075f      	lsls	r7, r3, #29
 80021ec:	08dd      	lsrs	r5, r3, #3
 80021ee:	4663      	mov	r3, ip
 80021f0:	08d2      	lsrs	r2, r2, #3
 80021f2:	4317      	orrs	r7, r2
 80021f4:	401e      	ands	r6, r3
 80021f6:	e539      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 80021f8:	465b      	mov	r3, fp
 80021fa:	08d2      	lsrs	r2, r2, #3
 80021fc:	075f      	lsls	r7, r3, #29
 80021fe:	4317      	orrs	r7, r2
 8002200:	08dd      	lsrs	r5, r3, #3
 8002202:	e533      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002204:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <__aeabi_dsub+0x80c>)
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	4022      	ands	r2, r4
 800220a:	0757      	lsls	r7, r2, #29
 800220c:	0252      	lsls	r2, r2, #9
 800220e:	2501      	movs	r5, #1
 8002210:	431f      	orrs	r7, r3
 8002212:	0b14      	lsrs	r4, r2, #12
 8002214:	e5c2      	b.n	8001d9c <__aeabi_dsub+0x328>
 8002216:	000e      	movs	r6, r1
 8002218:	2001      	movs	r0, #1
 800221a:	e65f      	b.n	8001edc <__aeabi_dsub+0x468>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <__aeabi_dsub+0x7c8>
 8002220:	464b      	mov	r3, r9
 8002222:	1b5b      	subs	r3, r3, r5
 8002224:	469c      	mov	ip, r3
 8002226:	2d00      	cmp	r5, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x7b8>
 800222a:	e548      	b.n	8001cbe <__aeabi_dsub+0x24a>
 800222c:	2701      	movs	r7, #1
 800222e:	2b38      	cmp	r3, #56	@ 0x38
 8002230:	dd00      	ble.n	8002234 <__aeabi_dsub+0x7c0>
 8002232:	e566      	b.n	8001d02 <__aeabi_dsub+0x28e>
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	041b      	lsls	r3, r3, #16
 8002238:	431c      	orrs	r4, r3
 800223a:	e550      	b.n	8001cde <__aeabi_dsub+0x26a>
 800223c:	1c6b      	adds	r3, r5, #1
 800223e:	4d11      	ldr	r5, [pc, #68]	@ (8002284 <__aeabi_dsub+0x810>)
 8002240:	422b      	tst	r3, r5
 8002242:	d000      	beq.n	8002246 <__aeabi_dsub+0x7d2>
 8002244:	e673      	b.n	8001f2e <__aeabi_dsub+0x4ba>
 8002246:	4659      	mov	r1, fp
 8002248:	0023      	movs	r3, r4
 800224a:	4311      	orrs	r1, r2
 800224c:	468a      	mov	sl, r1
 800224e:	4303      	orrs	r3, r0
 8002250:	e600      	b.n	8001e54 <__aeabi_dsub+0x3e0>
 8002252:	0767      	lsls	r7, r4, #29
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	2300      	movs	r3, #0
 8002258:	4307      	orrs	r7, r0
 800225a:	08e5      	lsrs	r5, r4, #3
 800225c:	e662      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 800225e:	0764      	lsls	r4, r4, #29
 8002260:	08ff      	lsrs	r7, r7, #3
 8002262:	4327      	orrs	r7, r4
 8002264:	0905      	lsrs	r5, r0, #4
 8002266:	e65d      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002268:	08d2      	lsrs	r2, r2, #3
 800226a:	0749      	lsls	r1, r1, #29
 800226c:	4311      	orrs	r1, r2
 800226e:	000f      	movs	r7, r1
 8002270:	2302      	movs	r3, #2
 8002272:	092d      	lsrs	r5, r5, #4
 8002274:	e656      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002276:	0007      	movs	r7, r0
 8002278:	e5a4      	b.n	8001dc4 <__aeabi_dsub+0x350>
 800227a:	0038      	movs	r0, r7
 800227c:	e48f      	b.n	8001b9e <__aeabi_dsub+0x12a>
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	ff7fffff 	.word	0xff7fffff
 8002284:	000007fe 	.word	0x000007fe

08002288 <__aeabi_dcmpun>:
 8002288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228a:	46c6      	mov	lr, r8
 800228c:	031e      	lsls	r6, r3, #12
 800228e:	0b36      	lsrs	r6, r6, #12
 8002290:	46b0      	mov	r8, r6
 8002292:	4e0d      	ldr	r6, [pc, #52]	@ (80022c8 <__aeabi_dcmpun+0x40>)
 8002294:	030c      	lsls	r4, r1, #12
 8002296:	004d      	lsls	r5, r1, #1
 8002298:	005f      	lsls	r7, r3, #1
 800229a:	b500      	push	{lr}
 800229c:	0b24      	lsrs	r4, r4, #12
 800229e:	0d6d      	lsrs	r5, r5, #21
 80022a0:	0d7f      	lsrs	r7, r7, #21
 80022a2:	42b5      	cmp	r5, r6
 80022a4:	d00b      	beq.n	80022be <__aeabi_dcmpun+0x36>
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__aeabi_dcmpun+0x40>)
 80022a8:	2000      	movs	r0, #0
 80022aa:	428f      	cmp	r7, r1
 80022ac:	d104      	bne.n	80022b8 <__aeabi_dcmpun+0x30>
 80022ae:	4646      	mov	r6, r8
 80022b0:	4316      	orrs	r6, r2
 80022b2:	0030      	movs	r0, r6
 80022b4:	1e43      	subs	r3, r0, #1
 80022b6:	4198      	sbcs	r0, r3
 80022b8:	bc80      	pop	{r7}
 80022ba:	46b8      	mov	r8, r7
 80022bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022be:	4304      	orrs	r4, r0
 80022c0:	2001      	movs	r0, #1
 80022c2:	2c00      	cmp	r4, #0
 80022c4:	d1f8      	bne.n	80022b8 <__aeabi_dcmpun+0x30>
 80022c6:	e7ee      	b.n	80022a6 <__aeabi_dcmpun+0x1e>
 80022c8:	000007ff 	.word	0x000007ff

080022cc <__aeabi_d2iz>:
 80022cc:	000b      	movs	r3, r1
 80022ce:	0002      	movs	r2, r0
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	4d16      	ldr	r5, [pc, #88]	@ (800232c <__aeabi_d2iz+0x60>)
 80022d4:	030c      	lsls	r4, r1, #12
 80022d6:	b082      	sub	sp, #8
 80022d8:	0049      	lsls	r1, r1, #1
 80022da:	2000      	movs	r0, #0
 80022dc:	9200      	str	r2, [sp, #0]
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	0b24      	lsrs	r4, r4, #12
 80022e2:	0d49      	lsrs	r1, r1, #21
 80022e4:	0fde      	lsrs	r6, r3, #31
 80022e6:	42a9      	cmp	r1, r5
 80022e8:	dd04      	ble.n	80022f4 <__aeabi_d2iz+0x28>
 80022ea:	4811      	ldr	r0, [pc, #68]	@ (8002330 <__aeabi_d2iz+0x64>)
 80022ec:	4281      	cmp	r1, r0
 80022ee:	dd03      	ble.n	80022f8 <__aeabi_d2iz+0x2c>
 80022f0:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <__aeabi_d2iz+0x68>)
 80022f2:	18f0      	adds	r0, r6, r3
 80022f4:	b002      	add	sp, #8
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	2080      	movs	r0, #128	@ 0x80
 80022fa:	0340      	lsls	r0, r0, #13
 80022fc:	4320      	orrs	r0, r4
 80022fe:	4c0e      	ldr	r4, [pc, #56]	@ (8002338 <__aeabi_d2iz+0x6c>)
 8002300:	1a64      	subs	r4, r4, r1
 8002302:	2c1f      	cmp	r4, #31
 8002304:	dd08      	ble.n	8002318 <__aeabi_d2iz+0x4c>
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <__aeabi_d2iz+0x70>)
 8002308:	1a5b      	subs	r3, r3, r1
 800230a:	40d8      	lsrs	r0, r3
 800230c:	0003      	movs	r3, r0
 800230e:	4258      	negs	r0, r3
 8002310:	2e00      	cmp	r6, #0
 8002312:	d1ef      	bne.n	80022f4 <__aeabi_d2iz+0x28>
 8002314:	0018      	movs	r0, r3
 8002316:	e7ed      	b.n	80022f4 <__aeabi_d2iz+0x28>
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <__aeabi_d2iz+0x74>)
 800231a:	9a00      	ldr	r2, [sp, #0]
 800231c:	469c      	mov	ip, r3
 800231e:	0003      	movs	r3, r0
 8002320:	4461      	add	r1, ip
 8002322:	408b      	lsls	r3, r1
 8002324:	40e2      	lsrs	r2, r4
 8002326:	4313      	orrs	r3, r2
 8002328:	e7f1      	b.n	800230e <__aeabi_d2iz+0x42>
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	000003fe 	.word	0x000003fe
 8002330:	0000041d 	.word	0x0000041d
 8002334:	7fffffff 	.word	0x7fffffff
 8002338:	00000433 	.word	0x00000433
 800233c:	00000413 	.word	0x00000413
 8002340:	fffffbed 	.word	0xfffffbed

08002344 <__aeabi_i2d>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	2800      	cmp	r0, #0
 8002348:	d016      	beq.n	8002378 <__aeabi_i2d+0x34>
 800234a:	17c3      	asrs	r3, r0, #31
 800234c:	18c5      	adds	r5, r0, r3
 800234e:	405d      	eors	r5, r3
 8002350:	0fc4      	lsrs	r4, r0, #31
 8002352:	0028      	movs	r0, r5
 8002354:	f000 f848 	bl	80023e8 <__clzsi2>
 8002358:	4b10      	ldr	r3, [pc, #64]	@ (800239c <__aeabi_i2d+0x58>)
 800235a:	1a1b      	subs	r3, r3, r0
 800235c:	055b      	lsls	r3, r3, #21
 800235e:	0d5b      	lsrs	r3, r3, #21
 8002360:	280a      	cmp	r0, #10
 8002362:	dc14      	bgt.n	800238e <__aeabi_i2d+0x4a>
 8002364:	0002      	movs	r2, r0
 8002366:	002e      	movs	r6, r5
 8002368:	3215      	adds	r2, #21
 800236a:	4096      	lsls	r6, r2
 800236c:	220b      	movs	r2, #11
 800236e:	1a12      	subs	r2, r2, r0
 8002370:	40d5      	lsrs	r5, r2
 8002372:	032d      	lsls	r5, r5, #12
 8002374:	0b2d      	lsrs	r5, r5, #12
 8002376:	e003      	b.n	8002380 <__aeabi_i2d+0x3c>
 8002378:	2400      	movs	r4, #0
 800237a:	2300      	movs	r3, #0
 800237c:	2500      	movs	r5, #0
 800237e:	2600      	movs	r6, #0
 8002380:	051b      	lsls	r3, r3, #20
 8002382:	432b      	orrs	r3, r5
 8002384:	07e4      	lsls	r4, r4, #31
 8002386:	4323      	orrs	r3, r4
 8002388:	0030      	movs	r0, r6
 800238a:	0019      	movs	r1, r3
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	380b      	subs	r0, #11
 8002390:	4085      	lsls	r5, r0
 8002392:	032d      	lsls	r5, r5, #12
 8002394:	2600      	movs	r6, #0
 8002396:	0b2d      	lsrs	r5, r5, #12
 8002398:	e7f2      	b.n	8002380 <__aeabi_i2d+0x3c>
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	0000041e 	.word	0x0000041e

080023a0 <__aeabi_ui2d>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
 80023a4:	d010      	beq.n	80023c8 <__aeabi_ui2d+0x28>
 80023a6:	f000 f81f 	bl	80023e8 <__clzsi2>
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <__aeabi_ui2d+0x44>)
 80023ac:	1a1b      	subs	r3, r3, r0
 80023ae:	055b      	lsls	r3, r3, #21
 80023b0:	0d5b      	lsrs	r3, r3, #21
 80023b2:	280a      	cmp	r0, #10
 80023b4:	dc0f      	bgt.n	80023d6 <__aeabi_ui2d+0x36>
 80023b6:	220b      	movs	r2, #11
 80023b8:	0021      	movs	r1, r4
 80023ba:	1a12      	subs	r2, r2, r0
 80023bc:	40d1      	lsrs	r1, r2
 80023be:	3015      	adds	r0, #21
 80023c0:	030a      	lsls	r2, r1, #12
 80023c2:	4084      	lsls	r4, r0
 80023c4:	0b12      	lsrs	r2, r2, #12
 80023c6:	e001      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4313      	orrs	r3, r2
 80023d0:	0020      	movs	r0, r4
 80023d2:	0019      	movs	r1, r3
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0022      	movs	r2, r4
 80023d8:	380b      	subs	r0, #11
 80023da:	4082      	lsls	r2, r0
 80023dc:	0312      	lsls	r2, r2, #12
 80023de:	2400      	movs	r4, #0
 80023e0:	0b12      	lsrs	r2, r2, #12
 80023e2:	e7f3      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023e4:	0000041e 	.word	0x0000041e

080023e8 <__clzsi2>:
 80023e8:	211c      	movs	r1, #28
 80023ea:	2301      	movs	r3, #1
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	4298      	cmp	r0, r3
 80023f0:	d301      	bcc.n	80023f6 <__clzsi2+0xe>
 80023f2:	0c00      	lsrs	r0, r0, #16
 80023f4:	3910      	subs	r1, #16
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	4298      	cmp	r0, r3
 80023fa:	d301      	bcc.n	8002400 <__clzsi2+0x18>
 80023fc:	0a00      	lsrs	r0, r0, #8
 80023fe:	3908      	subs	r1, #8
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	4298      	cmp	r0, r3
 8002404:	d301      	bcc.n	800240a <__clzsi2+0x22>
 8002406:	0900      	lsrs	r0, r0, #4
 8002408:	3904      	subs	r1, #4
 800240a:	a202      	add	r2, pc, #8	@ (adr r2, 8002414 <__clzsi2+0x2c>)
 800240c:	5c10      	ldrb	r0, [r2, r0]
 800240e:	1840      	adds	r0, r0, r1
 8002410:	4770      	bx	lr
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	02020304 	.word	0x02020304
 8002418:	01010101 	.word	0x01010101
	...

08002424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	4c8c      	ldr	r4, [pc, #560]	@ (8002658 <main+0x234>)
 8002428:	44a5      	add	sp, r4
 800242a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800242c:	f000 fff4 	bl	8003418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002430:	f000 f936 	bl	80026a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002434:	f000 fbec 	bl	8002c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8002438:	f000 fbc4 	bl	8002bc4 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800243c:	f00a f974 	bl	800c728 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 8002440:	f000 f9a2 	bl	8002788 <MX_ADC_Init>
  MX_SPI2_Init();
 8002444:	f000 fa84 	bl	8002950 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002448:	f000 fac0 	bl	80029cc <MX_TIM1_Init>
  MX_TIM3_Init();
 800244c:	f000 fb26 	bl	8002a9c <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8002450:	f000 fb88 	bl	8002b64 <MX_USART4_UART_Init>
  MX_RTC_Init();
 8002454:	f000 fa1a 	bl	800288c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */



  // запуск таймеров на обработку энкодеров
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002458:	4b80      	ldr	r3, [pc, #512]	@ (800265c <main+0x238>)
 800245a:	213c      	movs	r1, #60	@ 0x3c
 800245c:	0018      	movs	r0, r3
 800245e:	f005 fd51 	bl	8007f04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002462:	4b7f      	ldr	r3, [pc, #508]	@ (8002660 <main+0x23c>)
 8002464:	213c      	movs	r1, #60	@ 0x3c
 8002466:	0018      	movs	r0, r3
 8002468:	f005 fd4c 	bl	8007f04 <HAL_TIM_Encoder_Start>

  // калибровка и запуск АЦП
  HAL_ADCEx_Calibration_Start(&hadc);
 800246c:	4b7d      	ldr	r3, [pc, #500]	@ (8002664 <main+0x240>)
 800246e:	0018      	movs	r0, r3
 8002470:	f001 fc42 	bl	8003cf8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcData, 4);
 8002474:	497c      	ldr	r1, [pc, #496]	@ (8002668 <main+0x244>)
 8002476:	4b7b      	ldr	r3, [pc, #492]	@ (8002664 <main+0x240>)
 8002478:	2204      	movs	r2, #4
 800247a:	0018      	movs	r0, r3
 800247c:	f001 f994 	bl	80037a8 <HAL_ADC_Start_DMA>
	// Declare bytes array for a frame buffer.
	// Dimensions are divided by 2 because one byte contains two 4-bit grayscale pixels
	uint8_t tx_buf[256 * 64 / 2];

	//Call initialization sequence for SSD1322
	SSD1322_API_init();
 8002480:	f00a fe62 	bl	800d148 <SSD1322_API_init>

	select_font(&FreeMono12pt7b);
 8002484:	4b79      	ldr	r3, [pc, #484]	@ (800266c <main+0x248>)
 8002486:	0018      	movs	r0, r3
 8002488:	f00a ffd6 	bl	800d438 <select_font>
	// now text will we written with that font
	draw_text(tx_buf, "Lorem ipsum", 10, 20, 15);
 800248c:	4978      	ldr	r1, [pc, #480]	@ (8002670 <main+0x24c>)
 800248e:	0038      	movs	r0, r7
 8002490:	230f      	movs	r3, #15
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2314      	movs	r3, #20
 8002496:	220a      	movs	r2, #10
 8002498:	f00b f8a6 	bl	800d5e8 <draw_text>
	// send a frame buffer to the display
	send_buffer_to_OLED(tx_buf, 0, 0);
 800249c:	003b      	movs	r3, r7
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	0018      	movs	r0, r3
 80024a4:	f00b f8dc 	bl	800d660 <send_buffer_to_OLED>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // если по USB что-то пришло
	  if(USBDatainReady == SET)
 80024a8:	4b72      	ldr	r3, [pc, #456]	@ (8002674 <main+0x250>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d131      	bne.n	8002514 <main+0xf0>
	  {
		  switch(USB_RX_Buffer[0]) // в зависимости от пришедшего числа зажигаем или гасим светодиод на плате
 80024b0:	4b71      	ldr	r3, [pc, #452]	@ (8002678 <main+0x254>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d002      	beq.n	80024be <main+0x9a>
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d014      	beq.n	80024e6 <main+0xc2>
//		  case 3: if(USB_RX_Buffer[1])
//					  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
//				  else
//					  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
//				  break;
		  default: break;
 80024bc:	e027      	b.n	800250e <main+0xea>
		  case 1: if(USB_RX_Buffer[1])
 80024be:	4b6e      	ldr	r3, [pc, #440]	@ (8002678 <main+0x254>)
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <main+0xb2>
					  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	486c      	ldr	r0, [pc, #432]	@ (800267c <main+0x258>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	0019      	movs	r1, r3
 80024d0:	f002 f90b 	bl	80046ea <HAL_GPIO_WritePin>
				  break;
 80024d4:	e01b      	b.n	800250e <main+0xea>
					  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4868      	ldr	r0, [pc, #416]	@ (800267c <main+0x258>)
 80024dc:	2200      	movs	r2, #0
 80024de:	0019      	movs	r1, r3
 80024e0:	f002 f903 	bl	80046ea <HAL_GPIO_WritePin>
				  break;
 80024e4:	e013      	b.n	800250e <main+0xea>
		  case 2: if(USB_RX_Buffer[1])
 80024e6:	4b64      	ldr	r3, [pc, #400]	@ (8002678 <main+0x254>)
 80024e8:	785b      	ldrb	r3, [r3, #1]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <main+0xda>
					  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4862      	ldr	r0, [pc, #392]	@ (800267c <main+0x258>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	0019      	movs	r1, r3
 80024f8:	f002 f8f7 	bl	80046ea <HAL_GPIO_WritePin>
				  break;
 80024fc:	e006      	b.n	800250c <main+0xe8>
					  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80024fe:	2380      	movs	r3, #128	@ 0x80
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	485e      	ldr	r0, [pc, #376]	@ (800267c <main+0x258>)
 8002504:	2200      	movs	r2, #0
 8002506:	0019      	movs	r1, r3
 8002508:	f002 f8ef 	bl	80046ea <HAL_GPIO_WritePin>
				  break;
 800250c:	46c0      	nop			@ (mov r8, r8)
		  }

		  USBDatainReady = RESET;
 800250e:	4b59      	ldr	r3, [pc, #356]	@ (8002674 <main+0x250>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
	  }

	// если dma сохранил результаты преобразования АЦП
	if(dmaEnd){
 8002514:	4b5a      	ldr	r3, [pc, #360]	@ (8002680 <main+0x25c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d042      	beq.n	80025a2 <main+0x17e>
		// сохраняем значение осей
		USB_TX_Buffer[0] = (uint8_t)(adcData[0] >> 4) - 128;  // X
 800251c:	4b52      	ldr	r3, [pc, #328]	@ (8002668 <main+0x244>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	b29b      	uxth	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3b80      	subs	r3, #128	@ 0x80
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b56      	ldr	r3, [pc, #344]	@ (8002684 <main+0x260>)
 800252c:	701a      	strb	r2, [r3, #0]
		USB_TX_Buffer[1] = (uint8_t)(adcData[1] >> 4) - 128;  // Y
 800252e:	4b4e      	ldr	r3, [pc, #312]	@ (8002668 <main+0x244>)
 8002530:	885b      	ldrh	r3, [r3, #2]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	b29b      	uxth	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3b80      	subs	r3, #128	@ 0x80
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b51      	ldr	r3, [pc, #324]	@ (8002684 <main+0x260>)
 800253e:	705a      	strb	r2, [r3, #1]
		USB_TX_Buffer[2] = (uint8_t)(adcData[0] >> 4) - 128;  // Z  (не работающий канал)
 8002540:	4b49      	ldr	r3, [pc, #292]	@ (8002668 <main+0x244>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	b29b      	uxth	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	3b80      	subs	r3, #128	@ 0x80
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b4d      	ldr	r3, [pc, #308]	@ (8002684 <main+0x260>)
 8002550:	709a      	strb	r2, [r3, #2]
		USB_TX_Buffer[3] = (uint8_t)(adcData[1] >> 4) - 128;  // rZ (не работающий канал)
 8002552:	4b45      	ldr	r3, [pc, #276]	@ (8002668 <main+0x244>)
 8002554:	885b      	ldrh	r3, [r3, #2]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	b29b      	uxth	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3b80      	subs	r3, #128	@ 0x80
 800255e:	b2da      	uxtb	r2, r3
 8002560:	4b48      	ldr	r3, [pc, #288]	@ (8002684 <main+0x260>)
 8002562:	70da      	strb	r2, [r3, #3]

		UartPrintString(&huart4, "ACP1: ", 6, 0);
 8002564:	4948      	ldr	r1, [pc, #288]	@ (8002688 <main+0x264>)
 8002566:	4849      	ldr	r0, [pc, #292]	@ (800268c <main+0x268>)
 8002568:	2300      	movs	r3, #0
 800256a:	2206      	movs	r2, #6
 800256c:	f00b fa14 	bl	800d998 <UartPrintString>
		UartPrintInt(&huart4, (int32_t)adcData[0], 1);
 8002570:	4b3d      	ldr	r3, [pc, #244]	@ (8002668 <main+0x244>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	0019      	movs	r1, r3
 8002576:	4b45      	ldr	r3, [pc, #276]	@ (800268c <main+0x268>)
 8002578:	2201      	movs	r2, #1
 800257a:	0018      	movs	r0, r3
 800257c:	f00b f972 	bl	800d864 <UartPrintInt>
		UartPrintString(&huart4, "ACP2: ", 6, 0);
 8002580:	4943      	ldr	r1, [pc, #268]	@ (8002690 <main+0x26c>)
 8002582:	4842      	ldr	r0, [pc, #264]	@ (800268c <main+0x268>)
 8002584:	2300      	movs	r3, #0
 8002586:	2206      	movs	r2, #6
 8002588:	f00b fa06 	bl	800d998 <UartPrintString>
		UartPrintInt(&huart4, (int32_t)adcData[1], 1);
 800258c:	4b36      	ldr	r3, [pc, #216]	@ (8002668 <main+0x244>)
 800258e:	885b      	ldrh	r3, [r3, #2]
 8002590:	0019      	movs	r1, r3
 8002592:	4b3e      	ldr	r3, [pc, #248]	@ (800268c <main+0x268>)
 8002594:	2201      	movs	r2, #1
 8002596:	0018      	movs	r0, r3
 8002598:	f00b f964 	bl	800d864 <UartPrintInt>
		__HAL_TIM_GET_COUNTER(&htim1);
 800259c:	4b2f      	ldr	r3, [pc, #188]	@ (800265c <main+0x238>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	}

	dmaEnd = 0; // сброс флага dma
 80025a2:	4b37      	ldr	r3, [pc, #220]	@ (8002680 <main+0x25c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]

	// кнопки ряда 1
	USB_TX_Buffer[4] =
			HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) |
 80025a8:	2390      	movs	r3, #144	@ 0x90
 80025aa:	05db      	lsls	r3, r3, #23
 80025ac:	2101      	movs	r1, #1
 80025ae:	0018      	movs	r0, r3
 80025b0:	f002 f87e 	bl	80046b0 <HAL_GPIO_ReadPin>
 80025b4:	0003      	movs	r3, r0
 80025b6:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(JoyBtn3_GPIO_Port, JoyBtn3_Pin) << 1) |
 80025b8:	4b36      	ldr	r3, [pc, #216]	@ (8002694 <main+0x270>)
 80025ba:	2108      	movs	r1, #8
 80025bc:	0018      	movs	r0, r3
 80025be:	f002 f877 	bl	80046b0 <HAL_GPIO_ReadPin>
 80025c2:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) |
 80025c4:	b25b      	sxtb	r3, r3
 80025c6:	18db      	adds	r3, r3, r3
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	4323      	orrs	r3, r4
 80025cc:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(JoyBtn4_GPIO_Port, JoyBtn4_Pin) << 2) |
 80025ce:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <main+0x270>)
 80025d0:	2110      	movs	r1, #16
 80025d2:	0018      	movs	r0, r3
 80025d4:	f002 f86c 	bl	80046b0 <HAL_GPIO_ReadPin>
 80025d8:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(JoyBtn3_GPIO_Port, JoyBtn3_Pin) << 1) |
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	4323      	orrs	r3, r4
 80025e2:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(JoyBtn5_GPIO_Port, JoyBtn5_Pin) << 3) |
 80025e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002694 <main+0x270>)
 80025e6:	2120      	movs	r1, #32
 80025e8:	0018      	movs	r0, r3
 80025ea:	f002 f861 	bl	80046b0 <HAL_GPIO_ReadPin>
 80025ee:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(JoyBtn4_GPIO_Port, JoyBtn4_Pin) << 2) |
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	4323      	orrs	r3, r4
 80025f8:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(JoyBtn6_GPIO_Port, JoyBtn6_Pin) << 4) |
 80025fa:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <main+0x270>)
 80025fc:	2140      	movs	r1, #64	@ 0x40
 80025fe:	0018      	movs	r0, r3
 8002600:	f002 f856 	bl	80046b0 <HAL_GPIO_ReadPin>
 8002604:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(JoyBtn5_GPIO_Port, JoyBtn5_Pin) << 3) |
 8002606:	b25b      	sxtb	r3, r3
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	b25b      	sxtb	r3, r3
 800260c:	4323      	orrs	r3, r4
 800260e:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(JoyBtn7_GPIO_Port, JoyBtn7_Pin) << 5);
 8002610:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <main+0x270>)
 8002612:	2180      	movs	r1, #128	@ 0x80
 8002614:	0018      	movs	r0, r3
 8002616:	f002 f84b 	bl	80046b0 <HAL_GPIO_ReadPin>
 800261a:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(JoyBtn6_GPIO_Port, JoyBtn6_Pin) << 4) |
 800261c:	b25b      	sxtb	r3, r3
 800261e:	015b      	lsls	r3, r3, #5
 8002620:	b25b      	sxtb	r3, r3
 8002622:	4323      	orrs	r3, r4
 8002624:	b25b      	sxtb	r3, r3
 8002626:	b2da      	uxtb	r2, r3
	USB_TX_Buffer[4] =
 8002628:	4b16      	ldr	r3, [pc, #88]	@ (8002684 <main+0x260>)
 800262a:	711a      	strb	r2, [r3, #4]

	// кнопки ряда 2
	USB_TX_Buffer[5] = HAL_GPIO_ReadPin(JoyBtn2_GPIO_Port, JoyBtn2_Pin);
 800262c:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <main+0x270>)
 800262e:	2104      	movs	r1, #4
 8002630:	0018      	movs	r0, r3
 8002632:	f002 f83d 	bl	80046b0 <HAL_GPIO_ReadPin>
 8002636:	0003      	movs	r3, r0
 8002638:	001a      	movs	r2, r3
 800263a:	4b12      	ldr	r3, [pc, #72]	@ (8002684 <main+0x260>)
 800263c:	715a      	strb	r2, [r3, #5]

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, USB_TX_Buffer, 6); // отправка USB пакета
 800263e:	4911      	ldr	r1, [pc, #68]	@ (8002684 <main+0x260>)
 8002640:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <main+0x274>)
 8002642:	2206      	movs	r2, #6
 8002644:	0018      	movs	r0, r3
 8002646:	f008 fd8f 	bl	800b168 <USBD_CUSTOM_HID_SendReport>

	encode = __HAL_TIM_GET_COUNTER(&htim3);
 800264a:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <main+0x23c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <main+0x278>)
 8002652:	601a      	str	r2, [r3, #0]
	  if(USBDatainReady == SET)
 8002654:	e728      	b.n	80024a8 <main+0x84>
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	ffffdff4 	.word	0xffffdff4
 800265c:	200004c4 	.word	0x200004c4
 8002660:	2000050c 	.word	0x2000050c
 8002664:	20000378 	.word	0x20000378
 8002668:	2000065c 	.word	0x2000065c
 800266c:	08010db8 	.word	0x08010db8
 8002670:	08010448 	.word	0x08010448
 8002674:	20000684 	.word	0x20000684
 8002678:	200005dc 	.word	0x200005dc
 800267c:	48000800 	.word	0x48000800
 8002680:	2000067e 	.word	0x2000067e
 8002684:	2000061c 	.word	0x2000061c
 8002688:	08010454 	.word	0x08010454
 800268c:	20000554 	.word	0x20000554
 8002690:	0801045c 	.word	0x0801045c
 8002694:	48000400 	.word	0x48000400
 8002698:	20000694 	.word	0x20000694
 800269c:	20000680 	.word	0x20000680

080026a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b099      	sub	sp, #100	@ 0x64
 80026a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a6:	242c      	movs	r4, #44	@ 0x2c
 80026a8:	193b      	adds	r3, r7, r4
 80026aa:	0018      	movs	r0, r3
 80026ac:	2334      	movs	r3, #52	@ 0x34
 80026ae:	001a      	movs	r2, r3
 80026b0:	2100      	movs	r1, #0
 80026b2:	f00b ff05 	bl	800e4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b6:	231c      	movs	r3, #28
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	0018      	movs	r0, r3
 80026bc:	2310      	movs	r3, #16
 80026be:	001a      	movs	r2, r3
 80026c0:	2100      	movs	r1, #0
 80026c2:	f00b fefd 	bl	800e4c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026c6:	003b      	movs	r3, r7
 80026c8:	0018      	movs	r0, r3
 80026ca:	231c      	movs	r3, #28
 80026cc:	001a      	movs	r2, r3
 80026ce:	2100      	movs	r1, #0
 80026d0:	f00b fef6 	bl	800e4c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80026d4:	0021      	movs	r1, r4
 80026d6:	187b      	adds	r3, r7, r1
 80026d8:	223a      	movs	r2, #58	@ 0x3a
 80026da:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	2201      	movs	r2, #1
 80026e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	2201      	movs	r2, #1
 80026e6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	2201      	movs	r2, #1
 80026ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	2210      	movs	r2, #16
 80026f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	2210      	movs	r2, #16
 80026f8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	2201      	movs	r2, #1
 80026fe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2202      	movs	r2, #2
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2280      	movs	r2, #128	@ 0x80
 800270a:	0212      	lsls	r2, r2, #8
 800270c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800270e:	187b      	adds	r3, r7, r1
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	0352      	lsls	r2, r2, #13
 8002714:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271c:	187b      	adds	r3, r7, r1
 800271e:	0018      	movs	r0, r3
 8002720:	f003 fe2a 	bl	8006378 <HAL_RCC_OscConfig>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d001      	beq.n	800272c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002728:	f000 fb0e 	bl	8002d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272c:	211c      	movs	r1, #28
 800272e:	187b      	adds	r3, r7, r1
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2202      	movs	r2, #2
 8002738:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002740:	187b      	adds	r3, r7, r1
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002746:	187b      	adds	r3, r7, r1
 8002748:	2101      	movs	r1, #1
 800274a:	0018      	movs	r0, r3
 800274c:	f004 f99a 	bl	8006a84 <HAL_RCC_ClockConfig>
 8002750:	1e03      	subs	r3, r0, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002754:	f000 faf8 	bl	8002d48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RTC;
 8002758:	003b      	movs	r3, r7
 800275a:	22c0      	movs	r2, #192	@ 0xc0
 800275c:	0292      	lsls	r2, r2, #10
 800275e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002760:	003b      	movs	r3, r7
 8002762:	2280      	movs	r2, #128	@ 0x80
 8002764:	0092      	lsls	r2, r2, #2
 8002766:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002768:	003b      	movs	r3, r7
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800276e:	003b      	movs	r3, r7
 8002770:	0018      	movs	r0, r3
 8002772:	f004 faf3 	bl	8006d5c <HAL_RCCEx_PeriphCLKConfig>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d001      	beq.n	800277e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800277a:	f000 fae5 	bl	8002d48 <Error_Handler>
  }
}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b019      	add	sp, #100	@ 0x64
 8002784:	bd90      	pop	{r4, r7, pc}
	...

08002788 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	0018      	movs	r0, r3
 8002792:	230c      	movs	r3, #12
 8002794:	001a      	movs	r2, r3
 8002796:	2100      	movs	r1, #0
 8002798:	f00b fe92 	bl	800e4c0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800279c:	4b39      	ldr	r3, [pc, #228]	@ (8002884 <MX_ADC_Init+0xfc>)
 800279e:	4a3a      	ldr	r2, [pc, #232]	@ (8002888 <MX_ADC_Init+0x100>)
 80027a0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80027a2:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80027a8:	4b36      	ldr	r3, [pc, #216]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027ae:	4b35      	ldr	r3, [pc, #212]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80027b4:	4b33      	ldr	r3, [pc, #204]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027ba:	4b32      	ldr	r3, [pc, #200]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027bc:	2204      	movs	r2, #4
 80027be:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80027c0:	4b30      	ldr	r3, [pc, #192]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80027c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80027cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80027d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027da:	22c2      	movs	r2, #194	@ 0xc2
 80027dc:	32ff      	adds	r2, #255	@ 0xff
 80027de:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027e0:	4b28      	ldr	r3, [pc, #160]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80027e6:	4b27      	ldr	r3, [pc, #156]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027e8:	2224      	movs	r2, #36	@ 0x24
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027ee:	4b25      	ldr	r3, [pc, #148]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80027f4:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <MX_ADC_Init+0xfc>)
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fe96 	bl	8003528 <HAL_ADC_Init>
 80027fc:	1e03      	subs	r3, r0, #0
 80027fe:	d001      	beq.n	8002804 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002800:	f000 faa2 	bl	8002d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	2204      	movs	r2, #4
 8002808:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2280      	movs	r2, #128	@ 0x80
 800280e:	0152      	lsls	r2, r2, #5
 8002810:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2207      	movs	r2, #7
 8002816:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002818:	1d3a      	adds	r2, r7, #4
 800281a:	4b1a      	ldr	r3, [pc, #104]	@ (8002884 <MX_ADC_Init+0xfc>)
 800281c:	0011      	movs	r1, r2
 800281e:	0018      	movs	r0, r3
 8002820:	f001 f854 	bl	80038cc <HAL_ADC_ConfigChannel>
 8002824:	1e03      	subs	r3, r0, #0
 8002826:	d001      	beq.n	800282c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002828:	f000 fa8e 	bl	8002d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	2205      	movs	r2, #5
 8002830:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002832:	1d3a      	adds	r2, r7, #4
 8002834:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <MX_ADC_Init+0xfc>)
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f001 f847 	bl	80038cc <HAL_ADC_ConfigChannel>
 800283e:	1e03      	subs	r3, r0, #0
 8002840:	d001      	beq.n	8002846 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8002842:	f000 fa81 	bl	8002d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	2211      	movs	r2, #17
 800284a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800284c:	1d3a      	adds	r2, r7, #4
 800284e:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <MX_ADC_Init+0xfc>)
 8002850:	0011      	movs	r1, r2
 8002852:	0018      	movs	r0, r3
 8002854:	f001 f83a 	bl	80038cc <HAL_ADC_ConfigChannel>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d001      	beq.n	8002860 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 800285c:	f000 fa74 	bl	8002d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	2212      	movs	r2, #18
 8002864:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002866:	1d3a      	adds	r2, r7, #4
 8002868:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <MX_ADC_Init+0xfc>)
 800286a:	0011      	movs	r1, r2
 800286c:	0018      	movs	r0, r3
 800286e:	f001 f82d 	bl	80038cc <HAL_ADC_ConfigChannel>
 8002872:	1e03      	subs	r3, r0, #0
 8002874:	d001      	beq.n	800287a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8002876:	f000 fa67 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	b004      	add	sp, #16
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	20000378 	.word	0x20000378
 8002888:	40012400 	.word	0x40012400

0800288c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	0018      	movs	r0, r3
 8002896:	2314      	movs	r3, #20
 8002898:	001a      	movs	r2, r3
 800289a:	2100      	movs	r1, #0
 800289c:	f00b fe10 	bl	800e4c0 <memset>
  RTC_DateTypeDef sDate = {0};
 80028a0:	003b      	movs	r3, r7
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028a6:	4b28      	ldr	r3, [pc, #160]	@ (8002948 <MX_RTC_Init+0xbc>)
 80028a8:	4a28      	ldr	r2, [pc, #160]	@ (800294c <MX_RTC_Init+0xc0>)
 80028aa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028ac:	4b26      	ldr	r3, [pc, #152]	@ (8002948 <MX_RTC_Init+0xbc>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80028b2:	4b25      	ldr	r3, [pc, #148]	@ (8002948 <MX_RTC_Init+0xbc>)
 80028b4:	227f      	movs	r2, #127	@ 0x7f
 80028b6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80028b8:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <MX_RTC_Init+0xbc>)
 80028ba:	22ff      	movs	r2, #255	@ 0xff
 80028bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028be:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <MX_RTC_Init+0xbc>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028c4:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <MX_RTC_Init+0xbc>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002948 <MX_RTC_Init+0xbc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002948 <MX_RTC_Init+0xbc>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f004 fb40 	bl	8006f58 <HAL_RTC_Init>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d001      	beq.n	80028e0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80028dc:	f000 fa34 	bl	8002d48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	2200      	movs	r2, #0
 80028ea:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	2200      	movs	r2, #0
 80028f0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028fe:	1d39      	adds	r1, r7, #4
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <MX_RTC_Init+0xbc>)
 8002902:	2201      	movs	r2, #1
 8002904:	0018      	movs	r0, r3
 8002906:	f004 fbbf 	bl	8007088 <HAL_RTC_SetTime>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d001      	beq.n	8002912 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 800290e:	f000 fa1b 	bl	8002d48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002912:	003b      	movs	r3, r7
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002918:	003b      	movs	r3, r7
 800291a:	2201      	movs	r2, #1
 800291c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800291e:	003b      	movs	r3, r7
 8002920:	2201      	movs	r2, #1
 8002922:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002924:	003b      	movs	r3, r7
 8002926:	2200      	movs	r2, #0
 8002928:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800292a:	0039      	movs	r1, r7
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <MX_RTC_Init+0xbc>)
 800292e:	2201      	movs	r2, #1
 8002930:	0018      	movs	r0, r3
 8002932:	f004 fc4f 	bl	80071d4 <HAL_RTC_SetDate>
 8002936:	1e03      	subs	r3, r0, #0
 8002938:	d001      	beq.n	800293e <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 800293a:	f000 fa05 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b006      	add	sp, #24
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	200003fc 	.word	0x200003fc
 800294c:	40002800 	.word	0x40002800

08002950 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <MX_SPI2_Init+0x74>)
 8002956:	4a1c      	ldr	r2, [pc, #112]	@ (80029c8 <MX_SPI2_Init+0x78>)
 8002958:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800295a:	4b1a      	ldr	r3, [pc, #104]	@ (80029c4 <MX_SPI2_Init+0x74>)
 800295c:	2282      	movs	r2, #130	@ 0x82
 800295e:	0052      	lsls	r2, r2, #1
 8002960:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002962:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <MX_SPI2_Init+0x74>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002968:	4b16      	ldr	r3, [pc, #88]	@ (80029c4 <MX_SPI2_Init+0x74>)
 800296a:	22e0      	movs	r2, #224	@ 0xe0
 800296c:	00d2      	lsls	r2, r2, #3
 800296e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002970:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <MX_SPI2_Init+0x74>)
 8002972:	2202      	movs	r2, #2
 8002974:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002976:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <MX_SPI2_Init+0x74>)
 8002978:	2201      	movs	r2, #1
 800297a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800297c:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <MX_SPI2_Init+0x74>)
 800297e:	2280      	movs	r2, #128	@ 0x80
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <MX_SPI2_Init+0x74>)
 8002986:	2208      	movs	r2, #8
 8002988:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800298a:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <MX_SPI2_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <MX_SPI2_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <MX_SPI2_Init+0x74>)
 8002998:	2200      	movs	r2, #0
 800299a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800299c:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <MX_SPI2_Init+0x74>)
 800299e:	2207      	movs	r2, #7
 80029a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	@ (80029c4 <MX_SPI2_Init+0x74>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <MX_SPI2_Init+0x74>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029ae:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <MX_SPI2_Init+0x74>)
 80029b0:	0018      	movs	r0, r3
 80029b2:	f004 fd55 	bl	8007460 <HAL_SPI_Init>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80029ba:	f000 f9c5 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000041c 	.word	0x2000041c
 80029c8:	40003800 	.word	0x40003800

080029cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b08d      	sub	sp, #52	@ 0x34
 80029d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029d2:	240c      	movs	r4, #12
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	0018      	movs	r0, r3
 80029d8:	2324      	movs	r3, #36	@ 0x24
 80029da:	001a      	movs	r2, r3
 80029dc:	2100      	movs	r1, #0
 80029de:	f00b fd6f 	bl	800e4c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	0018      	movs	r0, r3
 80029e6:	2308      	movs	r3, #8
 80029e8:	001a      	movs	r2, r3
 80029ea:	2100      	movs	r1, #0
 80029ec:	f00b fd68 	bl	800e4c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029f0:	4b27      	ldr	r3, [pc, #156]	@ (8002a90 <MX_TIM1_Init+0xc4>)
 80029f2:	4a28      	ldr	r2, [pc, #160]	@ (8002a94 <MX_TIM1_Init+0xc8>)
 80029f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <MX_TIM1_Init+0xc4>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fc:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <MX_TIM1_Init+0xc4>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a02:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <MX_TIM1_Init+0xc4>)
 8002a04:	4a24      	ldr	r2, [pc, #144]	@ (8002a98 <MX_TIM1_Init+0xcc>)
 8002a06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a08:	4b21      	ldr	r3, [pc, #132]	@ (8002a90 <MX_TIM1_Init+0xc4>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <MX_TIM1_Init+0xc4>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a14:	4b1e      	ldr	r3, [pc, #120]	@ (8002a90 <MX_TIM1_Init+0xc4>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a1a:	0021      	movs	r1, r4
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	2201      	movs	r2, #1
 8002a44:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2200      	movs	r2, #0
 8002a50:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a52:	187a      	adds	r2, r7, r1
 8002a54:	4b0e      	ldr	r3, [pc, #56]	@ (8002a90 <MX_TIM1_Init+0xc4>)
 8002a56:	0011      	movs	r1, r2
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f005 f9ab 	bl	8007db4 <HAL_TIM_Encoder_Init>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002a62:	f000 f971 	bl	8002d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a72:	1d3a      	adds	r2, r7, #4
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <MX_TIM1_Init+0xc4>)
 8002a76:	0011      	movs	r1, r2
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f005 fb99 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7e:	1e03      	subs	r3, r0, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8002a82:	f000 f961 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b00d      	add	sp, #52	@ 0x34
 8002a8c:	bd90      	pop	{r4, r7, pc}
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	200004c4 	.word	0x200004c4
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	0000ffff 	.word	0x0000ffff

08002a9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b08d      	sub	sp, #52	@ 0x34
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002aa2:	240c      	movs	r4, #12
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	2324      	movs	r3, #36	@ 0x24
 8002aaa:	001a      	movs	r2, r3
 8002aac:	2100      	movs	r1, #0
 8002aae:	f00b fd07 	bl	800e4c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	001a      	movs	r2, r3
 8002aba:	2100      	movs	r1, #0
 8002abc:	f00b fd00 	bl	800e4c0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ac0:	4b25      	ldr	r3, [pc, #148]	@ (8002b58 <MX_TIM3_Init+0xbc>)
 8002ac2:	4a26      	ldr	r2, [pc, #152]	@ (8002b5c <MX_TIM3_Init+0xc0>)
 8002ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ac6:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <MX_TIM3_Init+0xbc>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002acc:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <MX_TIM3_Init+0xbc>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ad2:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <MX_TIM3_Init+0xbc>)
 8002ad4:	4a22      	ldr	r2, [pc, #136]	@ (8002b60 <MX_TIM3_Init+0xc4>)
 8002ad6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b58 <MX_TIM3_Init+0xbc>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ade:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <MX_TIM3_Init+0xbc>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ae4:	0021      	movs	r1, r4
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2200      	movs	r2, #0
 8002af0:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2201      	movs	r2, #1
 8002af6:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b1c:	187a      	adds	r2, r7, r1
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <MX_TIM3_Init+0xbc>)
 8002b20:	0011      	movs	r1, r2
 8002b22:	0018      	movs	r0, r3
 8002b24:	f005 f946 	bl	8007db4 <HAL_TIM_Encoder_Init>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002b2c:	f000 f90c 	bl	8002d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b3c:	1d3a      	adds	r2, r7, #4
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <MX_TIM3_Init+0xbc>)
 8002b40:	0011      	movs	r1, r2
 8002b42:	0018      	movs	r0, r3
 8002b44:	f005 fb34 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b48:	1e03      	subs	r3, r0, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002b4c:	f000 f8fc 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b50:	46c0      	nop			@ (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b00d      	add	sp, #52	@ 0x34
 8002b56:	bd90      	pop	{r4, r7, pc}
 8002b58:	2000050c 	.word	0x2000050c
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	0000ffff 	.word	0x0000ffff

08002b64 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002b6a:	4a15      	ldr	r2, [pc, #84]	@ (8002bc0 <MX_USART4_UART_Init+0x5c>)
 8002b6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002b70:	2296      	movs	r2, #150	@ 0x96
 8002b72:	0192      	lsls	r2, r2, #6
 8002b74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b76:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b94:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ba6:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <MX_USART4_UART_Init+0x58>)
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f005 fb5f 	bl	800826c <HAL_UART_Init>
 8002bae:	1e03      	subs	r3, r0, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8002bb2:	f000 f8c9 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000554 	.word	0x20000554
 8002bc0:	40004c00 	.word	0x40004c00

08002bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <MX_DMA_Init+0x48>)
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <MX_DMA_Init+0x48>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	615a      	str	r2, [r3, #20]
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <MX_DMA_Init+0x48>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	2009      	movs	r0, #9
 8002be8:	f001 f9da 	bl	8003fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bec:	2009      	movs	r0, #9
 8002bee:	f001 f9ec 	bl	8003fca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	200b      	movs	r0, #11
 8002bf8:	f001 f9d2 	bl	8003fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002bfc:	200b      	movs	r0, #11
 8002bfe:	f001 f9e4 	bl	8003fca <HAL_NVIC_EnableIRQ>

}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	40021000 	.word	0x40021000

08002c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b089      	sub	sp, #36	@ 0x24
 8002c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c16:	240c      	movs	r4, #12
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	2314      	movs	r3, #20
 8002c1e:	001a      	movs	r2, r3
 8002c20:	2100      	movs	r1, #0
 8002c22:	f00b fc4d 	bl	800e4c0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c26:	4b3e      	ldr	r3, [pc, #248]	@ (8002d20 <MX_GPIO_Init+0x110>)
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d20 <MX_GPIO_Init+0x110>)
 8002c2c:	2180      	movs	r1, #128	@ 0x80
 8002c2e:	0309      	lsls	r1, r1, #12
 8002c30:	430a      	orrs	r2, r1
 8002c32:	615a      	str	r2, [r3, #20]
 8002c34:	4b3a      	ldr	r3, [pc, #232]	@ (8002d20 <MX_GPIO_Init+0x110>)
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	031b      	lsls	r3, r3, #12
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	4b37      	ldr	r3, [pc, #220]	@ (8002d20 <MX_GPIO_Init+0x110>)
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	4b36      	ldr	r3, [pc, #216]	@ (8002d20 <MX_GPIO_Init+0x110>)
 8002c48:	2180      	movs	r1, #128	@ 0x80
 8002c4a:	0289      	lsls	r1, r1, #10
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	615a      	str	r2, [r3, #20]
 8002c50:	4b33      	ldr	r3, [pc, #204]	@ (8002d20 <MX_GPIO_Init+0x110>)
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	029b      	lsls	r3, r3, #10
 8002c58:	4013      	ands	r3, r2
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	4b30      	ldr	r3, [pc, #192]	@ (8002d20 <MX_GPIO_Init+0x110>)
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	4b2f      	ldr	r3, [pc, #188]	@ (8002d20 <MX_GPIO_Init+0x110>)
 8002c64:	2180      	movs	r1, #128	@ 0x80
 8002c66:	02c9      	lsls	r1, r1, #11
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	615a      	str	r2, [r3, #20]
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d20 <MX_GPIO_Init+0x110>)
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	2380      	movs	r3, #128	@ 0x80
 8002c72:	02db      	lsls	r3, r3, #11
 8002c74:	4013      	ands	r3, r2
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI5_RESET_Pin|SPI5_DC_Pin|SPI5_CS_Pin|LD4_Pin
 8002c7a:	23e3      	movs	r3, #227	@ 0xe3
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	4829      	ldr	r0, [pc, #164]	@ (8002d24 <MX_GPIO_Init+0x114>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	0019      	movs	r1, r3
 8002c84:	f001 fd31 	bl	80046ea <HAL_GPIO_WritePin>
                          |LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI5_RESET_Pin SPI5_DC_Pin SPI5_CS_Pin LD4_Pin
                           LD5_Pin */
  GPIO_InitStruct.Pin = SPI5_RESET_Pin|SPI5_DC_Pin|SPI5_CS_Pin|LD4_Pin
 8002c88:	193b      	adds	r3, r7, r4
 8002c8a:	22e3      	movs	r2, #227	@ 0xe3
 8002c8c:	0212      	lsls	r2, r2, #8
 8002c8e:	601a      	str	r2, [r3, #0]
                          |LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	2201      	movs	r2, #1
 8002c94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d24 <MX_GPIO_Init+0x114>)
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f001 fb89 	bl	80043c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002cc0:	193a      	adds	r2, r7, r4
 8002cc2:	2390      	movs	r3, #144	@ 0x90
 8002cc4:	05db      	lsls	r3, r3, #23
 8002cc6:	0011      	movs	r1, r2
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f001 fb79 	bl	80043c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	22c0      	movs	r2, #192	@ 0xc0
 8002cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	193b      	adds	r3, r7, r4
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	2203      	movs	r2, #3
 8002cea:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	193a      	adds	r2, r7, r4
 8002cee:	2390      	movs	r3, #144	@ 0x90
 8002cf0:	05db      	lsls	r3, r3, #23
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f001 fb63 	bl	80043c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : JoyBtn0_Pin JoyBtn1_Pin JoyBtn2_Pin JoyBtn3_Pin
                           JoyBtn4_Pin JoyBtn5_Pin JoyBtn6_Pin JoyBtn7_Pin */
  GPIO_InitStruct.Pin = JoyBtn0_Pin|JoyBtn1_Pin|JoyBtn2_Pin|JoyBtn3_Pin
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	22ff      	movs	r2, #255	@ 0xff
 8002cfe:	601a      	str	r2, [r3, #0]
                          |JoyBtn4_Pin|JoyBtn5_Pin|JoyBtn6_Pin|JoyBtn7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	2200      	movs	r2, #0
 8002d04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	2202      	movs	r2, #2
 8002d0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	4a06      	ldr	r2, [pc, #24]	@ (8002d28 <MX_GPIO_Init+0x118>)
 8002d10:	0019      	movs	r1, r3
 8002d12:	0010      	movs	r0, r2
 8002d14:	f001 fb54 	bl	80043c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b009      	add	sp, #36	@ 0x24
 8002d1e:	bd90      	pop	{r4, r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	48000800 	.word	0x48000800
 8002d28:	48000400 	.word	0x48000400

08002d2c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
// This function is automatically called when DMA completes a transfer
	dmaEnd = 1;
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <HAL_ADC_ConvCpltCallback+0x18>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]

}
 8002d3a:	46c0      	nop			@ (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	2000067e 	.word	0x2000067e

08002d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d4c:	b672      	cpsid	i
}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d50:	46c0      	nop			@ (mov r8, r8)
 8002d52:	e7fd      	b.n	8002d50 <Error_Handler+0x8>

08002d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d60:	2101      	movs	r1, #1
 8002d62:	430a      	orrs	r2, r1
 8002d64:	619a      	str	r2, [r3, #24]
 8002d66:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d78:	2180      	movs	r1, #128	@ 0x80
 8002d7a:	0549      	lsls	r1, r1, #21
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	61da      	str	r2, [r3, #28]
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	055b      	lsls	r3, r3, #21
 8002d88:	4013      	ands	r3, r2
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b002      	add	sp, #8
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	40021000 	.word	0x40021000

08002d9c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b08b      	sub	sp, #44	@ 0x2c
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	2414      	movs	r4, #20
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	0018      	movs	r0, r3
 8002daa:	2314      	movs	r3, #20
 8002dac:	001a      	movs	r2, r3
 8002dae:	2100      	movs	r1, #0
 8002db0:	f00b fb86 	bl	800e4c0 <memset>
  if(hadc->Instance==ADC1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2d      	ldr	r2, [pc, #180]	@ (8002e70 <HAL_ADC_MspInit+0xd4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d153      	bne.n	8002e66 <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002e74 <HAL_ADC_MspInit+0xd8>)
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e74 <HAL_ADC_MspInit+0xd8>)
 8002dc4:	2180      	movs	r1, #128	@ 0x80
 8002dc6:	0089      	lsls	r1, r1, #2
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	619a      	str	r2, [r3, #24]
 8002dcc:	4b29      	ldr	r3, [pc, #164]	@ (8002e74 <HAL_ADC_MspInit+0xd8>)
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	4b26      	ldr	r3, [pc, #152]	@ (8002e74 <HAL_ADC_MspInit+0xd8>)
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	4b25      	ldr	r3, [pc, #148]	@ (8002e74 <HAL_ADC_MspInit+0xd8>)
 8002de0:	2180      	movs	r1, #128	@ 0x80
 8002de2:	0289      	lsls	r1, r1, #10
 8002de4:	430a      	orrs	r2, r1
 8002de6:	615a      	str	r2, [r3, #20]
 8002de8:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <HAL_ADC_MspInit+0xd8>)
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = Joy1_Y_Pin|Joy2_Y_Pin|Joy_Z_Pin|Joy_Zr_Pin;
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	223a      	movs	r2, #58	@ 0x3a
 8002dfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	2203      	movs	r2, #3
 8002e00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e08:	193a      	adds	r2, r7, r4
 8002e0a:	2390      	movs	r3, #144	@ 0x90
 8002e0c:	05db      	lsls	r3, r3, #23
 8002e0e:	0011      	movs	r1, r2
 8002e10:	0018      	movs	r0, r3
 8002e12:	f001 fad5 	bl	80043c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002e16:	4b18      	ldr	r3, [pc, #96]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e18:	4a18      	ldr	r2, [pc, #96]	@ (8002e7c <HAL_ADC_MspInit+0xe0>)
 8002e1a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e1c:	4b16      	ldr	r3, [pc, #88]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e22:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002e28:	4b13      	ldr	r3, [pc, #76]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e2e:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e30:	2280      	movs	r2, #128	@ 0x80
 8002e32:	0052      	lsls	r2, r2, #1
 8002e34:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e36:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e38:	2280      	movs	r2, #128	@ 0x80
 8002e3a:	00d2      	lsls	r2, r2, #3
 8002e3c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e40:	2220      	movs	r2, #32
 8002e42:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002e44:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f001 f8d9 	bl	8004004 <HAL_DMA_Init>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002e56:	f7ff ff77 	bl	8002d48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a06      	ldr	r2, [pc, #24]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e60:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_ADC_MspInit+0xdc>)
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b00b      	add	sp, #44	@ 0x2c
 8002e6c:	bd90      	pop	{r4, r7, pc}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	40012400 	.word	0x40012400
 8002e74:	40021000 	.word	0x40021000
 8002e78:	200003b8 	.word	0x200003b8
 8002e7c:	40020008 	.word	0x40020008

08002e80 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ea8 <HAL_RTC_MspInit+0x28>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d106      	bne.n	8002ea0 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e92:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <HAL_RTC_MspInit+0x2c>)
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	4b05      	ldr	r3, [pc, #20]	@ (8002eac <HAL_RTC_MspInit+0x2c>)
 8002e98:	2180      	movs	r1, #128	@ 0x80
 8002e9a:	0209      	lsls	r1, r1, #8
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	621a      	str	r2, [r3, #32]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002ea0:	46c0      	nop			@ (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40002800 	.word	0x40002800
 8002eac:	40021000 	.word	0x40021000

08002eb0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b08b      	sub	sp, #44	@ 0x2c
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	2414      	movs	r4, #20
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	2314      	movs	r3, #20
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	f00b fafc 	bl	800e4c0 <memset>
  if(hspi->Instance==SPI2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a45      	ldr	r2, [pc, #276]	@ (8002fe4 <HAL_SPI_MspInit+0x134>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d000      	beq.n	8002ed4 <HAL_SPI_MspInit+0x24>
 8002ed2:	e083      	b.n	8002fdc <HAL_SPI_MspInit+0x12c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ed4:	4b44      	ldr	r3, [pc, #272]	@ (8002fe8 <HAL_SPI_MspInit+0x138>)
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	4b43      	ldr	r3, [pc, #268]	@ (8002fe8 <HAL_SPI_MspInit+0x138>)
 8002eda:	2180      	movs	r1, #128	@ 0x80
 8002edc:	01c9      	lsls	r1, r1, #7
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	61da      	str	r2, [r3, #28]
 8002ee2:	4b41      	ldr	r3, [pc, #260]	@ (8002fe8 <HAL_SPI_MspInit+0x138>)
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	2380      	movs	r3, #128	@ 0x80
 8002ee8:	01db      	lsls	r3, r3, #7
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe8 <HAL_SPI_MspInit+0x138>)
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fe8 <HAL_SPI_MspInit+0x138>)
 8002ef6:	2180      	movs	r1, #128	@ 0x80
 8002ef8:	0309      	lsls	r1, r1, #12
 8002efa:	430a      	orrs	r2, r1
 8002efc:	615a      	str	r2, [r3, #20]
 8002efe:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe8 <HAL_SPI_MspInit+0x138>)
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	031b      	lsls	r3, r3, #12
 8002f06:	4013      	ands	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0c:	4b36      	ldr	r3, [pc, #216]	@ (8002fe8 <HAL_SPI_MspInit+0x138>)
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	4b35      	ldr	r3, [pc, #212]	@ (8002fe8 <HAL_SPI_MspInit+0x138>)
 8002f12:	2180      	movs	r1, #128	@ 0x80
 8002f14:	02c9      	lsls	r1, r1, #11
 8002f16:	430a      	orrs	r2, r1
 8002f18:	615a      	str	r2, [r3, #20]
 8002f1a:	4b33      	ldr	r3, [pc, #204]	@ (8002fe8 <HAL_SPI_MspInit+0x138>)
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	2380      	movs	r3, #128	@ 0x80
 8002f20:	02db      	lsls	r3, r3, #11
 8002f22:	4013      	ands	r3, r2
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	2202      	movs	r2, #2
 8002f32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	193b      	adds	r3, r7, r4
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f3a:	193b      	adds	r3, r7, r4
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002f40:	193b      	adds	r3, r7, r4
 8002f42:	2201      	movs	r2, #1
 8002f44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	4a28      	ldr	r2, [pc, #160]	@ (8002fec <HAL_SPI_MspInit+0x13c>)
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	0010      	movs	r0, r2
 8002f4e:	f001 fa37 	bl	80043c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f52:	0021      	movs	r1, r4
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	2280      	movs	r2, #128	@ 0x80
 8002f58:	00d2      	lsls	r2, r2, #3
 8002f5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	2202      	movs	r2, #2
 8002f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f68:	187b      	adds	r3, r7, r1
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	2205      	movs	r2, #5
 8002f72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff0 <HAL_SPI_MspInit+0x140>)
 8002f78:	0019      	movs	r1, r3
 8002f7a:	0010      	movs	r0, r2
 8002f7c:	f001 fa20 	bl	80043c0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002f80:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002f82:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff8 <HAL_SPI_MspInit+0x148>)
 8002f84:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f86:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002f88:	2210      	movs	r2, #16
 8002f8a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f92:	4b18      	ldr	r3, [pc, #96]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002f94:	2280      	movs	r2, #128	@ 0x80
 8002f96:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f98:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002fa4:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002faa:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002fb0:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f001 f826 	bl	8004004 <HAL_DMA_Init>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8002fbc:	f7ff fec4 	bl	8002d48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <HAL_SPI_MspInit+0x144>)
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2100      	movs	r1, #0
 8002fd0:	201a      	movs	r0, #26
 8002fd2:	f000 ffe5 	bl	8003fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002fd6:	201a      	movs	r0, #26
 8002fd8:	f000 fff7 	bl	8003fca <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002fdc:	46c0      	nop			@ (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b00b      	add	sp, #44	@ 0x2c
 8002fe2:	bd90      	pop	{r4, r7, pc}
 8002fe4:	40003800 	.word	0x40003800
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	48000800 	.word	0x48000800
 8002ff0:	48000400 	.word	0x48000400
 8002ff4:	20000480 	.word	0x20000480
 8002ff8:	40020058 	.word	0x40020058

08002ffc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b08d      	sub	sp, #52	@ 0x34
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	241c      	movs	r4, #28
 8003006:	193b      	adds	r3, r7, r4
 8003008:	0018      	movs	r0, r3
 800300a:	2314      	movs	r3, #20
 800300c:	001a      	movs	r2, r3
 800300e:	2100      	movs	r1, #0
 8003010:	f00b fa56 	bl	800e4c0 <memset>
  if(htim_encoder->Instance==TIM1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a38      	ldr	r2, [pc, #224]	@ (80030fc <HAL_TIM_Encoder_MspInit+0x100>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d134      	bne.n	8003088 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800301e:	4b38      	ldr	r3, [pc, #224]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	4b37      	ldr	r3, [pc, #220]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 8003024:	2180      	movs	r1, #128	@ 0x80
 8003026:	0109      	lsls	r1, r1, #4
 8003028:	430a      	orrs	r2, r1
 800302a:	619a      	str	r2, [r3, #24]
 800302c:	4b34      	ldr	r3, [pc, #208]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	4b31      	ldr	r3, [pc, #196]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	4b30      	ldr	r3, [pc, #192]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 8003040:	2180      	movs	r1, #128	@ 0x80
 8003042:	0289      	lsls	r1, r1, #10
 8003044:	430a      	orrs	r2, r1
 8003046:	615a      	str	r2, [r3, #20]
 8003048:	4b2d      	ldr	r3, [pc, #180]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	2380      	movs	r3, #128	@ 0x80
 800304e:	029b      	lsls	r3, r3, #10
 8003050:	4013      	ands	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Enc2_1_Pin|Enc2_2_Pin;
 8003056:	193b      	adds	r3, r7, r4
 8003058:	22c0      	movs	r2, #192	@ 0xc0
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	0021      	movs	r1, r4
 8003060:	187b      	adds	r3, r7, r1
 8003062:	2202      	movs	r2, #2
 8003064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003066:	187b      	adds	r3, r7, r1
 8003068:	2201      	movs	r2, #1
 800306a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	187b      	adds	r3, r7, r1
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003072:	187b      	adds	r3, r7, r1
 8003074:	2202      	movs	r2, #2
 8003076:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003078:	187a      	adds	r2, r7, r1
 800307a:	2390      	movs	r3, #144	@ 0x90
 800307c:	05db      	lsls	r3, r3, #23
 800307e:	0011      	movs	r1, r2
 8003080:	0018      	movs	r0, r3
 8003082:	f001 f99d 	bl	80043c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003086:	e034      	b.n	80030f2 <HAL_TIM_Encoder_MspInit+0xf6>
  else if(htim_encoder->Instance==TIM3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1d      	ldr	r2, [pc, #116]	@ (8003104 <HAL_TIM_Encoder_MspInit+0x108>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d12f      	bne.n	80030f2 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003092:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	4b1a      	ldr	r3, [pc, #104]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 8003098:	2102      	movs	r1, #2
 800309a:	430a      	orrs	r2, r1
 800309c:	61da      	str	r2, [r3, #28]
 800309e:	4b18      	ldr	r3, [pc, #96]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	2202      	movs	r2, #2
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030aa:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	4b14      	ldr	r3, [pc, #80]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 80030b0:	2180      	movs	r1, #128	@ 0x80
 80030b2:	0309      	lsls	r1, r1, #12
 80030b4:	430a      	orrs	r2, r1
 80030b6:	615a      	str	r2, [r3, #20]
 80030b8:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <HAL_TIM_Encoder_MspInit+0x104>)
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	031b      	lsls	r3, r3, #12
 80030c0:	4013      	ands	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Enc1_1_Pin|Enc1_2_Pin;
 80030c6:	211c      	movs	r1, #28
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	22c0      	movs	r2, #192	@ 0xc0
 80030cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	187b      	adds	r3, r7, r1
 80030d0:	2202      	movs	r2, #2
 80030d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d4:	187b      	adds	r3, r7, r1
 80030d6:	2201      	movs	r2, #1
 80030d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	2200      	movs	r2, #0
 80030de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	4a07      	ldr	r2, [pc, #28]	@ (8003108 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030ea:	0019      	movs	r1, r3
 80030ec:	0010      	movs	r0, r2
 80030ee:	f001 f967 	bl	80043c0 <HAL_GPIO_Init>
}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b00d      	add	sp, #52	@ 0x34
 80030f8:	bd90      	pop	{r4, r7, pc}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40021000 	.word	0x40021000
 8003104:	40000400 	.word	0x40000400
 8003108:	48000800 	.word	0x48000800

0800310c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b08b      	sub	sp, #44	@ 0x2c
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	2414      	movs	r4, #20
 8003116:	193b      	adds	r3, r7, r4
 8003118:	0018      	movs	r0, r3
 800311a:	2314      	movs	r3, #20
 800311c:	001a      	movs	r2, r3
 800311e:	2100      	movs	r1, #0
 8003120:	f00b f9ce 	bl	800e4c0 <memset>
  if(huart->Instance==USART4)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1c      	ldr	r2, [pc, #112]	@ (800319c <HAL_UART_MspInit+0x90>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d132      	bne.n	8003194 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART4_MspInit 0 */

    /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 800312e:	4b1c      	ldr	r3, [pc, #112]	@ (80031a0 <HAL_UART_MspInit+0x94>)
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <HAL_UART_MspInit+0x94>)
 8003134:	2180      	movs	r1, #128	@ 0x80
 8003136:	0309      	lsls	r1, r1, #12
 8003138:	430a      	orrs	r2, r1
 800313a:	61da      	str	r2, [r3, #28]
 800313c:	4b18      	ldr	r3, [pc, #96]	@ (80031a0 <HAL_UART_MspInit+0x94>)
 800313e:	69da      	ldr	r2, [r3, #28]
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	031b      	lsls	r3, r3, #12
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800314a:	4b15      	ldr	r3, [pc, #84]	@ (80031a0 <HAL_UART_MspInit+0x94>)
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	4b14      	ldr	r3, [pc, #80]	@ (80031a0 <HAL_UART_MspInit+0x94>)
 8003150:	2180      	movs	r1, #128	@ 0x80
 8003152:	0309      	lsls	r1, r1, #12
 8003154:	430a      	orrs	r2, r1
 8003156:	615a      	str	r2, [r3, #20]
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <HAL_UART_MspInit+0x94>)
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	2380      	movs	r3, #128	@ 0x80
 800315e:	031b      	lsls	r3, r3, #12
 8003160:	4013      	ands	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
    /**USART4 GPIO Configuration
    PC10     ------> USART4_TX
    PC11     ------> USART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003166:	193b      	adds	r3, r7, r4
 8003168:	22c0      	movs	r2, #192	@ 0xc0
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	0021      	movs	r1, r4
 8003170:	187b      	adds	r3, r7, r1
 8003172:	2202      	movs	r2, #2
 8003174:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	187b      	adds	r3, r7, r1
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800317c:	187b      	adds	r3, r7, r1
 800317e:	2203      	movs	r2, #3
 8003180:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART4;
 8003182:	187b      	adds	r3, r7, r1
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003188:	187b      	adds	r3, r7, r1
 800318a:	4a06      	ldr	r2, [pc, #24]	@ (80031a4 <HAL_UART_MspInit+0x98>)
 800318c:	0019      	movs	r1, r3
 800318e:	0010      	movs	r0, r2
 8003190:	f001 f916 	bl	80043c0 <HAL_GPIO_Init>

    /* USER CODE END USART4_MspInit 1 */

  }

}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b00b      	add	sp, #44	@ 0x2c
 800319a:	bd90      	pop	{r4, r7, pc}
 800319c:	40004c00 	.word	0x40004c00
 80031a0:	40021000 	.word	0x40021000
 80031a4:	48000800 	.word	0x48000800

080031a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031ac:	46c0      	nop			@ (mov r8, r8)
 80031ae:	e7fd      	b.n	80031ac <NMI_Handler+0x4>

080031b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b4:	46c0      	nop			@ (mov r8, r8)
 80031b6:	e7fd      	b.n	80031b4 <HardFault_Handler+0x4>

080031b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031bc:	46c0      	nop			@ (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d0:	f000 f96a 	bl	80034a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80031e0:	4b03      	ldr	r3, [pc, #12]	@ (80031f0 <DMA1_Channel1_IRQHandler+0x14>)
 80031e2:	0018      	movs	r0, r3
 80031e4:	f001 f801 	bl	80041ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031e8:	46c0      	nop			@ (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	200003b8 	.word	0x200003b8

080031f4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80031f8:	4b03      	ldr	r3, [pc, #12]	@ (8003208 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 fff5 	bl	80041ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003200:	46c0      	nop			@ (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	20000480 	.word	0x20000480

0800320c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003210:	4b03      	ldr	r3, [pc, #12]	@ (8003220 <SPI2_IRQHandler+0x14>)
 8003212:	0018      	movs	r0, r3
 8003214:	f004 fb3c 	bl	8007890 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003218:	46c0      	nop			@ (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	2000041c 	.word	0x2000041c

08003224 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003228:	4b03      	ldr	r3, [pc, #12]	@ (8003238 <USB_IRQHandler+0x14>)
 800322a:	0018      	movs	r0, r3
 800322c:	f001 fb94 	bl	8004958 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	20000b5c 	.word	0x20000b5c

0800323c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  return 1;
 8003240:	2301      	movs	r3, #1
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_kill>:

int _kill(int pid, int sig)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003252:	f00b f98f 	bl	800e574 <__errno>
 8003256:	0003      	movs	r3, r0
 8003258:	2216      	movs	r2, #22
 800325a:	601a      	str	r2, [r3, #0]
  return -1;
 800325c:	2301      	movs	r3, #1
 800325e:	425b      	negs	r3, r3
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <_exit>:

void _exit (int status)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003270:	2301      	movs	r3, #1
 8003272:	425a      	negs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0011      	movs	r1, r2
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff ffe5 	bl	8003248 <_kill>
  while (1) {}    /* Make sure we hang here */
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	e7fd      	b.n	800327e <_exit+0x16>

08003282 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e00a      	b.n	80032aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003294:	e000      	b.n	8003298 <_read+0x16>
 8003296:	bf00      	nop
 8003298:	0001      	movs	r1, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	60ba      	str	r2, [r7, #8]
 80032a0:	b2ca      	uxtb	r2, r1
 80032a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3301      	adds	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	dbf0      	blt.n	8003294 <_read+0x12>
  }

  return len;
 80032b2:	687b      	ldr	r3, [r7, #4]
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b006      	add	sp, #24
 80032ba:	bd80      	pop	{r7, pc}

080032bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e009      	b.n	80032e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	60ba      	str	r2, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	0018      	movs	r0, r3
 80032d8:	e000      	b.n	80032dc <_write+0x20>
 80032da:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3301      	adds	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	dbf1      	blt.n	80032ce <_write+0x12>
  }
  return len;
 80032ea:	687b      	ldr	r3, [r7, #4]
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b006      	add	sp, #24
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_close>:

int _close(int file)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032fc:	2301      	movs	r3, #1
 80032fe:	425b      	negs	r3, r3
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2280      	movs	r2, #128	@ 0x80
 8003316:	0192      	lsls	r2, r2, #6
 8003318:	605a      	str	r2, [r3, #4]
  return 0;
 800331a:	2300      	movs	r3, #0
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b002      	add	sp, #8
 8003322:	bd80      	pop	{r7, pc}

08003324 <_isatty>:

int _isatty(int file)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800332c:	2301      	movs	r3, #1
}
 800332e:	0018      	movs	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	b002      	add	sp, #8
 8003334:	bd80      	pop	{r7, pc}

08003336 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003342:	2300      	movs	r3, #0
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}

0800334c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003354:	4a14      	ldr	r2, [pc, #80]	@ (80033a8 <_sbrk+0x5c>)
 8003356:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <_sbrk+0x60>)
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003360:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <_sbrk+0x64>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003368:	4b11      	ldr	r3, [pc, #68]	@ (80033b0 <_sbrk+0x64>)
 800336a:	4a12      	ldr	r2, [pc, #72]	@ (80033b4 <_sbrk+0x68>)
 800336c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800336e:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	18d3      	adds	r3, r2, r3
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	429a      	cmp	r2, r3
 800337a:	d207      	bcs.n	800338c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800337c:	f00b f8fa 	bl	800e574 <__errno>
 8003380:	0003      	movs	r3, r0
 8003382:	220c      	movs	r2, #12
 8003384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003386:	2301      	movs	r3, #1
 8003388:	425b      	negs	r3, r3
 800338a:	e009      	b.n	80033a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800338c:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <_sbrk+0x64>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003392:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <_sbrk+0x64>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	18d2      	adds	r2, r2, r3
 800339a:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <_sbrk+0x64>)
 800339c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b006      	add	sp, #24
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20004000 	.word	0x20004000
 80033ac:	00000400 	.word	0x00000400
 80033b0:	20000688 	.word	0x20000688
 80033b4:	20000fe0 	.word	0x20000fe0

080033b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80033bc:	46c0      	nop			@ (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033c4:	480d      	ldr	r0, [pc, #52]	@ (80033fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033c8:	f7ff fff6 	bl	80033b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033cc:	480c      	ldr	r0, [pc, #48]	@ (8003400 <LoopForever+0x6>)
  ldr r1, =_edata
 80033ce:	490d      	ldr	r1, [pc, #52]	@ (8003404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003408 <LoopForever+0xe>)
  movs r3, #0
 80033d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033d4:	e002      	b.n	80033dc <LoopCopyDataInit>

080033d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033da:	3304      	adds	r3, #4

080033dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e0:	d3f9      	bcc.n	80033d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033e2:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <LoopForever+0x12>)
  ldr r4, =_ebss
 80033e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003410 <LoopForever+0x16>)
  movs r3, #0
 80033e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033e8:	e001      	b.n	80033ee <LoopFillZerobss>

080033ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033ec:	3204      	adds	r2, #4

080033ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f0:	d3fb      	bcc.n	80033ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033f2:	f00b f8c5 	bl	800e580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033f6:	f7ff f815 	bl	8002424 <main>

080033fa <LoopForever>:

LoopForever:
    b LoopForever
 80033fa:	e7fe      	b.n	80033fa <LoopForever>
  ldr   r0, =_estack
 80033fc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003404:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8003408:	0801120c 	.word	0x0801120c
  ldr r2, =_sbss
 800340c:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8003410:	20000fe0 	.word	0x20000fe0

08003414 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003414:	e7fe      	b.n	8003414 <ADC1_COMP_IRQHandler>
	...

08003418 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800341c:	4b07      	ldr	r3, [pc, #28]	@ (800343c <HAL_Init+0x24>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b06      	ldr	r3, [pc, #24]	@ (800343c <HAL_Init+0x24>)
 8003422:	2110      	movs	r1, #16
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003428:	2000      	movs	r0, #0
 800342a:	f000 f809 	bl	8003440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800342e:	f7ff fc91 	bl	8002d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	40022000 	.word	0x40022000

08003440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003448:	4b14      	ldr	r3, [pc, #80]	@ (800349c <HAL_InitTick+0x5c>)
 800344a:	681c      	ldr	r4, [r3, #0]
 800344c:	4b14      	ldr	r3, [pc, #80]	@ (80034a0 <HAL_InitTick+0x60>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	0019      	movs	r1, r3
 8003452:	23fa      	movs	r3, #250	@ 0xfa
 8003454:	0098      	lsls	r0, r3, #2
 8003456:	f7fc fe73 	bl	8000140 <__udivsi3>
 800345a:	0003      	movs	r3, r0
 800345c:	0019      	movs	r1, r3
 800345e:	0020      	movs	r0, r4
 8003460:	f7fc fe6e 	bl	8000140 <__udivsi3>
 8003464:	0003      	movs	r3, r0
 8003466:	0018      	movs	r0, r3
 8003468:	f000 fdbf 	bl	8003fea <HAL_SYSTICK_Config>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d001      	beq.n	8003474 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e00f      	b.n	8003494 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d80b      	bhi.n	8003492 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	2301      	movs	r3, #1
 800347e:	425b      	negs	r3, r3
 8003480:	2200      	movs	r2, #0
 8003482:	0018      	movs	r0, r3
 8003484:	f000 fd8c 	bl	8003fa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_InitTick+0x64>)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b003      	add	sp, #12
 800349a:	bd90      	pop	{r4, r7, pc}
 800349c:	20000000 	.word	0x20000000
 80034a0:	20000008 	.word	0x20000008
 80034a4:	20000004 	.word	0x20000004

080034a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <HAL_IncTick+0x1c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	001a      	movs	r2, r3
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_IncTick+0x20>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	18d2      	adds	r2, r2, r3
 80034b8:	4b03      	ldr	r3, [pc, #12]	@ (80034c8 <HAL_IncTick+0x20>)
 80034ba:	601a      	str	r2, [r3, #0]
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	20000008 	.word	0x20000008
 80034c8:	2000068c 	.word	0x2000068c

080034cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  return uwTick;
 80034d0:	4b02      	ldr	r3, [pc, #8]	@ (80034dc <HAL_GetTick+0x10>)
 80034d2:	681b      	ldr	r3, [r3, #0]
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	2000068c 	.word	0x2000068c

080034e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff fff0 	bl	80034cc <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3301      	adds	r3, #1
 80034f8:	d005      	beq.n	8003506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_Delay+0x44>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	001a      	movs	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	189b      	adds	r3, r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	f7ff ffe0 	bl	80034cc <HAL_GetTick>
 800350c:	0002      	movs	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	429a      	cmp	r2, r3
 8003516:	d8f7      	bhi.n	8003508 <HAL_Delay+0x28>
  {
  }
}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46c0      	nop			@ (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	b004      	add	sp, #16
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	20000008 	.word	0x20000008

08003528 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003530:	230f      	movs	r3, #15
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e125      	b.n	8003792 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2234      	movs	r2, #52	@ 0x34
 8003558:	2100      	movs	r1, #0
 800355a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	0018      	movs	r0, r3
 8003560:	f7ff fc1c 	bl	8002d9c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	2210      	movs	r2, #16
 800356a:	4013      	ands	r3, r2
 800356c:	d000      	beq.n	8003570 <HAL_ADC_Init+0x48>
 800356e:	e103      	b.n	8003778 <HAL_ADC_Init+0x250>
 8003570:	230f      	movs	r3, #15
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d000      	beq.n	800357c <HAL_ADC_Init+0x54>
 800357a:	e0fd      	b.n	8003778 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2204      	movs	r2, #4
 8003584:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003586:	d000      	beq.n	800358a <HAL_ADC_Init+0x62>
 8003588:	e0f6      	b.n	8003778 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358e:	4a83      	ldr	r2, [pc, #524]	@ (800379c <HAL_ADC_Init+0x274>)
 8003590:	4013      	ands	r3, r2
 8003592:	2202      	movs	r2, #2
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2203      	movs	r2, #3
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d112      	bne.n	80035ce <HAL_ADC_Init+0xa6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2201      	movs	r2, #1
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d009      	beq.n	80035ca <HAL_ADC_Init+0xa2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	2380      	movs	r3, #128	@ 0x80
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	401a      	ands	r2, r3
 80035c2:	2380      	movs	r3, #128	@ 0x80
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_Init+0xa6>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_ADC_Init+0xa8>
 80035ce:	2300      	movs	r3, #0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d116      	bne.n	8003602 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2218      	movs	r2, #24
 80035dc:	4393      	bics	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	0899      	lsrs	r1, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4964      	ldr	r1, [pc, #400]	@ (80037a0 <HAL_ADC_Init+0x278>)
 800360e:	400a      	ands	r2, r1
 8003610:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7e1b      	ldrb	r3, [r3, #24]
 8003616:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7e5b      	ldrb	r3, [r3, #25]
 800361c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800361e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	7e9b      	ldrb	r3, [r3, #26]
 8003624:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003626:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362c:	2b01      	cmp	r3, #1
 800362e:	d002      	beq.n	8003636 <HAL_ADC_Init+0x10e>
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	015b      	lsls	r3, r3, #5
 8003634:	e000      	b.n	8003638 <HAL_ADC_Init+0x110>
 8003636:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003638:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800363e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d101      	bne.n	800364c <HAL_ADC_Init+0x124>
 8003648:	2304      	movs	r3, #4
 800364a:	e000      	b.n	800364e <HAL_ADC_Init+0x126>
 800364c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800364e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2124      	movs	r1, #36	@ 0x24
 8003654:	5c5b      	ldrb	r3, [r3, r1]
 8003656:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003658:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	7edb      	ldrb	r3, [r3, #27]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d115      	bne.n	8003694 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7e9b      	ldrb	r3, [r3, #26]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2280      	movs	r2, #128	@ 0x80
 8003674:	0252      	lsls	r2, r2, #9
 8003676:	4313      	orrs	r3, r2
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	e00b      	b.n	8003694 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	2220      	movs	r2, #32
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368c:	2201      	movs	r2, #1
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	23c2      	movs	r3, #194	@ 0xc2
 800369a:	33ff      	adds	r3, #255	@ 0xff
 800369c:	429a      	cmp	r2, r3
 800369e:	d007      	beq.n	80036b0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80036a8:	4313      	orrs	r3, r2
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68d9      	ldr	r1, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	430a      	orrs	r2, r1
 80036be:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	055b      	lsls	r3, r3, #21
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d01b      	beq.n	8003704 <HAL_ADC_Init+0x1dc>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d017      	beq.n	8003704 <HAL_ADC_Init+0x1dc>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d013      	beq.n	8003704 <HAL_ADC_Init+0x1dc>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d00f      	beq.n	8003704 <HAL_ADC_Init+0x1dc>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d00b      	beq.n	8003704 <HAL_ADC_Init+0x1dc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d007      	beq.n	8003704 <HAL_ADC_Init+0x1dc>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d003      	beq.n	8003704 <HAL_ADC_Init+0x1dc>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	2b07      	cmp	r3, #7
 8003702:	d112      	bne.n	800372a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2107      	movs	r1, #7
 8003710:	438a      	bics	r2, r1
 8003712:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6959      	ldr	r1, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	2207      	movs	r2, #7
 8003720:	401a      	ands	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a1c      	ldr	r2, [pc, #112]	@ (80037a4 <HAL_ADC_Init+0x27c>)
 8003732:	4013      	ands	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	429a      	cmp	r2, r3
 8003738:	d10b      	bne.n	8003752 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003744:	2203      	movs	r2, #3
 8003746:	4393      	bics	r3, r2
 8003748:	2201      	movs	r2, #1
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003750:	e01c      	b.n	800378c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003756:	2212      	movs	r2, #18
 8003758:	4393      	bics	r3, r2
 800375a:	2210      	movs	r2, #16
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003766:	2201      	movs	r2, #1
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800376e:	230f      	movs	r3, #15
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003776:	e009      	b.n	800378c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	2210      	movs	r2, #16
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003784:	230f      	movs	r3, #15
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800378c:	230f      	movs	r3, #15
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	781b      	ldrb	r3, [r3, #0]
}
 8003792:	0018      	movs	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	b004      	add	sp, #16
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	fffffefd 	.word	0xfffffefd
 80037a0:	fffe0219 	.word	0xfffe0219
 80037a4:	833fffe7 	.word	0x833fffe7

080037a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b4:	2317      	movs	r3, #23
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2204      	movs	r2, #4
 80037c4:	4013      	ands	r3, r2
 80037c6:	d15e      	bne.n	8003886 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2234      	movs	r2, #52	@ 0x34
 80037cc:	5c9b      	ldrb	r3, [r3, r2]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_Start_DMA+0x2e>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e05e      	b.n	8003894 <HAL_ADC_Start_DMA+0xec>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2234      	movs	r2, #52	@ 0x34
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	7e5b      	ldrb	r3, [r3, #25]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d007      	beq.n	80037f6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80037e6:	2317      	movs	r3, #23
 80037e8:	18fc      	adds	r4, r7, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 f97b 	bl	8003ae8 <ADC_Enable>
 80037f2:	0003      	movs	r3, r0
 80037f4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037f6:	2317      	movs	r3, #23
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d146      	bne.n	800388e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	4a25      	ldr	r2, [pc, #148]	@ (800389c <HAL_ADC_Start_DMA+0xf4>)
 8003806:	4013      	ands	r3, r2
 8003808:	2280      	movs	r2, #128	@ 0x80
 800380a:	0052      	lsls	r2, r2, #1
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2234      	movs	r2, #52	@ 0x34
 800381c:	2100      	movs	r1, #0
 800381e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	4a1e      	ldr	r2, [pc, #120]	@ (80038a0 <HAL_ADC_Start_DMA+0xf8>)
 8003826:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382c:	4a1d      	ldr	r2, [pc, #116]	@ (80038a4 <HAL_ADC_Start_DMA+0xfc>)
 800382e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	4a1c      	ldr	r2, [pc, #112]	@ (80038a8 <HAL_ADC_Start_DMA+0x100>)
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	221c      	movs	r2, #28
 800383e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2110      	movs	r1, #16
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2101      	movs	r1, #1
 800385c:	430a      	orrs	r2, r1
 800385e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3340      	adds	r3, #64	@ 0x40
 800386a:	0019      	movs	r1, r3
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f000 fc10 	bl	8004094 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2104      	movs	r1, #4
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	e003      	b.n	800388e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003886:	2317      	movs	r3, #23
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2202      	movs	r2, #2
 800388c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800388e:	2317      	movs	r3, #23
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	781b      	ldrb	r3, [r3, #0]
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b007      	add	sp, #28
 800389a:	bd90      	pop	{r4, r7, pc}
 800389c:	fffff0fe 	.word	0xfffff0fe
 80038a0:	08003bf1 	.word	0x08003bf1
 80038a4:	08003ca5 	.word	0x08003ca5
 80038a8:	08003cc3 	.word	0x08003cc3

080038ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038b4:	46c0      	nop			@ (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b002      	add	sp, #8
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038c4:	46c0      	nop			@ (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d6:	230f      	movs	r3, #15
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e6:	2380      	movs	r3, #128	@ 0x80
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d011      	beq.n	8003912 <HAL_ADC_ConfigChannel+0x46>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d00d      	beq.n	8003912 <HAL_ADC_ConfigChannel+0x46>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d009      	beq.n	8003912 <HAL_ADC_ConfigChannel+0x46>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	2b03      	cmp	r3, #3
 8003904:	d005      	beq.n	8003912 <HAL_ADC_ConfigChannel+0x46>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	2b04      	cmp	r3, #4
 800390c:	d001      	beq.n	8003912 <HAL_ADC_ConfigChannel+0x46>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2234      	movs	r2, #52	@ 0x34
 8003916:	5c9b      	ldrb	r3, [r3, r2]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x54>
 800391c:	2302      	movs	r3, #2
 800391e:	e0d0      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x1f6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2234      	movs	r2, #52	@ 0x34
 8003924:	2101      	movs	r1, #1
 8003926:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2204      	movs	r2, #4
 8003930:	4013      	ands	r3, r2
 8003932:	d000      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x6a>
 8003934:	e0b4      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a64      	ldr	r2, [pc, #400]	@ (8003acc <HAL_ADC_ConfigChannel+0x200>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d100      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x76>
 8003940:	e082      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	409a      	lsls	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395c:	2380      	movs	r3, #128	@ 0x80
 800395e:	055b      	lsls	r3, r3, #21
 8003960:	429a      	cmp	r2, r3
 8003962:	d037      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x108>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d033      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x108>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	2b02      	cmp	r3, #2
 8003972:	d02f      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x108>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	2b03      	cmp	r3, #3
 800397a:	d02b      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x108>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	2b04      	cmp	r3, #4
 8003982:	d027      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x108>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	2b05      	cmp	r3, #5
 800398a:	d023      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x108>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003990:	2b06      	cmp	r3, #6
 8003992:	d01f      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x108>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	2b07      	cmp	r3, #7
 800399a:	d01b      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	2107      	movs	r1, #7
 80039a8:	400b      	ands	r3, r1
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d012      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2107      	movs	r1, #7
 80039ba:	438a      	bics	r2, r1
 80039bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6959      	ldr	r1, [r3, #20]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2207      	movs	r2, #7
 80039ca:	401a      	ands	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d007      	beq.n	80039ec <HAL_ADC_ConfigChannel+0x120>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b11      	cmp	r3, #17
 80039e2:	d003      	beq.n	80039ec <HAL_ADC_ConfigChannel+0x120>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b12      	cmp	r3, #18
 80039ea:	d163      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80039ec:	4b38      	ldr	r3, [pc, #224]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x204>)
 80039ee:	6819      	ldr	r1, [r3, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d009      	beq.n	8003a0c <HAL_ADC_ConfigChannel+0x140>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b11      	cmp	r3, #17
 80039fe:	d102      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x13a>
 8003a00:	2380      	movs	r3, #128	@ 0x80
 8003a02:	03db      	lsls	r3, r3, #15
 8003a04:	e004      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x144>
 8003a06:	2380      	movs	r3, #128	@ 0x80
 8003a08:	045b      	lsls	r3, r3, #17
 8003a0a:	e001      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x144>
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x204>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d14a      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x208>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	492d      	ldr	r1, [pc, #180]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x20c>)
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7fc fb8b 	bl	8000140 <__udivsi3>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	001a      	movs	r2, r3
 8003a2e:	0013      	movs	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a38:	e002      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f9      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x16e>
 8003a46:	e035      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2101      	movs	r1, #1
 8003a54:	4099      	lsls	r1, r3
 8003a56:	000b      	movs	r3, r1
 8003a58:	43d9      	mvns	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	400a      	ands	r2, r1
 8003a60:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d007      	beq.n	8003a7a <HAL_ADC_ConfigChannel+0x1ae>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b11      	cmp	r3, #17
 8003a70:	d003      	beq.n	8003a7a <HAL_ADC_ConfigChannel+0x1ae>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b12      	cmp	r3, #18
 8003a78:	d11c      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x204>)
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d007      	beq.n	8003a96 <HAL_ADC_ConfigChannel+0x1ca>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b11      	cmp	r3, #17
 8003a8c:	d101      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x1c6>
 8003a8e:	4b13      	ldr	r3, [pc, #76]	@ (8003adc <HAL_ADC_ConfigChannel+0x210>)
 8003a90:	e002      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x1cc>
 8003a92:	4b13      	ldr	r3, [pc, #76]	@ (8003ae0 <HAL_ADC_ConfigChannel+0x214>)
 8003a94:	e000      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x1cc>
 8003a96:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x218>)
 8003a98:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x204>)
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e009      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003aac:	230f      	movs	r3, #15
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2234      	movs	r2, #52	@ 0x34
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003abc:	230f      	movs	r3, #15
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	781b      	ldrb	r3, [r3, #0]
}
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b004      	add	sp, #16
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	00001001 	.word	0x00001001
 8003ad0:	40012708 	.word	0x40012708
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	000f4240 	.word	0x000f4240
 8003adc:	ffbfffff 	.word	0xffbfffff
 8003ae0:	feffffff 	.word	0xfeffffff
 8003ae4:	ff7fffff 	.word	0xff7fffff

08003ae8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2203      	movs	r2, #3
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d112      	bne.n	8003b2c <ADC_Enable+0x44>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d009      	beq.n	8003b28 <ADC_Enable+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	2380      	movs	r3, #128	@ 0x80
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	401a      	ands	r2, r3
 8003b20:	2380      	movs	r3, #128	@ 0x80
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d101      	bne.n	8003b2c <ADC_Enable+0x44>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <ADC_Enable+0x46>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d152      	bne.n	8003bd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a2a      	ldr	r2, [pc, #168]	@ (8003be4 <ADC_Enable+0xfc>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d00d      	beq.n	8003b5a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b42:	2210      	movs	r2, #16
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e03f      	b.n	8003bda <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003be8 <ADC_Enable+0x100>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	491f      	ldr	r1, [pc, #124]	@ (8003bec <ADC_Enable+0x104>)
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7fc fae5 	bl	8000140 <__udivsi3>
 8003b76:	0003      	movs	r3, r0
 8003b78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b7a:	e002      	b.n	8003b82 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f9      	bne.n	8003b7c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b88:	f7ff fca0 	bl	80034cc <HAL_GetTick>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b90:	e01b      	b.n	8003bca <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b92:	f7ff fc9b 	bl	80034cc <HAL_GetTick>
 8003b96:	0002      	movs	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d914      	bls.n	8003bca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d00d      	beq.n	8003bca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	2210      	movs	r2, #16
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e007      	b.n	8003bda <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d1dc      	bne.n	8003b92 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b004      	add	sp, #16
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	80000017 	.word	0x80000017
 8003be8:	20000000 	.word	0x20000000
 8003bec:	000f4240 	.word	0x000f4240

08003bf0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c02:	2250      	movs	r2, #80	@ 0x50
 8003c04:	4013      	ands	r3, r2
 8003c06:	d140      	bne.n	8003c8a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0c:	2280      	movs	r2, #128	@ 0x80
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	23c0      	movs	r3, #192	@ 0xc0
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	4013      	ands	r3, r2
 8003c22:	d12d      	bne.n	8003c80 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d129      	bne.n	8003c80 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2208      	movs	r2, #8
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d122      	bne.n	8003c80 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2204      	movs	r2, #4
 8003c42:	4013      	ands	r3, r2
 8003c44:	d110      	bne.n	8003c68 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	210c      	movs	r1, #12
 8003c52:	438a      	bics	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5a:	4a11      	ldr	r2, [pc, #68]	@ (8003ca0 <ADC_DMAConvCplt+0xb0>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2201      	movs	r2, #1
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c66:	e00b      	b.n	8003c80 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c78:	2201      	movs	r2, #1
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7ff f852 	bl	8002d2c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003c88:	e005      	b.n	8003c96 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	0010      	movs	r0, r2
 8003c94:	4798      	blx	r3
}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b004      	add	sp, #16
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	fffffefe 	.word	0xfffffefe

08003ca4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff fdf9 	bl	80038ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b004      	add	sp, #16
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	2240      	movs	r2, #64	@ 0x40
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7ff fde6 	bl	80038bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b004      	add	sp, #16
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d00:	2317      	movs	r3, #23
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2234      	movs	r2, #52	@ 0x34
 8003d14:	5c9b      	ldrb	r3, [r3, r2]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_ADCEx_Calibration_Start+0x26>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e08d      	b.n	8003e3a <HAL_ADCEx_Calibration_Start+0x142>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2234      	movs	r2, #52	@ 0x34
 8003d22:	2101      	movs	r1, #1
 8003d24:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d112      	bne.n	8003d5a <HAL_ADCEx_Calibration_Start+0x62>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d009      	beq.n	8003d56 <HAL_ADCEx_Calibration_Start+0x5e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	2380      	movs	r3, #128	@ 0x80
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	401a      	ands	r2, r3
 8003d4e:	2380      	movs	r3, #128	@ 0x80
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d101      	bne.n	8003d5a <HAL_ADCEx_Calibration_Start+0x62>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <HAL_ADCEx_Calibration_Start+0x64>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d15b      	bne.n	8003e18 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	4a37      	ldr	r2, [pc, #220]	@ (8003e44 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	2202      	movs	r2, #2
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2203      	movs	r2, #3
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2103      	movs	r1, #3
 8003d88:	438a      	bics	r2, r1
 8003d8a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2180      	movs	r1, #128	@ 0x80
 8003d98:	0609      	lsls	r1, r1, #24
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003d9e:	f7ff fb95 	bl	80034cc <HAL_GetTick>
 8003da2:	0003      	movs	r3, r0
 8003da4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003da6:	e01d      	b.n	8003de4 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003da8:	f7ff fb90 	bl	80034cc <HAL_GetTick>
 8003dac:	0002      	movs	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d916      	bls.n	8003de4 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	0fdb      	lsrs	r3, r3, #31
 8003dbe:	07da      	lsls	r2, r3, #31
 8003dc0:	2380      	movs	r3, #128	@ 0x80
 8003dc2:	061b      	lsls	r3, r3, #24
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d10d      	bne.n	8003de4 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	2212      	movs	r2, #18
 8003dce:	4393      	bics	r3, r2
 8003dd0:	2210      	movs	r2, #16
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2234      	movs	r2, #52	@ 0x34
 8003ddc:	2100      	movs	r1, #0
 8003dde:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e02a      	b.n	8003e3a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0fdb      	lsrs	r3, r3, #31
 8003dec:	07da      	lsls	r2, r3, #31
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	061b      	lsls	r3, r3, #24
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d0d8      	beq.n	8003da8 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68d9      	ldr	r1, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	4393      	bics	r3, r2
 8003e0e:	2201      	movs	r2, #1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e16:	e009      	b.n	8003e2c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003e24:	2317      	movs	r3, #23
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2234      	movs	r2, #52	@ 0x34
 8003e30:	2100      	movs	r1, #0
 8003e32:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003e34:	2317      	movs	r3, #23
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	781b      	ldrb	r3, [r3, #0]
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b006      	add	sp, #24
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	fffffefd 	.word	0xfffffefd

08003e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	0002      	movs	r2, r0
 8003e50:	1dfb      	adds	r3, r7, #7
 8003e52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e54:	1dfb      	adds	r3, r7, #7
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e5a:	d809      	bhi.n	8003e70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5c:	1dfb      	adds	r3, r7, #7
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	001a      	movs	r2, r3
 8003e62:	231f      	movs	r3, #31
 8003e64:	401a      	ands	r2, r3
 8003e66:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <__NVIC_EnableIRQ+0x30>)
 8003e68:	2101      	movs	r1, #1
 8003e6a:	4091      	lsls	r1, r2
 8003e6c:	000a      	movs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
  }
}
 8003e70:	46c0      	nop			@ (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b002      	add	sp, #8
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	e000e100 	.word	0xe000e100

08003e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	0002      	movs	r2, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	1dfb      	adds	r3, r7, #7
 8003e88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e90:	d828      	bhi.n	8003ee4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e92:	4a2f      	ldr	r2, [pc, #188]	@ (8003f50 <__NVIC_SetPriority+0xd4>)
 8003e94:	1dfb      	adds	r3, r7, #7
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b25b      	sxtb	r3, r3
 8003e9a:	089b      	lsrs	r3, r3, #2
 8003e9c:	33c0      	adds	r3, #192	@ 0xc0
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	589b      	ldr	r3, [r3, r2]
 8003ea2:	1dfa      	adds	r2, r7, #7
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	0011      	movs	r1, r2
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	400a      	ands	r2, r1
 8003eac:	00d2      	lsls	r2, r2, #3
 8003eae:	21ff      	movs	r1, #255	@ 0xff
 8003eb0:	4091      	lsls	r1, r2
 8003eb2:	000a      	movs	r2, r1
 8003eb4:	43d2      	mvns	r2, r2
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	019b      	lsls	r3, r3, #6
 8003ebe:	22ff      	movs	r2, #255	@ 0xff
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	1dfb      	adds	r3, r7, #7
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	2303      	movs	r3, #3
 8003eca:	4003      	ands	r3, r0
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ed0:	481f      	ldr	r0, [pc, #124]	@ (8003f50 <__NVIC_SetPriority+0xd4>)
 8003ed2:	1dfb      	adds	r3, r7, #7
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b25b      	sxtb	r3, r3
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	430a      	orrs	r2, r1
 8003edc:	33c0      	adds	r3, #192	@ 0xc0
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ee2:	e031      	b.n	8003f48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f54 <__NVIC_SetPriority+0xd8>)
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	0019      	movs	r1, r3
 8003eec:	230f      	movs	r3, #15
 8003eee:	400b      	ands	r3, r1
 8003ef0:	3b08      	subs	r3, #8
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	3306      	adds	r3, #6
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	18d3      	adds	r3, r2, r3
 8003efa:	3304      	adds	r3, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	1dfa      	adds	r2, r7, #7
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	0011      	movs	r1, r2
 8003f04:	2203      	movs	r2, #3
 8003f06:	400a      	ands	r2, r1
 8003f08:	00d2      	lsls	r2, r2, #3
 8003f0a:	21ff      	movs	r1, #255	@ 0xff
 8003f0c:	4091      	lsls	r1, r2
 8003f0e:	000a      	movs	r2, r1
 8003f10:	43d2      	mvns	r2, r2
 8003f12:	401a      	ands	r2, r3
 8003f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	019b      	lsls	r3, r3, #6
 8003f1a:	22ff      	movs	r2, #255	@ 0xff
 8003f1c:	401a      	ands	r2, r3
 8003f1e:	1dfb      	adds	r3, r7, #7
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	0018      	movs	r0, r3
 8003f24:	2303      	movs	r3, #3
 8003f26:	4003      	ands	r3, r0
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f2c:	4809      	ldr	r0, [pc, #36]	@ (8003f54 <__NVIC_SetPriority+0xd8>)
 8003f2e:	1dfb      	adds	r3, r7, #7
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	001c      	movs	r4, r3
 8003f34:	230f      	movs	r3, #15
 8003f36:	4023      	ands	r3, r4
 8003f38:	3b08      	subs	r3, #8
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	3306      	adds	r3, #6
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	18c3      	adds	r3, r0, r3
 8003f44:	3304      	adds	r3, #4
 8003f46:	601a      	str	r2, [r3, #0]
}
 8003f48:	46c0      	nop			@ (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b003      	add	sp, #12
 8003f4e:	bd90      	pop	{r4, r7, pc}
 8003f50:	e000e100 	.word	0xe000e100
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	1e5a      	subs	r2, r3, #1
 8003f64:	2380      	movs	r3, #128	@ 0x80
 8003f66:	045b      	lsls	r3, r3, #17
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d301      	bcc.n	8003f70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e010      	b.n	8003f92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f70:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <SysTick_Config+0x44>)
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	3a01      	subs	r2, #1
 8003f76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f78:	2301      	movs	r3, #1
 8003f7a:	425b      	negs	r3, r3
 8003f7c:	2103      	movs	r1, #3
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7ff ff7c 	bl	8003e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f84:	4b05      	ldr	r3, [pc, #20]	@ (8003f9c <SysTick_Config+0x44>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f8a:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <SysTick_Config+0x44>)
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b002      	add	sp, #8
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	e000e010 	.word	0xe000e010

08003fa0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	210f      	movs	r1, #15
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	1c02      	adds	r2, r0, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b25b      	sxtb	r3, r3
 8003fba:	0011      	movs	r1, r2
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7ff ff5d 	bl	8003e7c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b004      	add	sp, #16
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	1dfb      	adds	r3, r7, #7
 8003fd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fd6:	1dfb      	adds	r3, r7, #7
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	b25b      	sxtb	r3, r3
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff ff33 	bl	8003e48 <__NVIC_EnableIRQ>
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b002      	add	sp, #8
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7ff ffaf 	bl	8003f58 <SysTick_Config>
 8003ffa:	0003      	movs	r3, r0
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e036      	b.n	8004088 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2221      	movs	r2, #33	@ 0x21
 800401e:	2102      	movs	r1, #2
 8004020:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a18      	ldr	r2, [pc, #96]	@ (8004090 <HAL_DMA_Init+0x8c>)
 800402e:	4013      	ands	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800403a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	0018      	movs	r0, r3
 800406c:	f000 f98c 	bl	8004388 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2221      	movs	r2, #33	@ 0x21
 800407a:	2101      	movs	r1, #1
 800407c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	2100      	movs	r1, #0
 8004084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b004      	add	sp, #16
 800408e:	bd80      	pop	{r7, pc}
 8004090:	ffffc00f 	.word	0xffffc00f

08004094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2317      	movs	r3, #23
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	5c9b      	ldrb	r3, [r3, r2]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_DMA_Start_IT+0x24>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e04f      	b.n	8004158 <HAL_DMA_Start_IT+0xc4>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	2101      	movs	r1, #1
 80040be:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2221      	movs	r2, #33	@ 0x21
 80040c4:	5c9b      	ldrb	r3, [r3, r2]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d13a      	bne.n	8004142 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2221      	movs	r2, #33	@ 0x21
 80040d0:	2102      	movs	r1, #2
 80040d2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2101      	movs	r1, #1
 80040e6:	438a      	bics	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f91c 	bl	800432e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	210e      	movs	r1, #14
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e00f      	b.n	8004130 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	210a      	movs	r1, #10
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2104      	movs	r1, #4
 800412c:	438a      	bics	r2, r1
 800412e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2101      	movs	r1, #1
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e007      	b.n	8004152 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	2100      	movs	r1, #0
 8004148:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800414a:	2317      	movs	r3, #23
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	2202      	movs	r2, #2
 8004150:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004152:	2317      	movs	r3, #23
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	781b      	ldrb	r3, [r3, #0]
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b006      	add	sp, #24
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004168:	210f      	movs	r1, #15
 800416a:	187b      	adds	r3, r7, r1
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2221      	movs	r2, #33	@ 0x21
 8004174:	5c9b      	ldrb	r3, [r3, r2]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d006      	beq.n	800418a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2204      	movs	r2, #4
 8004180:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004182:	187b      	adds	r3, r7, r1
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e028      	b.n	80041dc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	210e      	movs	r1, #14
 8004196:	438a      	bics	r2, r1
 8004198:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2101      	movs	r1, #1
 80041a6:	438a      	bics	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b2:	2101      	movs	r1, #1
 80041b4:	4091      	lsls	r1, r2
 80041b6:	000a      	movs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2221      	movs	r2, #33	@ 0x21
 80041be:	2101      	movs	r1, #1
 80041c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	2100      	movs	r1, #0
 80041c8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	0010      	movs	r0, r2
 80041da:	4798      	blx	r3
    }
  }
  return status;
 80041dc:	230f      	movs	r3, #15
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	781b      	ldrb	r3, [r3, #0]
}
 80041e2:	0018      	movs	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b004      	add	sp, #16
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	2204      	movs	r2, #4
 8004208:	409a      	lsls	r2, r3
 800420a:	0013      	movs	r3, r2
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4013      	ands	r3, r2
 8004210:	d024      	beq.n	800425c <HAL_DMA_IRQHandler+0x72>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2204      	movs	r2, #4
 8004216:	4013      	ands	r3, r2
 8004218:	d020      	beq.n	800425c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2220      	movs	r2, #32
 8004222:	4013      	ands	r3, r2
 8004224:	d107      	bne.n	8004236 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2104      	movs	r1, #4
 8004232:	438a      	bics	r2, r1
 8004234:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423e:	2104      	movs	r1, #4
 8004240:	4091      	lsls	r1, r2
 8004242:	000a      	movs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d100      	bne.n	8004250 <HAL_DMA_IRQHandler+0x66>
 800424e:	e06a      	b.n	8004326 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	0010      	movs	r0, r2
 8004258:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800425a:	e064      	b.n	8004326 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	2202      	movs	r2, #2
 8004262:	409a      	lsls	r2, r3
 8004264:	0013      	movs	r3, r2
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4013      	ands	r3, r2
 800426a:	d02b      	beq.n	80042c4 <HAL_DMA_IRQHandler+0xda>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2202      	movs	r2, #2
 8004270:	4013      	ands	r3, r2
 8004272:	d027      	beq.n	80042c4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2220      	movs	r2, #32
 800427c:	4013      	ands	r3, r2
 800427e:	d10b      	bne.n	8004298 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	210a      	movs	r1, #10
 800428c:	438a      	bics	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2221      	movs	r2, #33	@ 0x21
 8004294:	2101      	movs	r1, #1
 8004296:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a0:	2102      	movs	r1, #2
 80042a2:	4091      	lsls	r1, r2
 80042a4:	000a      	movs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	2100      	movs	r1, #0
 80042ae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d036      	beq.n	8004326 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	0010      	movs	r0, r2
 80042c0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042c2:	e030      	b.n	8004326 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	2208      	movs	r2, #8
 80042ca:	409a      	lsls	r2, r3
 80042cc:	0013      	movs	r3, r2
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4013      	ands	r3, r2
 80042d2:	d028      	beq.n	8004326 <HAL_DMA_IRQHandler+0x13c>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2208      	movs	r2, #8
 80042d8:	4013      	ands	r3, r2
 80042da:	d024      	beq.n	8004326 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	210e      	movs	r1, #14
 80042e8:	438a      	bics	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f4:	2101      	movs	r1, #1
 80042f6:	4091      	lsls	r1, r2
 80042f8:	000a      	movs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2221      	movs	r2, #33	@ 0x21
 8004306:	2101      	movs	r1, #1
 8004308:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	2100      	movs	r1, #0
 8004310:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	0010      	movs	r0, r2
 8004322:	4798      	blx	r3
    }
  }
}
 8004324:	e7ff      	b.n	8004326 <HAL_DMA_IRQHandler+0x13c>
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b004      	add	sp, #16
 800432c:	bd80      	pop	{r7, pc}

0800432e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004344:	2101      	movs	r1, #1
 8004346:	4091      	lsls	r1, r2
 8004348:	000a      	movs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b10      	cmp	r3, #16
 800435a:	d108      	bne.n	800436e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800436c:	e007      	b.n	800437e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	60da      	str	r2, [r3, #12]
}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b004      	add	sp, #16
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a08      	ldr	r2, [pc, #32]	@ (80043b8 <DMA_CalcBaseAndBitshift+0x30>)
 8004396:	4694      	mov	ip, r2
 8004398:	4463      	add	r3, ip
 800439a:	2114      	movs	r1, #20
 800439c:	0018      	movs	r0, r3
 800439e:	f7fb fecf 	bl	8000140 <__udivsi3>
 80043a2:	0003      	movs	r3, r0
 80043a4:	009a      	lsls	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a03      	ldr	r2, [pc, #12]	@ (80043bc <DMA_CalcBaseAndBitshift+0x34>)
 80043ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80043b0:	46c0      	nop			@ (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b002      	add	sp, #8
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	bffdfff8 	.word	0xbffdfff8
 80043bc:	40020000 	.word	0x40020000

080043c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ce:	e155      	b.n	800467c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2101      	movs	r1, #1
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4091      	lsls	r1, r2
 80043da:	000a      	movs	r2, r1
 80043dc:	4013      	ands	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d100      	bne.n	80043e8 <HAL_GPIO_Init+0x28>
 80043e6:	e146      	b.n	8004676 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2203      	movs	r2, #3
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d005      	beq.n	8004400 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2203      	movs	r2, #3
 80043fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d130      	bne.n	8004462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	2203      	movs	r2, #3
 800440c:	409a      	lsls	r2, r3
 800440e:	0013      	movs	r3, r2
 8004410:	43da      	mvns	r2, r3
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4013      	ands	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	409a      	lsls	r2, r3
 8004422:	0013      	movs	r3, r2
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004436:	2201      	movs	r2, #1
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	409a      	lsls	r2, r3
 800443c:	0013      	movs	r3, r2
 800443e:	43da      	mvns	r2, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	2201      	movs	r2, #1
 800444e:	401a      	ands	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	409a      	lsls	r2, r3
 8004454:	0013      	movs	r3, r2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2203      	movs	r2, #3
 8004468:	4013      	ands	r3, r2
 800446a:	2b03      	cmp	r3, #3
 800446c:	d017      	beq.n	800449e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	2203      	movs	r2, #3
 800447a:	409a      	lsls	r2, r3
 800447c:	0013      	movs	r3, r2
 800447e:	43da      	mvns	r2, r3
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	409a      	lsls	r2, r3
 8004490:	0013      	movs	r3, r2
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2203      	movs	r2, #3
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d123      	bne.n	80044f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	08da      	lsrs	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3208      	adds	r2, #8
 80044b2:	0092      	lsls	r2, r2, #2
 80044b4:	58d3      	ldr	r3, [r2, r3]
 80044b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2207      	movs	r2, #7
 80044bc:	4013      	ands	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	220f      	movs	r2, #15
 80044c2:	409a      	lsls	r2, r3
 80044c4:	0013      	movs	r3, r2
 80044c6:	43da      	mvns	r2, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4013      	ands	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2107      	movs	r1, #7
 80044d6:	400b      	ands	r3, r1
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	409a      	lsls	r2, r3
 80044dc:	0013      	movs	r3, r2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	08da      	lsrs	r2, r3, #3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3208      	adds	r2, #8
 80044ec:	0092      	lsls	r2, r2, #2
 80044ee:	6939      	ldr	r1, [r7, #16]
 80044f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	2203      	movs	r2, #3
 80044fe:	409a      	lsls	r2, r3
 8004500:	0013      	movs	r3, r2
 8004502:	43da      	mvns	r2, r3
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4013      	ands	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2203      	movs	r2, #3
 8004510:	401a      	ands	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	409a      	lsls	r2, r3
 8004518:	0013      	movs	r3, r2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	23c0      	movs	r3, #192	@ 0xc0
 800452c:	029b      	lsls	r3, r3, #10
 800452e:	4013      	ands	r3, r2
 8004530:	d100      	bne.n	8004534 <HAL_GPIO_Init+0x174>
 8004532:	e0a0      	b.n	8004676 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004534:	4b57      	ldr	r3, [pc, #348]	@ (8004694 <HAL_GPIO_Init+0x2d4>)
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	4b56      	ldr	r3, [pc, #344]	@ (8004694 <HAL_GPIO_Init+0x2d4>)
 800453a:	2101      	movs	r1, #1
 800453c:	430a      	orrs	r2, r1
 800453e:	619a      	str	r2, [r3, #24]
 8004540:	4b54      	ldr	r3, [pc, #336]	@ (8004694 <HAL_GPIO_Init+0x2d4>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2201      	movs	r2, #1
 8004546:	4013      	ands	r3, r2
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800454c:	4a52      	ldr	r2, [pc, #328]	@ (8004698 <HAL_GPIO_Init+0x2d8>)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	3302      	adds	r3, #2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	589b      	ldr	r3, [r3, r2]
 8004558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2203      	movs	r2, #3
 800455e:	4013      	ands	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	220f      	movs	r2, #15
 8004564:	409a      	lsls	r2, r3
 8004566:	0013      	movs	r3, r2
 8004568:	43da      	mvns	r2, r3
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	2390      	movs	r3, #144	@ 0x90
 8004574:	05db      	lsls	r3, r3, #23
 8004576:	429a      	cmp	r2, r3
 8004578:	d019      	beq.n	80045ae <HAL_GPIO_Init+0x1ee>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a47      	ldr	r2, [pc, #284]	@ (800469c <HAL_GPIO_Init+0x2dc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <HAL_GPIO_Init+0x1ea>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a46      	ldr	r2, [pc, #280]	@ (80046a0 <HAL_GPIO_Init+0x2e0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00d      	beq.n	80045a6 <HAL_GPIO_Init+0x1e6>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a45      	ldr	r2, [pc, #276]	@ (80046a4 <HAL_GPIO_Init+0x2e4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <HAL_GPIO_Init+0x1e2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a44      	ldr	r2, [pc, #272]	@ (80046a8 <HAL_GPIO_Init+0x2e8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d101      	bne.n	800459e <HAL_GPIO_Init+0x1de>
 800459a:	2304      	movs	r3, #4
 800459c:	e008      	b.n	80045b0 <HAL_GPIO_Init+0x1f0>
 800459e:	2305      	movs	r3, #5
 80045a0:	e006      	b.n	80045b0 <HAL_GPIO_Init+0x1f0>
 80045a2:	2303      	movs	r3, #3
 80045a4:	e004      	b.n	80045b0 <HAL_GPIO_Init+0x1f0>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e002      	b.n	80045b0 <HAL_GPIO_Init+0x1f0>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <HAL_GPIO_Init+0x1f0>
 80045ae:	2300      	movs	r3, #0
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	2103      	movs	r1, #3
 80045b4:	400a      	ands	r2, r1
 80045b6:	0092      	lsls	r2, r2, #2
 80045b8:	4093      	lsls	r3, r2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045c0:	4935      	ldr	r1, [pc, #212]	@ (8004698 <HAL_GPIO_Init+0x2d8>)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	3302      	adds	r3, #2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ce:	4b37      	ldr	r3, [pc, #220]	@ (80046ac <HAL_GPIO_Init+0x2ec>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	43da      	mvns	r2, r3
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	035b      	lsls	r3, r3, #13
 80045e6:	4013      	ands	r3, r2
 80045e8:	d003      	beq.n	80045f2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80045f2:	4b2e      	ldr	r3, [pc, #184]	@ (80046ac <HAL_GPIO_Init+0x2ec>)
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80045f8:	4b2c      	ldr	r3, [pc, #176]	@ (80046ac <HAL_GPIO_Init+0x2ec>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	43da      	mvns	r2, r3
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	2380      	movs	r3, #128	@ 0x80
 800460e:	039b      	lsls	r3, r3, #14
 8004610:	4013      	ands	r3, r2
 8004612:	d003      	beq.n	800461c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800461c:	4b23      	ldr	r3, [pc, #140]	@ (80046ac <HAL_GPIO_Init+0x2ec>)
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004622:	4b22      	ldr	r3, [pc, #136]	@ (80046ac <HAL_GPIO_Init+0x2ec>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	43da      	mvns	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	2380      	movs	r3, #128	@ 0x80
 8004638:	029b      	lsls	r3, r3, #10
 800463a:	4013      	ands	r3, r2
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004646:	4b19      	ldr	r3, [pc, #100]	@ (80046ac <HAL_GPIO_Init+0x2ec>)
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800464c:	4b17      	ldr	r3, [pc, #92]	@ (80046ac <HAL_GPIO_Init+0x2ec>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	43da      	mvns	r2, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	2380      	movs	r3, #128	@ 0x80
 8004662:	025b      	lsls	r3, r3, #9
 8004664:	4013      	ands	r3, r2
 8004666:	d003      	beq.n	8004670 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004670:	4b0e      	ldr	r3, [pc, #56]	@ (80046ac <HAL_GPIO_Init+0x2ec>)
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	3301      	adds	r3, #1
 800467a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	40da      	lsrs	r2, r3
 8004684:	1e13      	subs	r3, r2, #0
 8004686:	d000      	beq.n	800468a <HAL_GPIO_Init+0x2ca>
 8004688:	e6a2      	b.n	80043d0 <HAL_GPIO_Init+0x10>
  } 
}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b006      	add	sp, #24
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	40010000 	.word	0x40010000
 800469c:	48000400 	.word	0x48000400
 80046a0:	48000800 	.word	0x48000800
 80046a4:	48000c00 	.word	0x48000c00
 80046a8:	48001000 	.word	0x48001000
 80046ac:	40010400 	.word	0x40010400

080046b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	000a      	movs	r2, r1
 80046ba:	1cbb      	adds	r3, r7, #2
 80046bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	1cba      	adds	r2, r7, #2
 80046c4:	8812      	ldrh	r2, [r2, #0]
 80046c6:	4013      	ands	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80046ca:	230f      	movs	r3, #15
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e003      	b.n	80046dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046d4:	230f      	movs	r3, #15
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80046dc:	230f      	movs	r3, #15
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	781b      	ldrb	r3, [r3, #0]
  }
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	0008      	movs	r0, r1
 80046f4:	0011      	movs	r1, r2
 80046f6:	1cbb      	adds	r3, r7, #2
 80046f8:	1c02      	adds	r2, r0, #0
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	1c7b      	adds	r3, r7, #1
 80046fe:	1c0a      	adds	r2, r1, #0
 8004700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004702:	1c7b      	adds	r3, r7, #1
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800470a:	1cbb      	adds	r3, r7, #2
 800470c:	881a      	ldrh	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004712:	e003      	b.n	800471c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004714:	1cbb      	adds	r3, r7, #2
 8004716:	881a      	ldrh	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800471c:	46c0      	nop			@ (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b002      	add	sp, #8
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004724:	b590      	push	{r4, r7, lr}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0e4      	b.n	8004900 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a73      	ldr	r2, [pc, #460]	@ (8004908 <HAL_PCD_Init+0x1e4>)
 800473a:	5c9b      	ldrb	r3, [r3, r2]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	23a4      	movs	r3, #164	@ 0xa4
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	2100      	movs	r1, #0
 800474a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	0018      	movs	r0, r3
 8004750:	f008 f996 	bl	800ca80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a6c      	ldr	r2, [pc, #432]	@ (8004908 <HAL_PCD_Init+0x1e4>)
 8004758:	2103      	movs	r1, #3
 800475a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	0018      	movs	r0, r3
 8004762:	f004 facd 	bl	8008d00 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004766:	230f      	movs	r3, #15
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	e047      	b.n	8004800 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004770:	200f      	movs	r0, #15
 8004772:	183b      	adds	r3, r7, r0
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	0013      	movs	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	189b      	adds	r3, r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	18cb      	adds	r3, r1, r3
 8004782:	3311      	adds	r3, #17
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004788:	183b      	adds	r3, r7, r0
 800478a:	781a      	ldrb	r2, [r3, #0]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	0013      	movs	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	189b      	adds	r3, r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	18cb      	adds	r3, r1, r3
 8004798:	3310      	adds	r3, #16
 800479a:	183a      	adds	r2, r7, r0
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047a0:	183b      	adds	r3, r7, r0
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	0013      	movs	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	189b      	adds	r3, r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	18cb      	adds	r3, r1, r3
 80047b0:	3313      	adds	r3, #19
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047b6:	183b      	adds	r3, r7, r0
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	0013      	movs	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	18cb      	adds	r3, r1, r3
 80047c6:	3320      	adds	r3, #32
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047cc:	183b      	adds	r3, r7, r0
 80047ce:	781a      	ldrb	r2, [r3, #0]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	0013      	movs	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	18cb      	adds	r3, r1, r3
 80047dc:	3324      	adds	r3, #36	@ 0x24
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047e2:	183b      	adds	r3, r7, r0
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	0013      	movs	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	189b      	adds	r3, r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	2200      	movs	r2, #0
 80047f4:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047f6:	183b      	adds	r3, r7, r0
 80047f8:	781a      	ldrb	r2, [r3, #0]
 80047fa:	183b      	adds	r3, r7, r0
 80047fc:	3201      	adds	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	791b      	ldrb	r3, [r3, #4]
 8004804:	210f      	movs	r1, #15
 8004806:	187a      	adds	r2, r7, r1
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d3b0      	bcc.n	8004770 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800480e:	187b      	adds	r3, r7, r1
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e056      	b.n	80048c4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004816:	240f      	movs	r4, #15
 8004818:	193b      	adds	r3, r7, r4
 800481a:	781a      	ldrb	r2, [r3, #0]
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	2352      	movs	r3, #82	@ 0x52
 8004820:	33ff      	adds	r3, #255	@ 0xff
 8004822:	0019      	movs	r1, r3
 8004824:	0013      	movs	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	189b      	adds	r3, r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	18c3      	adds	r3, r0, r3
 800482e:	185b      	adds	r3, r3, r1
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004834:	193b      	adds	r3, r7, r4
 8004836:	781a      	ldrb	r2, [r3, #0]
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	23a8      	movs	r3, #168	@ 0xa8
 800483c:	0059      	lsls	r1, r3, #1
 800483e:	0013      	movs	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	189b      	adds	r3, r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	18c3      	adds	r3, r0, r3
 8004848:	185b      	adds	r3, r3, r1
 800484a:	193a      	adds	r2, r7, r4
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004850:	193b      	adds	r3, r7, r4
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	2354      	movs	r3, #84	@ 0x54
 8004858:	33ff      	adds	r3, #255	@ 0xff
 800485a:	0019      	movs	r1, r3
 800485c:	0013      	movs	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	189b      	adds	r3, r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	18c3      	adds	r3, r0, r3
 8004866:	185b      	adds	r3, r3, r1
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800486c:	193b      	adds	r3, r7, r4
 800486e:	781a      	ldrb	r2, [r3, #0]
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	23b0      	movs	r3, #176	@ 0xb0
 8004874:	0059      	lsls	r1, r3, #1
 8004876:	0013      	movs	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	189b      	adds	r3, r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	18c3      	adds	r3, r0, r3
 8004880:	185b      	adds	r3, r3, r1
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004886:	193b      	adds	r3, r7, r4
 8004888:	781a      	ldrb	r2, [r3, #0]
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	23b2      	movs	r3, #178	@ 0xb2
 800488e:	0059      	lsls	r1, r3, #1
 8004890:	0013      	movs	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	189b      	adds	r3, r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	18c3      	adds	r3, r0, r3
 800489a:	185b      	adds	r3, r3, r1
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048a0:	193b      	adds	r3, r7, r4
 80048a2:	781a      	ldrb	r2, [r3, #0]
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	23b4      	movs	r3, #180	@ 0xb4
 80048a8:	0059      	lsls	r1, r3, #1
 80048aa:	0013      	movs	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	189b      	adds	r3, r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	18c3      	adds	r3, r0, r3
 80048b4:	185b      	adds	r3, r3, r1
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ba:	193b      	adds	r3, r7, r4
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	193b      	adds	r3, r7, r4
 80048c0:	3201      	adds	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	791b      	ldrb	r3, [r3, #4]
 80048c8:	220f      	movs	r2, #15
 80048ca:	18ba      	adds	r2, r7, r2
 80048cc:	7812      	ldrb	r2, [r2, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d3a1      	bcc.n	8004816 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6859      	ldr	r1, [r3, #4]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	f004 fa2a 	bl	8008d34 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a07      	ldr	r2, [pc, #28]	@ (8004908 <HAL_PCD_Init+0x1e4>)
 80048ea:	2101      	movs	r1, #1
 80048ec:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	7a9b      	ldrb	r3, [r3, #10]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d103      	bne.n	80048fe <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f001 fd07 	bl	800630c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b005      	add	sp, #20
 8004906:	bd90      	pop	{r4, r7, pc}
 8004908:	00000291 	.word	0x00000291

0800490c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	23a4      	movs	r3, #164	@ 0xa4
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	5cd3      	ldrb	r3, [r2, r3]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_PCD_Start+0x18>
 8004920:	2302      	movs	r3, #2
 8004922:	e014      	b.n	800494e <HAL_PCD_Start+0x42>
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	23a4      	movs	r3, #164	@ 0xa4
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	2101      	movs	r1, #1
 800492c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	0018      	movs	r0, r3
 8004934:	f004 f9ce 	bl	8008cd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	0018      	movs	r0, r3
 800493e:	f006 f9c3 	bl	800acc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	23a4      	movs	r3, #164	@ 0xa4
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	2100      	movs	r1, #0
 800494a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b002      	add	sp, #8
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	0018      	movs	r0, r3
 8004966:	f006 f9c5 	bl	800acf4 <USB_ReadInterrupts>
 800496a:	0003      	movs	r3, r0
 800496c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	2380      	movs	r3, #128	@ 0x80
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	4013      	ands	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	0018      	movs	r0, r3
 800497c:	f000 fb48 	bl	8005010 <PCD_EP_ISR_Handler>

    return;
 8004980:	e11d      	b.n	8004bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	2380      	movs	r3, #128	@ 0x80
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4013      	ands	r3, r2
 800498a:	d015      	beq.n	80049b8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2244      	movs	r2, #68	@ 0x44
 8004992:	5a9b      	ldrh	r3, [r3, r2]
 8004994:	b29a      	uxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	498a      	ldr	r1, [pc, #552]	@ (8004bc4 <HAL_PCD_IRQHandler+0x26c>)
 800499c:	400a      	ands	r2, r1
 800499e:	b291      	uxth	r1, r2
 80049a0:	2244      	movs	r2, #68	@ 0x44
 80049a2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	0018      	movs	r0, r3
 80049a8:	f008 f8f5 	bl	800cb96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2100      	movs	r1, #0
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 f915 	bl	8004be0 <HAL_PCD_SetAddress>

    return;
 80049b6:	e102      	b.n	8004bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	2380      	movs	r3, #128	@ 0x80
 80049bc:	01db      	lsls	r3, r3, #7
 80049be:	4013      	ands	r3, r2
 80049c0:	d00c      	beq.n	80049dc <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2244      	movs	r2, #68	@ 0x44
 80049c8:	5a9b      	ldrh	r3, [r3, r2]
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	497d      	ldr	r1, [pc, #500]	@ (8004bc8 <HAL_PCD_IRQHandler+0x270>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	b291      	uxth	r1, r2
 80049d6:	2244      	movs	r2, #68	@ 0x44
 80049d8:	5299      	strh	r1, [r3, r2]

    return;
 80049da:	e0f0      	b.n	8004bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	2380      	movs	r3, #128	@ 0x80
 80049e0:	019b      	lsls	r3, r3, #6
 80049e2:	4013      	ands	r3, r2
 80049e4:	d00c      	beq.n	8004a00 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2244      	movs	r2, #68	@ 0x44
 80049ec:	5a9b      	ldrh	r3, [r3, r2]
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4975      	ldr	r1, [pc, #468]	@ (8004bcc <HAL_PCD_IRQHandler+0x274>)
 80049f6:	400a      	ands	r2, r1
 80049f8:	b291      	uxth	r1, r2
 80049fa:	2244      	movs	r2, #68	@ 0x44
 80049fc:	5299      	strh	r1, [r3, r2]

    return;
 80049fe:	e0de      	b.n	8004bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	2380      	movs	r3, #128	@ 0x80
 8004a04:	015b      	lsls	r3, r3, #5
 8004a06:	4013      	ands	r3, r2
 8004a08:	d038      	beq.n	8004a7c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2240      	movs	r2, #64	@ 0x40
 8004a10:	5a9b      	ldrh	r3, [r3, r2]
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2104      	movs	r1, #4
 8004a1a:	438a      	bics	r2, r1
 8004a1c:	b291      	uxth	r1, r2
 8004a1e:	2240      	movs	r2, #64	@ 0x40
 8004a20:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2240      	movs	r2, #64	@ 0x40
 8004a28:	5a9b      	ldrh	r3, [r3, r2]
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2108      	movs	r1, #8
 8004a32:	438a      	bics	r2, r1
 8004a34:	b291      	uxth	r1, r2
 8004a36:	2240      	movs	r2, #64	@ 0x40
 8004a38:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	23b2      	movs	r3, #178	@ 0xb2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	5cd3      	ldrb	r3, [r2, r3]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d109      	bne.n	8004a5a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	23b2      	movs	r3, #178	@ 0xb2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2100      	movs	r1, #0
 8004a54:	0018      	movs	r0, r3
 8004a56:	f001 fc83 	bl	8006360 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f008 f8db 	bl	800cc18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2244      	movs	r2, #68	@ 0x44
 8004a68:	5a9b      	ldrh	r3, [r3, r2]
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4957      	ldr	r1, [pc, #348]	@ (8004bd0 <HAL_PCD_IRQHandler+0x278>)
 8004a72:	400a      	ands	r2, r1
 8004a74:	b291      	uxth	r1, r2
 8004a76:	2244      	movs	r2, #68	@ 0x44
 8004a78:	5299      	strh	r1, [r3, r2]

    return;
 8004a7a:	e0a0      	b.n	8004bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	2380      	movs	r3, #128	@ 0x80
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	4013      	ands	r3, r2
 8004a84:	d028      	beq.n	8004ad8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2240      	movs	r2, #64	@ 0x40
 8004a8c:	5a9b      	ldrh	r3, [r3, r2]
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2108      	movs	r1, #8
 8004a96:	430a      	orrs	r2, r1
 8004a98:	b291      	uxth	r1, r2
 8004a9a:	2240      	movs	r2, #64	@ 0x40
 8004a9c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2244      	movs	r2, #68	@ 0x44
 8004aa4:	5a9b      	ldrh	r3, [r3, r2]
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4949      	ldr	r1, [pc, #292]	@ (8004bd4 <HAL_PCD_IRQHandler+0x27c>)
 8004aae:	400a      	ands	r2, r1
 8004ab0:	b291      	uxth	r1, r2
 8004ab2:	2244      	movs	r2, #68	@ 0x44
 8004ab4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2240      	movs	r2, #64	@ 0x40
 8004abc:	5a9b      	ldrh	r3, [r3, r2]
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2104      	movs	r1, #4
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	b291      	uxth	r1, r2
 8004aca:	2240      	movs	r2, #64	@ 0x40
 8004acc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f008 f885 	bl	800cbe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004ad6:	e072      	b.n	8004bbe <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2280      	movs	r2, #128	@ 0x80
 8004adc:	4013      	ands	r3, r2
 8004ade:	d046      	beq.n	8004b6e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2244      	movs	r2, #68	@ 0x44
 8004ae6:	5a9b      	ldrh	r3, [r3, r2]
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2180      	movs	r1, #128	@ 0x80
 8004af0:	438a      	bics	r2, r1
 8004af2:	b291      	uxth	r1, r2
 8004af4:	2244      	movs	r2, #68	@ 0x44
 8004af6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	23b2      	movs	r3, #178	@ 0xb2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	5cd3      	ldrb	r3, [r2, r3]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d12f      	bne.n	8004b64 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2240      	movs	r2, #64	@ 0x40
 8004b0a:	5a9b      	ldrh	r3, [r3, r2]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2104      	movs	r1, #4
 8004b14:	430a      	orrs	r2, r1
 8004b16:	b291      	uxth	r1, r2
 8004b18:	2240      	movs	r2, #64	@ 0x40
 8004b1a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2240      	movs	r2, #64	@ 0x40
 8004b22:	5a9b      	ldrh	r3, [r3, r2]
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2108      	movs	r1, #8
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	b291      	uxth	r1, r2
 8004b30:	2240      	movs	r2, #64	@ 0x40
 8004b32:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	23b2      	movs	r3, #178	@ 0xb2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2254      	movs	r2, #84	@ 0x54
 8004b44:	5a9b      	ldrh	r3, [r3, r2]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	223c      	movs	r2, #60	@ 0x3c
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	23b3      	movs	r3, #179	@ 0xb3
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f001 fbff 	bl	8006360 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004b62:	e02c      	b.n	8004bbe <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	0018      	movs	r0, r3
 8004b68:	f008 f83a 	bl	800cbe0 <HAL_PCD_SuspendCallback>
    return;
 8004b6c:	e027      	b.n	8004bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	2380      	movs	r3, #128	@ 0x80
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4013      	ands	r3, r2
 8004b76:	d010      	beq.n	8004b9a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2244      	movs	r2, #68	@ 0x44
 8004b7e:	5a9b      	ldrh	r3, [r3, r2]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4914      	ldr	r1, [pc, #80]	@ (8004bd8 <HAL_PCD_IRQHandler+0x280>)
 8004b88:	400a      	ands	r2, r1
 8004b8a:	b291      	uxth	r1, r2
 8004b8c:	2244      	movs	r2, #68	@ 0x44
 8004b8e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	0018      	movs	r0, r3
 8004b94:	f007 fff0 	bl	800cb78 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004b98:	e011      	b.n	8004bbe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d00c      	beq.n	8004bbe <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2244      	movs	r2, #68	@ 0x44
 8004baa:	5a9b      	ldrh	r3, [r3, r2]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	490a      	ldr	r1, [pc, #40]	@ (8004bdc <HAL_PCD_IRQHandler+0x284>)
 8004bb4:	400a      	ands	r2, r1
 8004bb6:	b291      	uxth	r1, r2
 8004bb8:	2244      	movs	r2, #68	@ 0x44
 8004bba:	5299      	strh	r1, [r3, r2]

    return;
 8004bbc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b004      	add	sp, #16
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	fffffbff 	.word	0xfffffbff
 8004bc8:	ffffbfff 	.word	0xffffbfff
 8004bcc:	ffffdfff 	.word	0xffffdfff
 8004bd0:	ffffefff 	.word	0xffffefff
 8004bd4:	fffff7ff 	.word	0xfffff7ff
 8004bd8:	fffffdff 	.word	0xfffffdff
 8004bdc:	fffffeff 	.word	0xfffffeff

08004be0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	000a      	movs	r2, r1
 8004bea:	1cfb      	adds	r3, r7, #3
 8004bec:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	23a4      	movs	r3, #164	@ 0xa4
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	5cd3      	ldrb	r3, [r2, r3]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_PCD_SetAddress+0x1e>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e016      	b.n	8004c2c <HAL_PCD_SetAddress+0x4c>
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	23a4      	movs	r3, #164	@ 0xa4
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	2101      	movs	r1, #1
 8004c06:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	1cfa      	adds	r2, r7, #3
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	1cfb      	adds	r3, r7, #3
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	0019      	movs	r1, r3
 8004c1a:	0010      	movs	r0, r2
 8004c1c:	f006 f840 	bl	800aca0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	23a4      	movs	r3, #164	@ 0xa4
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	2100      	movs	r1, #0
 8004c28:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b002      	add	sp, #8
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c34:	b590      	push	{r4, r7, lr}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	000c      	movs	r4, r1
 8004c3e:	0010      	movs	r0, r2
 8004c40:	0019      	movs	r1, r3
 8004c42:	1cfb      	adds	r3, r7, #3
 8004c44:	1c22      	adds	r2, r4, #0
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	003b      	movs	r3, r7
 8004c4a:	1c02      	adds	r2, r0, #0
 8004c4c:	801a      	strh	r2, [r3, #0]
 8004c4e:	1cbb      	adds	r3, r7, #2
 8004c50:	1c0a      	adds	r2, r1, #0
 8004c52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c54:	230b      	movs	r3, #11
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c5c:	1cfb      	adds	r3, r7, #3
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da0f      	bge.n	8004c86 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c66:	1cfb      	adds	r3, r7, #3
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2207      	movs	r2, #7
 8004c6c:	401a      	ands	r2, r3
 8004c6e:	0013      	movs	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	3310      	adds	r3, #16
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	18d3      	adds	r3, r2, r3
 8004c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	705a      	strb	r2, [r3, #1]
 8004c84:	e00f      	b.n	8004ca6 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c86:	1cfb      	adds	r3, r7, #3
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2207      	movs	r2, #7
 8004c8c:	401a      	ands	r2, r3
 8004c8e:	0013      	movs	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	3351      	adds	r3, #81	@ 0x51
 8004c98:	33ff      	adds	r3, #255	@ 0xff
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	18d3      	adds	r3, r2, r3
 8004c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca6:	1cfb      	adds	r3, r7, #3
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2207      	movs	r2, #7
 8004cac:	4013      	ands	r3, r2
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004cb4:	003b      	movs	r3, r7
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1cba      	adds	r2, r7, #2
 8004cc0:	7812      	ldrb	r2, [r2, #0]
 8004cc2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004cc4:	1cbb      	adds	r3, r7, #2
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d102      	bne.n	8004cd2 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	23a4      	movs	r3, #164	@ 0xa4
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	5cd3      	ldrb	r3, [r2, r3]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_PCD_EP_Open+0xae>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e013      	b.n	8004d0a <HAL_PCD_EP_Open+0xd6>
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	23a4      	movs	r3, #164	@ 0xa4
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	2101      	movs	r1, #1
 8004cea:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	0011      	movs	r1, r2
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f004 f839 	bl	8008d6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	23a4      	movs	r3, #164	@ 0xa4
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	2100      	movs	r1, #0
 8004d02:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004d04:	230b      	movs	r3, #11
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	781b      	ldrb	r3, [r3, #0]
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b005      	add	sp, #20
 8004d10:	bd90      	pop	{r4, r7, pc}

08004d12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	000a      	movs	r2, r1
 8004d1c:	1cfb      	adds	r3, r7, #3
 8004d1e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d20:	1cfb      	adds	r3, r7, #3
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	b25b      	sxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	da0f      	bge.n	8004d4a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d2a:	1cfb      	adds	r3, r7, #3
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2207      	movs	r2, #7
 8004d30:	401a      	ands	r2, r3
 8004d32:	0013      	movs	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	3310      	adds	r3, #16
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	18d3      	adds	r3, r2, r3
 8004d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	705a      	strb	r2, [r3, #1]
 8004d48:	e00f      	b.n	8004d6a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d4a:	1cfb      	adds	r3, r7, #3
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2207      	movs	r2, #7
 8004d50:	401a      	ands	r2, r3
 8004d52:	0013      	movs	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	189b      	adds	r3, r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	3351      	adds	r3, #81	@ 0x51
 8004d5c:	33ff      	adds	r3, #255	@ 0xff
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	18d3      	adds	r3, r2, r3
 8004d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d6a:	1cfb      	adds	r3, r7, #3
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2207      	movs	r2, #7
 8004d70:	4013      	ands	r3, r2
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	23a4      	movs	r3, #164	@ 0xa4
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	5cd3      	ldrb	r3, [r2, r3]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_PCD_EP_Close+0x76>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e011      	b.n	8004dac <HAL_PCD_EP_Close+0x9a>
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	23a4      	movs	r3, #164	@ 0xa4
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	2101      	movs	r1, #1
 8004d90:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	0011      	movs	r1, r2
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f004 fb8e 	bl	80094bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	23a4      	movs	r3, #164	@ 0xa4
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	2100      	movs	r1, #0
 8004da8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	0018      	movs	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b004      	add	sp, #16
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	607a      	str	r2, [r7, #4]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	200b      	movs	r0, #11
 8004dc2:	183b      	adds	r3, r7, r0
 8004dc4:	1c0a      	adds	r2, r1, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc8:	0001      	movs	r1, r0
 8004dca:	187b      	adds	r3, r7, r1
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2207      	movs	r2, #7
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	0013      	movs	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	189b      	adds	r3, r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	3351      	adds	r3, #81	@ 0x51
 8004ddc:	33ff      	adds	r3, #255	@ 0xff
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dfc:	187b      	adds	r3, r7, r1
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2207      	movs	r2, #7
 8004e02:	4013      	ands	r3, r2
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	0011      	movs	r1, r2
 8004e12:	0018      	movs	r0, r3
 8004e14:	f004 fd12 	bl	800983c <USB_EPStartXfer>

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b006      	add	sp, #24
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	200b      	movs	r0, #11
 8004e30:	183b      	adds	r3, r7, r0
 8004e32:	1c0a      	adds	r2, r1, #0
 8004e34:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e36:	183b      	adds	r3, r7, r0
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2207      	movs	r2, #7
 8004e3c:	401a      	ands	r2, r3
 8004e3e:	0013      	movs	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	189b      	adds	r3, r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	3310      	adds	r3, #16
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	18d3      	adds	r3, r2, r3
 8004e4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2224      	movs	r2, #36	@ 0x24
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2201      	movs	r2, #1
 8004e72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e74:	183b      	adds	r3, r7, r0
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2207      	movs	r2, #7
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	0011      	movs	r1, r2
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f004 fcd6 	bl	800983c <USB_EPStartXfer>

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	0018      	movs	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b006      	add	sp, #24
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	000a      	movs	r2, r1
 8004ea4:	1cfb      	adds	r3, r7, #3
 8004ea6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ea8:	1cfb      	adds	r3, r7, #3
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2207      	movs	r2, #7
 8004eae:	4013      	ands	r3, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	7912      	ldrb	r2, [r2, #4]
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e046      	b.n	8004f4a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ebc:	1cfb      	adds	r3, r7, #3
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	b25b      	sxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	da0f      	bge.n	8004ee6 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ec6:	1cfb      	adds	r3, r7, #3
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2207      	movs	r2, #7
 8004ecc:	401a      	ands	r2, r3
 8004ece:	0013      	movs	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	189b      	adds	r3, r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	3310      	adds	r3, #16
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	18d3      	adds	r3, r2, r3
 8004edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	705a      	strb	r2, [r3, #1]
 8004ee4:	e00d      	b.n	8004f02 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ee6:	1cfb      	adds	r3, r7, #3
 8004ee8:	781a      	ldrb	r2, [r3, #0]
 8004eea:	0013      	movs	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	189b      	adds	r3, r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	3351      	adds	r3, #81	@ 0x51
 8004ef4:	33ff      	adds	r3, #255	@ 0xff
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	18d3      	adds	r3, r2, r3
 8004efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f08:	1cfb      	adds	r3, r7, #3
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	4013      	ands	r3, r2
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	23a4      	movs	r3, #164	@ 0xa4
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	5cd3      	ldrb	r3, [r2, r3]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_PCD_EP_SetStall+0x8c>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e011      	b.n	8004f4a <HAL_PCD_EP_SetStall+0xb0>
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	23a4      	movs	r3, #164	@ 0xa4
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	0011      	movs	r1, r2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f005 fdaf 	bl	800aa9c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	23a4      	movs	r3, #164	@ 0xa4
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	2100      	movs	r1, #0
 8004f46:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b004      	add	sp, #16
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	000a      	movs	r2, r1
 8004f5c:	1cfb      	adds	r3, r7, #3
 8004f5e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f60:	1cfb      	adds	r3, r7, #3
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	220f      	movs	r2, #15
 8004f66:	4013      	ands	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	7912      	ldrb	r2, [r2, #4]
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d901      	bls.n	8004f74 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e048      	b.n	8005006 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f74:	1cfb      	adds	r3, r7, #3
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	da0f      	bge.n	8004f9e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f7e:	1cfb      	adds	r3, r7, #3
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2207      	movs	r2, #7
 8004f84:	401a      	ands	r2, r3
 8004f86:	0013      	movs	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	3310      	adds	r3, #16
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	18d3      	adds	r3, r2, r3
 8004f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	705a      	strb	r2, [r3, #1]
 8004f9c:	e00f      	b.n	8004fbe <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f9e:	1cfb      	adds	r3, r7, #3
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2207      	movs	r2, #7
 8004fa4:	401a      	ands	r2, r3
 8004fa6:	0013      	movs	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	3351      	adds	r3, #81	@ 0x51
 8004fb0:	33ff      	adds	r3, #255	@ 0xff
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	18d3      	adds	r3, r2, r3
 8004fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fc4:	1cfb      	adds	r3, r7, #3
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2207      	movs	r2, #7
 8004fca:	4013      	ands	r3, r2
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	23a4      	movs	r3, #164	@ 0xa4
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	5cd3      	ldrb	r3, [r2, r3]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_PCD_EP_ClrStall+0x90>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e011      	b.n	8005006 <HAL_PCD_EP_ClrStall+0xb4>
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	23a4      	movs	r3, #164	@ 0xa4
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	2101      	movs	r1, #1
 8004fea:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	0011      	movs	r1, r2
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f005 fda1 	bl	800ab3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	23a4      	movs	r3, #164	@ 0xa4
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	2100      	movs	r1, #0
 8005002:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	0018      	movs	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	b004      	add	sp, #16
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005010:	b5b0      	push	{r4, r5, r7, lr}
 8005012:	b096      	sub	sp, #88	@ 0x58
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005018:	f000 fbea 	bl	80057f0 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	2048      	movs	r0, #72	@ 0x48
 8005022:	183b      	adds	r3, r7, r0
 8005024:	2144      	movs	r1, #68	@ 0x44
 8005026:	5a52      	ldrh	r2, [r2, r1]
 8005028:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800502a:	183b      	adds	r3, r7, r0
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b2da      	uxtb	r2, r3
 8005030:	244f      	movs	r4, #79	@ 0x4f
 8005032:	193b      	adds	r3, r7, r4
 8005034:	210f      	movs	r1, #15
 8005036:	400a      	ands	r2, r1
 8005038:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800503a:	193b      	adds	r3, r7, r4
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d000      	beq.n	8005044 <PCD_EP_ISR_Handler+0x34>
 8005042:	e18d      	b.n	8005360 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005044:	183b      	adds	r3, r7, r0
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	2210      	movs	r2, #16
 800504a:	4013      	ands	r3, r2
 800504c:	d152      	bne.n	80050f4 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29a      	uxth	r2, r3
 8005056:	200e      	movs	r0, #14
 8005058:	183b      	adds	r3, r7, r0
 800505a:	49ba      	ldr	r1, [pc, #744]	@ (8005344 <PCD_EP_ISR_Handler+0x334>)
 800505c:	400a      	ands	r2, r1
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	183a      	adds	r2, r7, r0
 8005066:	8812      	ldrh	r2, [r2, #0]
 8005068:	49b7      	ldr	r1, [pc, #732]	@ (8005348 <PCD_EP_ISR_Handler+0x338>)
 800506a:	430a      	orrs	r2, r1
 800506c:	b292      	uxth	r2, r2
 800506e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3310      	adds	r3, #16
 8005074:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2250      	movs	r2, #80	@ 0x50
 800507c:	5a9b      	ldrh	r3, [r3, r2]
 800507e:	b29b      	uxth	r3, r3
 8005080:	001a      	movs	r2, r3
 8005082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	18d2      	adds	r2, r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	18d3      	adds	r3, r2, r3
 8005090:	4aae      	ldr	r2, [pc, #696]	@ (800534c <PCD_EP_ISR_Handler+0x33c>)
 8005092:	4694      	mov	ip, r2
 8005094:	4463      	add	r3, ip
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	059b      	lsls	r3, r3, #22
 800509a:	0d9a      	lsrs	r2, r3, #22
 800509c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800509e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80050a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	18d2      	adds	r2, r2, r3
 80050aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2100      	movs	r1, #0
 80050b2:	0018      	movs	r0, r3
 80050b4:	f007 fd42 	bl	800cb3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	7b1b      	ldrb	r3, [r3, #12]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <PCD_EP_ISR_Handler+0xb6>
 80050c2:	f000 fb95 	bl	80057f0 <PCD_EP_ISR_Handler+0x7e0>
 80050c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <PCD_EP_ISR_Handler+0xc2>
 80050ce:	f000 fb8f 	bl	80057f0 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	7b1b      	ldrb	r3, [r3, #12]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2280      	movs	r2, #128	@ 0x80
 80050da:	4252      	negs	r2, r2
 80050dc:	4313      	orrs	r3, r2
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	0011      	movs	r1, r2
 80050e6:	224c      	movs	r2, #76	@ 0x4c
 80050e8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	731a      	strb	r2, [r3, #12]
 80050f0:	f000 fb7e 	bl	80057f0 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3351      	adds	r3, #81	@ 0x51
 80050f8:	33ff      	adds	r3, #255	@ 0xff
 80050fa:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	214c      	movs	r1, #76	@ 0x4c
 8005102:	187b      	adds	r3, r7, r1
 8005104:	8812      	ldrh	r2, [r2, #0]
 8005106:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005108:	187b      	adds	r3, r7, r1
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	4013      	ands	r3, r2
 8005112:	d037      	beq.n	8005184 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2250      	movs	r2, #80	@ 0x50
 800511a:	5a9b      	ldrh	r3, [r3, r2]
 800511c:	b29b      	uxth	r3, r3
 800511e:	001a      	movs	r2, r3
 8005120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	18d2      	adds	r2, r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	18d3      	adds	r3, r2, r3
 800512e:	4a88      	ldr	r2, [pc, #544]	@ (8005350 <PCD_EP_ISR_Handler+0x340>)
 8005130:	4694      	mov	ip, r2
 8005132:	4463      	add	r3, ip
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	059b      	lsls	r3, r3, #22
 8005138:	0d9a      	lsrs	r2, r3, #22
 800513a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	22a6      	movs	r2, #166	@ 0xa6
 8005146:	0092      	lsls	r2, r2, #2
 8005148:	1899      	adds	r1, r3, r2
 800514a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800514e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005150:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005152:	b29b      	uxth	r3, r3
 8005154:	f005 fe26 	bl	800ada4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29a      	uxth	r2, r3
 8005160:	2010      	movs	r0, #16
 8005162:	183b      	adds	r3, r7, r0
 8005164:	497b      	ldr	r1, [pc, #492]	@ (8005354 <PCD_EP_ISR_Handler+0x344>)
 8005166:	400a      	ands	r2, r1
 8005168:	801a      	strh	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	183a      	adds	r2, r7, r0
 8005170:	8812      	ldrh	r2, [r2, #0]
 8005172:	2180      	movs	r1, #128	@ 0x80
 8005174:	430a      	orrs	r2, r1
 8005176:	b292      	uxth	r2, r2
 8005178:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	0018      	movs	r0, r3
 800517e:	f007 fca7 	bl	800cad0 <HAL_PCD_SetupStageCallback>
 8005182:	e335      	b.n	80057f0 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005184:	234c      	movs	r3, #76	@ 0x4c
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	2200      	movs	r2, #0
 800518a:	5e9b      	ldrsh	r3, [r3, r2]
 800518c:	2b00      	cmp	r3, #0
 800518e:	db00      	blt.n	8005192 <PCD_EP_ISR_Handler+0x182>
 8005190:	e32e      	b.n	80057f0 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29a      	uxth	r2, r3
 800519a:	201e      	movs	r0, #30
 800519c:	183b      	adds	r3, r7, r0
 800519e:	496d      	ldr	r1, [pc, #436]	@ (8005354 <PCD_EP_ISR_Handler+0x344>)
 80051a0:	400a      	ands	r2, r1
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	183a      	adds	r2, r7, r0
 80051aa:	8812      	ldrh	r2, [r2, #0]
 80051ac:	2180      	movs	r1, #128	@ 0x80
 80051ae:	430a      	orrs	r2, r1
 80051b0:	b292      	uxth	r2, r2
 80051b2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2250      	movs	r2, #80	@ 0x50
 80051ba:	5a9b      	ldrh	r3, [r3, r2]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	001a      	movs	r2, r3
 80051c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	18d2      	adds	r2, r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	18d3      	adds	r3, r2, r3
 80051ce:	4a60      	ldr	r2, [pc, #384]	@ (8005350 <PCD_EP_ISR_Handler+0x340>)
 80051d0:	4694      	mov	ip, r2
 80051d2:	4463      	add	r3, ip
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	059b      	lsls	r3, r3, #22
 80051d8:	0d9a      	lsrs	r2, r3, #22
 80051da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051dc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80051de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01a      	beq.n	800521c <PCD_EP_ISR_Handler+0x20c>
 80051e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f4:	6959      	ldr	r1, [r3, #20]
 80051f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80051fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051fc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f005 fdd0 	bl	800ada4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005206:	695a      	ldr	r2, [r3, #20]
 8005208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	18d2      	adds	r2, r2, r3
 800520e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005210:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2100      	movs	r1, #0
 8005216:	0018      	movs	r0, r3
 8005218:	f007 fc6f 	bl	800cafa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	214c      	movs	r1, #76	@ 0x4c
 8005222:	187b      	adds	r3, r7, r1
 8005224:	8812      	ldrh	r2, [r2, #0]
 8005226:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005228:	187b      	adds	r3, r7, r1
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	2380      	movs	r3, #128	@ 0x80
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	4013      	ands	r3, r2
 8005232:	d000      	beq.n	8005236 <PCD_EP_ISR_Handler+0x226>
 8005234:	e2dc      	b.n	80057f0 <PCD_EP_ISR_Handler+0x7e0>
 8005236:	187b      	adds	r3, r7, r1
 8005238:	881a      	ldrh	r2, [r3, #0]
 800523a:	23c0      	movs	r3, #192	@ 0xc0
 800523c:	019b      	lsls	r3, r3, #6
 800523e:	401a      	ands	r2, r3
 8005240:	23c0      	movs	r3, #192	@ 0xc0
 8005242:	019b      	lsls	r3, r3, #6
 8005244:	429a      	cmp	r2, r3
 8005246:	d100      	bne.n	800524a <PCD_EP_ISR_Handler+0x23a>
 8005248:	e2d2      	b.n	80057f0 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2250      	movs	r2, #80	@ 0x50
 8005256:	5a9b      	ldrh	r3, [r3, r2]
 8005258:	b29b      	uxth	r3, r3
 800525a:	001a      	movs	r2, r3
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	189b      	adds	r3, r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	4a3a      	ldr	r2, [pc, #232]	@ (8005350 <PCD_EP_ISR_Handler+0x340>)
 8005266:	4694      	mov	ip, r2
 8005268:	4463      	add	r3, ip
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	059b      	lsls	r3, r3, #22
 8005274:	0d9b      	lsrs	r3, r3, #22
 8005276:	b29a      	uxth	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d108      	bne.n	8005296 <PCD_EP_ISR_Handler+0x286>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	4a2f      	ldr	r2, [pc, #188]	@ (8005348 <PCD_EP_ISR_Handler+0x338>)
 800528c:	4313      	orrs	r3, r2
 800528e:	b29a      	uxth	r2, r3
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e035      	b.n	8005302 <PCD_EP_ISR_Handler+0x2f2>
 8005296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b3e      	cmp	r3, #62	@ 0x3e
 800529c:	d817      	bhi.n	80052ce <PCD_EP_ISR_Handler+0x2be>
 800529e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2201      	movs	r2, #1
 80052ac:	4013      	ands	r3, r2
 80052ae:	d002      	beq.n	80052b6 <PCD_EP_ISR_Handler+0x2a6>
 80052b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b2:	3301      	adds	r3, #1
 80052b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052be:	b29b      	uxth	r3, r3
 80052c0:	029b      	lsls	r3, r3, #10
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	4313      	orrs	r3, r2
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	e019      	b.n	8005302 <PCD_EP_ISR_Handler+0x2f2>
 80052ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	221f      	movs	r2, #31
 80052dc:	4013      	ands	r3, r2
 80052de:	d102      	bne.n	80052e6 <PCD_EP_ISR_Handler+0x2d6>
 80052e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e2:	3b01      	subs	r3, #1
 80052e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	029b      	lsls	r3, r3, #10
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4313      	orrs	r3, r2
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4a13      	ldr	r2, [pc, #76]	@ (8005348 <PCD_EP_ISR_Handler+0x338>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29a      	uxth	r2, r3
 800530a:	2012      	movs	r0, #18
 800530c:	183b      	adds	r3, r7, r0
 800530e:	4912      	ldr	r1, [pc, #72]	@ (8005358 <PCD_EP_ISR_Handler+0x348>)
 8005310:	400a      	ands	r2, r1
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	183b      	adds	r3, r7, r0
 8005316:	183a      	adds	r2, r7, r0
 8005318:	8812      	ldrh	r2, [r2, #0]
 800531a:	2180      	movs	r1, #128	@ 0x80
 800531c:	0149      	lsls	r1, r1, #5
 800531e:	404a      	eors	r2, r1
 8005320:	801a      	strh	r2, [r3, #0]
 8005322:	183b      	adds	r3, r7, r0
 8005324:	183a      	adds	r2, r7, r0
 8005326:	8812      	ldrh	r2, [r2, #0]
 8005328:	2180      	movs	r1, #128	@ 0x80
 800532a:	0189      	lsls	r1, r1, #6
 800532c:	404a      	eors	r2, r1
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	183a      	adds	r2, r7, r0
 8005336:	8812      	ldrh	r2, [r2, #0]
 8005338:	4908      	ldr	r1, [pc, #32]	@ (800535c <PCD_EP_ISR_Handler+0x34c>)
 800533a:	430a      	orrs	r2, r1
 800533c:	b292      	uxth	r2, r2
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e256      	b.n	80057f0 <PCD_EP_ISR_Handler+0x7e0>
 8005342:	46c0      	nop			@ (mov r8, r8)
 8005344:	ffff8f0f 	.word	0xffff8f0f
 8005348:	ffff8000 	.word	0xffff8000
 800534c:	00000402 	.word	0x00000402
 8005350:	00000406 	.word	0x00000406
 8005354:	00000f8f 	.word	0x00000f8f
 8005358:	ffffbf8f 	.word	0xffffbf8f
 800535c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	001a      	movs	r2, r3
 8005366:	204f      	movs	r0, #79	@ 0x4f
 8005368:	183b      	adds	r3, r7, r0
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	18d2      	adds	r2, r2, r3
 8005370:	214c      	movs	r1, #76	@ 0x4c
 8005372:	187b      	adds	r3, r7, r1
 8005374:	8812      	ldrh	r2, [r2, #0]
 8005376:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005378:	187b      	adds	r3, r7, r1
 800537a:	2200      	movs	r2, #0
 800537c:	5e9b      	ldrsh	r3, [r3, r2]
 800537e:	2b00      	cmp	r3, #0
 8005380:	db00      	blt.n	8005384 <PCD_EP_ISR_Handler+0x374>
 8005382:	e0fa      	b.n	800557a <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	001a      	movs	r2, r3
 800538a:	183b      	adds	r3, r7, r0
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	18d3      	adds	r3, r2, r3
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29a      	uxth	r2, r3
 8005396:	244a      	movs	r4, #74	@ 0x4a
 8005398:	193b      	adds	r3, r7, r4
 800539a:	49d1      	ldr	r1, [pc, #836]	@ (80056e0 <PCD_EP_ISR_Handler+0x6d0>)
 800539c:	400a      	ands	r2, r1
 800539e:	801a      	strh	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	001a      	movs	r2, r3
 80053a6:	183b      	adds	r3, r7, r0
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	18d3      	adds	r3, r2, r3
 80053ae:	193a      	adds	r2, r7, r4
 80053b0:	8812      	ldrh	r2, [r2, #0]
 80053b2:	2180      	movs	r1, #128	@ 0x80
 80053b4:	430a      	orrs	r2, r1
 80053b6:	b292      	uxth	r2, r2
 80053b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80053ba:	183b      	adds	r3, r7, r0
 80053bc:	781a      	ldrb	r2, [r3, #0]
 80053be:	0013      	movs	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	189b      	adds	r3, r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	3351      	adds	r3, #81	@ 0x51
 80053c8:	33ff      	adds	r3, #255	@ 0xff
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	18d3      	adds	r3, r2, r3
 80053ce:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80053d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d2:	7b1b      	ldrb	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d125      	bne.n	8005424 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2250      	movs	r2, #80	@ 0x50
 80053de:	5a9b      	ldrh	r3, [r3, r2]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	001a      	movs	r2, r3
 80053e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	18d2      	adds	r2, r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	18d3      	adds	r3, r2, r3
 80053f2:	4abc      	ldr	r2, [pc, #752]	@ (80056e4 <PCD_EP_ISR_Handler+0x6d4>)
 80053f4:	4694      	mov	ip, r2
 80053f6:	4463      	add	r3, ip
 80053f8:	881a      	ldrh	r2, [r3, #0]
 80053fa:	2450      	movs	r4, #80	@ 0x50
 80053fc:	193b      	adds	r3, r7, r4
 80053fe:	0592      	lsls	r2, r2, #22
 8005400:	0d92      	lsrs	r2, r2, #22
 8005402:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8005404:	193b      	adds	r3, r7, r4
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d100      	bne.n	800540e <PCD_EP_ISR_Handler+0x3fe>
 800540c:	e08d      	b.n	800552a <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005414:	6959      	ldr	r1, [r3, #20]
 8005416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005418:	88da      	ldrh	r2, [r3, #6]
 800541a:	193b      	adds	r3, r7, r4
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	f005 fcc1 	bl	800ada4 <USB_ReadPMA>
 8005422:	e082      	b.n	800552a <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005426:	78db      	ldrb	r3, [r3, #3]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d10c      	bne.n	8005446 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800542c:	2350      	movs	r3, #80	@ 0x50
 800542e:	18fc      	adds	r4, r7, r3
 8005430:	234c      	movs	r3, #76	@ 0x4c
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	881a      	ldrh	r2, [r3, #0]
 8005436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	0018      	movs	r0, r3
 800543c:	f000 f9ec 	bl	8005818 <HAL_PCD_EP_DB_Receive>
 8005440:	0003      	movs	r3, r0
 8005442:	8023      	strh	r3, [r4, #0]
 8005444:	e071      	b.n	800552a <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	001a      	movs	r2, r3
 800544c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	18d3      	adds	r3, r2, r3
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29a      	uxth	r2, r3
 8005458:	2052      	movs	r0, #82	@ 0x52
 800545a:	183b      	adds	r3, r7, r0
 800545c:	49a2      	ldr	r1, [pc, #648]	@ (80056e8 <PCD_EP_ISR_Handler+0x6d8>)
 800545e:	400a      	ands	r2, r1
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	001a      	movs	r2, r3
 8005468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	18d3      	adds	r3, r2, r3
 8005470:	183a      	adds	r2, r7, r0
 8005472:	8812      	ldrh	r2, [r2, #0]
 8005474:	499d      	ldr	r1, [pc, #628]	@ (80056ec <PCD_EP_ISR_Handler+0x6dc>)
 8005476:	430a      	orrs	r2, r1
 8005478:	b292      	uxth	r2, r2
 800547a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	001a      	movs	r2, r3
 8005482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	18d3      	adds	r3, r2, r3
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	001a      	movs	r2, r3
 8005490:	2380      	movs	r3, #128	@ 0x80
 8005492:	01db      	lsls	r3, r3, #7
 8005494:	4013      	ands	r3, r2
 8005496:	d024      	beq.n	80054e2 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2250      	movs	r2, #80	@ 0x50
 800549e:	5a9b      	ldrh	r3, [r3, r2]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	001a      	movs	r2, r3
 80054a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	18d2      	adds	r2, r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	18d3      	adds	r3, r2, r3
 80054b2:	4a8f      	ldr	r2, [pc, #572]	@ (80056f0 <PCD_EP_ISR_Handler+0x6e0>)
 80054b4:	4694      	mov	ip, r2
 80054b6:	4463      	add	r3, ip
 80054b8:	881a      	ldrh	r2, [r3, #0]
 80054ba:	2450      	movs	r4, #80	@ 0x50
 80054bc:	193b      	adds	r3, r7, r4
 80054be:	0592      	lsls	r2, r2, #22
 80054c0:	0d92      	lsrs	r2, r2, #22
 80054c2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80054c4:	193b      	adds	r3, r7, r4
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d02e      	beq.n	800552a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d2:	6959      	ldr	r1, [r3, #20]
 80054d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d6:	891a      	ldrh	r2, [r3, #8]
 80054d8:	193b      	adds	r3, r7, r4
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	f005 fc62 	bl	800ada4 <USB_ReadPMA>
 80054e0:	e023      	b.n	800552a <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2250      	movs	r2, #80	@ 0x50
 80054e8:	5a9b      	ldrh	r3, [r3, r2]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	001a      	movs	r2, r3
 80054ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	18d2      	adds	r2, r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	18d3      	adds	r3, r2, r3
 80054fc:	4a79      	ldr	r2, [pc, #484]	@ (80056e4 <PCD_EP_ISR_Handler+0x6d4>)
 80054fe:	4694      	mov	ip, r2
 8005500:	4463      	add	r3, ip
 8005502:	881a      	ldrh	r2, [r3, #0]
 8005504:	2450      	movs	r4, #80	@ 0x50
 8005506:	193b      	adds	r3, r7, r4
 8005508:	0592      	lsls	r2, r2, #22
 800550a:	0d92      	lsrs	r2, r2, #22
 800550c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800550e:	193b      	adds	r3, r7, r4
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800551c:	6959      	ldr	r1, [r3, #20]
 800551e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005520:	895a      	ldrh	r2, [r3, #10]
 8005522:	193b      	adds	r3, r7, r4
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	f005 fc3d 	bl	800ada4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800552a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800552c:	69da      	ldr	r2, [r3, #28]
 800552e:	2150      	movs	r1, #80	@ 0x50
 8005530:	187b      	adds	r3, r7, r1
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	18d2      	adds	r2, r2, r3
 8005536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005538:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800553a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	187b      	adds	r3, r7, r1
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	18d2      	adds	r2, r2, r3
 8005544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005546:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <PCD_EP_ISR_Handler+0x54c>
 8005550:	187b      	adds	r3, r7, r1
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	429a      	cmp	r2, r3
 800555a:	d207      	bcs.n	800556c <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800555c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	0011      	movs	r1, r2
 8005564:	0018      	movs	r0, r3
 8005566:	f007 fac8 	bl	800cafa <HAL_PCD_DataOutStageCallback>
 800556a:	e006      	b.n	800557a <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005572:	0011      	movs	r1, r2
 8005574:	0018      	movs	r0, r3
 8005576:	f004 f961 	bl	800983c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800557a:	244c      	movs	r4, #76	@ 0x4c
 800557c:	193b      	adds	r3, r7, r4
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	2280      	movs	r2, #128	@ 0x80
 8005582:	4013      	ands	r3, r2
 8005584:	d100      	bne.n	8005588 <PCD_EP_ISR_Handler+0x578>
 8005586:	e133      	b.n	80057f0 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8005588:	204f      	movs	r0, #79	@ 0x4f
 800558a:	183b      	adds	r3, r7, r0
 800558c:	781a      	ldrb	r2, [r3, #0]
 800558e:	0013      	movs	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	189b      	adds	r3, r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	3310      	adds	r3, #16
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	18d3      	adds	r3, r2, r3
 800559c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	001a      	movs	r2, r3
 80055a4:	183b      	adds	r3, r7, r0
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	18d3      	adds	r3, r2, r3
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	2542      	movs	r5, #66	@ 0x42
 80055b2:	197b      	adds	r3, r7, r5
 80055b4:	494f      	ldr	r1, [pc, #316]	@ (80056f4 <PCD_EP_ISR_Handler+0x6e4>)
 80055b6:	400a      	ands	r2, r1
 80055b8:	801a      	strh	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	001a      	movs	r2, r3
 80055c0:	183b      	adds	r3, r7, r0
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	18d3      	adds	r3, r2, r3
 80055c8:	197a      	adds	r2, r7, r5
 80055ca:	8812      	ldrh	r2, [r2, #0]
 80055cc:	494a      	ldr	r1, [pc, #296]	@ (80056f8 <PCD_EP_ISR_Handler+0x6e8>)
 80055ce:	430a      	orrs	r2, r1
 80055d0:	b292      	uxth	r2, r2
 80055d2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80055d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d6:	78db      	ldrb	r3, [r3, #3]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d000      	beq.n	80055de <PCD_EP_ISR_Handler+0x5ce>
 80055dc:	e0af      	b.n	800573e <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 80055de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e0:	2200      	movs	r2, #0
 80055e2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80055e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e6:	7b1b      	ldrb	r3, [r3, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d100      	bne.n	80055ee <PCD_EP_ISR_Handler+0x5de>
 80055ec:	e09f      	b.n	800572e <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80055ee:	193b      	adds	r3, r7, r4
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	2240      	movs	r2, #64	@ 0x40
 80055f4:	4013      	ands	r3, r2
 80055f6:	d046      	beq.n	8005686 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d125      	bne.n	800564c <PCD_EP_ISR_Handler+0x63c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2250      	movs	r2, #80	@ 0x50
 800560c:	5a9b      	ldrh	r3, [r3, r2]
 800560e:	b29b      	uxth	r3, r3
 8005610:	001a      	movs	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	189b      	adds	r3, r3, r2
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24
 8005618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	00da      	lsls	r2, r3, #3
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	18d3      	adds	r3, r2, r3
 8005622:	4a33      	ldr	r2, [pc, #204]	@ (80056f0 <PCD_EP_ISR_Handler+0x6e0>)
 8005624:	4694      	mov	ip, r2
 8005626:	4463      	add	r3, ip
 8005628:	623b      	str	r3, [r7, #32]
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	059b      	lsls	r3, r3, #22
 8005632:	0d9b      	lsrs	r3, r3, #22
 8005634:	b29a      	uxth	r2, r3
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29b      	uxth	r3, r3
 8005640:	4a2d      	ldr	r2, [pc, #180]	@ (80056f8 <PCD_EP_ISR_Handler+0x6e8>)
 8005642:	4313      	orrs	r3, r2
 8005644:	b29a      	uxth	r2, r3
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	e070      	b.n	800572e <PCD_EP_ISR_Handler+0x71e>
 800564c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d16c      	bne.n	800572e <PCD_EP_ISR_Handler+0x71e>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2250      	movs	r2, #80	@ 0x50
 8005660:	5a9b      	ldrh	r3, [r3, r2]
 8005662:	b29b      	uxth	r3, r3
 8005664:	001a      	movs	r2, r3
 8005666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005668:	189b      	adds	r3, r3, r2
 800566a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800566c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	00da      	lsls	r2, r3, #3
 8005672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005674:	18d3      	adds	r3, r2, r3
 8005676:	4a1e      	ldr	r2, [pc, #120]	@ (80056f0 <PCD_EP_ISR_Handler+0x6e0>)
 8005678:	4694      	mov	ip, r2
 800567a:	4463      	add	r3, ip
 800567c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800567e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005680:	2200      	movs	r2, #0
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	e053      	b.n	800572e <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800568c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d133      	bne.n	80056fc <PCD_EP_ISR_Handler+0x6ec>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	637b      	str	r3, [r7, #52]	@ 0x34
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2250      	movs	r2, #80	@ 0x50
 80056a0:	5a9b      	ldrh	r3, [r3, r2]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	001a      	movs	r2, r3
 80056a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a8:	189b      	adds	r3, r3, r2
 80056aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	00da      	lsls	r2, r3, #3
 80056b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b4:	18d3      	adds	r3, r2, r3
 80056b6:	4a0b      	ldr	r2, [pc, #44]	@ (80056e4 <PCD_EP_ISR_Handler+0x6d4>)
 80056b8:	4694      	mov	ip, r2
 80056ba:	4463      	add	r3, ip
 80056bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	059b      	lsls	r3, r3, #22
 80056c6:	0d9b      	lsrs	r3, r3, #22
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	4a08      	ldr	r2, [pc, #32]	@ (80056f8 <PCD_EP_ISR_Handler+0x6e8>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	b29a      	uxth	r2, r3
 80056da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	e026      	b.n	800572e <PCD_EP_ISR_Handler+0x71e>
 80056e0:	00000f8f 	.word	0x00000f8f
 80056e4:	00000406 	.word	0x00000406
 80056e8:	ffff8f8f 	.word	0xffff8f8f
 80056ec:	ffff80c0 	.word	0xffff80c0
 80056f0:	00000402 	.word	0x00000402
 80056f4:	ffff8f0f 	.word	0xffff8f0f
 80056f8:	ffff8000 	.word	0xffff8000
 80056fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056fe:	785b      	ldrb	r3, [r3, #1]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d114      	bne.n	800572e <PCD_EP_ISR_Handler+0x71e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2250      	movs	r2, #80	@ 0x50
 800570a:	5a9b      	ldrh	r3, [r3, r2]
 800570c:	b29b      	uxth	r3, r3
 800570e:	001a      	movs	r2, r3
 8005710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005712:	189b      	adds	r3, r3, r2
 8005714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	00da      	lsls	r2, r3, #3
 800571c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571e:	18d3      	adds	r3, r2, r3
 8005720:	4a3b      	ldr	r2, [pc, #236]	@ (8005810 <PCD_EP_ISR_Handler+0x800>)
 8005722:	4694      	mov	ip, r2
 8005724:	4463      	add	r3, ip
 8005726:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572a:	2200      	movs	r2, #0
 800572c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800572e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	0011      	movs	r1, r2
 8005736:	0018      	movs	r0, r3
 8005738:	f007 fa00 	bl	800cb3c <HAL_PCD_DataInStageCallback>
 800573c:	e058      	b.n	80057f0 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800573e:	234c      	movs	r3, #76	@ 0x4c
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	881a      	ldrh	r2, [r3, #0]
 8005744:	2380      	movs	r3, #128	@ 0x80
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	4013      	ands	r3, r2
 800574a:	d149      	bne.n	80057e0 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2250      	movs	r2, #80	@ 0x50
 8005752:	5a9b      	ldrh	r3, [r3, r2]
 8005754:	b29b      	uxth	r3, r3
 8005756:	001a      	movs	r2, r3
 8005758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	18d2      	adds	r2, r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	18d3      	adds	r3, r2, r3
 8005766:	4a2b      	ldr	r2, [pc, #172]	@ (8005814 <PCD_EP_ISR_Handler+0x804>)
 8005768:	4694      	mov	ip, r2
 800576a:	4463      	add	r3, ip
 800576c:	881a      	ldrh	r2, [r3, #0]
 800576e:	2140      	movs	r1, #64	@ 0x40
 8005770:	187b      	adds	r3, r7, r1
 8005772:	0592      	lsls	r2, r2, #22
 8005774:	0d92      	lsrs	r2, r2, #22
 8005776:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8005778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	187b      	adds	r3, r7, r1
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d907      	bls.n	8005794 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8005784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	187b      	adds	r3, r7, r1
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	1ad2      	subs	r2, r2, r3
 800578e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005790:	619a      	str	r2, [r3, #24]
 8005792:	e002      	b.n	800579a <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005796:	2200      	movs	r2, #0
 8005798:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800579a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d107      	bne.n	80057b2 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057a4:	781a      	ldrb	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	0011      	movs	r1, r2
 80057aa:	0018      	movs	r0, r3
 80057ac:	f007 f9c6 	bl	800cb3c <HAL_PCD_DataInStageCallback>
 80057b0:	e01e      	b.n	80057f0 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80057b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	2140      	movs	r1, #64	@ 0x40
 80057b8:	187b      	adds	r3, r7, r1
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	18d2      	adds	r2, r2, r3
 80057be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057c0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80057c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	18d2      	adds	r2, r2, r3
 80057cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ce:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057d6:	0011      	movs	r1, r2
 80057d8:	0018      	movs	r0, r3
 80057da:	f004 f82f 	bl	800983c <USB_EPStartXfer>
 80057de:	e007      	b.n	80057f0 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80057e0:	234c      	movs	r3, #76	@ 0x4c
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	881a      	ldrh	r2, [r3, #0]
 80057e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	0018      	movs	r0, r3
 80057ec:	f000 f930 	bl	8005a50 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2244      	movs	r2, #68	@ 0x44
 80057f6:	5a9b      	ldrh	r3, [r3, r2]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	b21b      	sxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	da01      	bge.n	8005804 <PCD_EP_ISR_Handler+0x7f4>
 8005800:	f7ff fc0c 	bl	800501c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	0018      	movs	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	b016      	add	sp, #88	@ 0x58
 800580c:	bdb0      	pop	{r4, r5, r7, pc}
 800580e:	46c0      	nop			@ (mov r8, r8)
 8005810:	00000406 	.word	0x00000406
 8005814:	00000402 	.word	0x00000402

08005818 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b089      	sub	sp, #36	@ 0x24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	1dbb      	adds	r3, r7, #6
 8005824:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005826:	1dbb      	adds	r3, r7, #6
 8005828:	881a      	ldrh	r2, [r3, #0]
 800582a:	2380      	movs	r3, #128	@ 0x80
 800582c:	01db      	lsls	r3, r3, #7
 800582e:	4013      	ands	r3, r2
 8005830:	d100      	bne.n	8005834 <HAL_PCD_EP_DB_Receive+0x1c>
 8005832:	e07d      	b.n	8005930 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2250      	movs	r2, #80	@ 0x50
 800583a:	5a9b      	ldrh	r3, [r3, r2]
 800583c:	b29b      	uxth	r3, r3
 800583e:	001a      	movs	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	18d2      	adds	r2, r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	18d3      	adds	r3, r2, r3
 800584e:	4a7a      	ldr	r2, [pc, #488]	@ (8005a38 <HAL_PCD_EP_DB_Receive+0x220>)
 8005850:	4694      	mov	ip, r2
 8005852:	4463      	add	r3, ip
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	211a      	movs	r1, #26
 8005858:	187b      	adds	r3, r7, r1
 800585a:	0592      	lsls	r2, r2, #22
 800585c:	0d92      	lsrs	r2, r2, #22
 800585e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	699a      	ldr	r2, [r3, #24]
 8005864:	187b      	adds	r3, r7, r1
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d307      	bcc.n	800587c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	699a      	ldr	r2, [r3, #24]
 8005870:	187b      	adds	r3, r7, r1
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	1ad2      	subs	r2, r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	619a      	str	r2, [r3, #24]
 800587a:	e002      	b.n	8005882 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d121      	bne.n	80058ce <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	001a      	movs	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	18d3      	adds	r3, r2, r3
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29a      	uxth	r2, r3
 800589c:	2018      	movs	r0, #24
 800589e:	183b      	adds	r3, r7, r0
 80058a0:	4966      	ldr	r1, [pc, #408]	@ (8005a3c <HAL_PCD_EP_DB_Receive+0x224>)
 80058a2:	400a      	ands	r2, r1
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	183b      	adds	r3, r7, r0
 80058a8:	183a      	adds	r2, r7, r0
 80058aa:	8812      	ldrh	r2, [r2, #0]
 80058ac:	2180      	movs	r1, #128	@ 0x80
 80058ae:	0189      	lsls	r1, r1, #6
 80058b0:	404a      	eors	r2, r1
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	001a      	movs	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	18d3      	adds	r3, r2, r3
 80058c2:	183a      	adds	r2, r7, r0
 80058c4:	8812      	ldrh	r2, [r2, #0]
 80058c6:	495e      	ldr	r1, [pc, #376]	@ (8005a40 <HAL_PCD_EP_DB_Receive+0x228>)
 80058c8:	430a      	orrs	r2, r1
 80058ca:	b292      	uxth	r2, r2
 80058cc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058ce:	1dbb      	adds	r3, r7, #6
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	2240      	movs	r2, #64	@ 0x40
 80058d4:	4013      	ands	r3, r2
 80058d6:	d01a      	beq.n	800590e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	001a      	movs	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	18d3      	adds	r3, r2, r3
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	2016      	movs	r0, #22
 80058ec:	183b      	adds	r3, r7, r0
 80058ee:	4955      	ldr	r1, [pc, #340]	@ (8005a44 <HAL_PCD_EP_DB_Receive+0x22c>)
 80058f0:	400a      	ands	r2, r1
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	001a      	movs	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	18d3      	adds	r3, r2, r3
 8005902:	183a      	adds	r2, r7, r0
 8005904:	8812      	ldrh	r2, [r2, #0]
 8005906:	4950      	ldr	r1, [pc, #320]	@ (8005a48 <HAL_PCD_EP_DB_Receive+0x230>)
 8005908:	430a      	orrs	r2, r1
 800590a:	b292      	uxth	r2, r2
 800590c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800590e:	241a      	movs	r4, #26
 8005910:	193b      	adds	r3, r7, r4
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d100      	bne.n	800591a <HAL_PCD_EP_DB_Receive+0x102>
 8005918:	e086      	b.n	8005a28 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	6959      	ldr	r1, [r3, #20]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	891a      	ldrh	r2, [r3, #8]
 8005926:	193b      	adds	r3, r7, r4
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	f005 fa3b 	bl	800ada4 <USB_ReadPMA>
 800592e:	e07b      	b.n	8005a28 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2250      	movs	r2, #80	@ 0x50
 8005936:	5a9b      	ldrh	r3, [r3, r2]
 8005938:	b29b      	uxth	r3, r3
 800593a:	001a      	movs	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	18d2      	adds	r2, r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	18d3      	adds	r3, r2, r3
 800594a:	4a40      	ldr	r2, [pc, #256]	@ (8005a4c <HAL_PCD_EP_DB_Receive+0x234>)
 800594c:	4694      	mov	ip, r2
 800594e:	4463      	add	r3, ip
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	211a      	movs	r1, #26
 8005954:	187b      	adds	r3, r7, r1
 8005956:	0592      	lsls	r2, r2, #22
 8005958:	0d92      	lsrs	r2, r2, #22
 800595a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	187b      	adds	r3, r7, r1
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d307      	bcc.n	8005978 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	699a      	ldr	r2, [r3, #24]
 800596c:	187b      	adds	r3, r7, r1
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	1ad2      	subs	r2, r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	619a      	str	r2, [r3, #24]
 8005976:	e002      	b.n	800597e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2200      	movs	r2, #0
 800597c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d121      	bne.n	80059ca <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	001a      	movs	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	18d3      	adds	r3, r2, r3
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	b29a      	uxth	r2, r3
 8005998:	201e      	movs	r0, #30
 800599a:	183b      	adds	r3, r7, r0
 800599c:	4927      	ldr	r1, [pc, #156]	@ (8005a3c <HAL_PCD_EP_DB_Receive+0x224>)
 800599e:	400a      	ands	r2, r1
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	183b      	adds	r3, r7, r0
 80059a4:	183a      	adds	r2, r7, r0
 80059a6:	8812      	ldrh	r2, [r2, #0]
 80059a8:	2180      	movs	r1, #128	@ 0x80
 80059aa:	0189      	lsls	r1, r1, #6
 80059ac:	404a      	eors	r2, r1
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	001a      	movs	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	18d3      	adds	r3, r2, r3
 80059be:	183a      	adds	r2, r7, r0
 80059c0:	8812      	ldrh	r2, [r2, #0]
 80059c2:	491f      	ldr	r1, [pc, #124]	@ (8005a40 <HAL_PCD_EP_DB_Receive+0x228>)
 80059c4:	430a      	orrs	r2, r1
 80059c6:	b292      	uxth	r2, r2
 80059c8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80059ca:	1dbb      	adds	r3, r7, #6
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	2240      	movs	r2, #64	@ 0x40
 80059d0:	4013      	ands	r3, r2
 80059d2:	d11a      	bne.n	8005a0a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	001a      	movs	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	18d3      	adds	r3, r2, r3
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	201c      	movs	r0, #28
 80059e8:	183b      	adds	r3, r7, r0
 80059ea:	4916      	ldr	r1, [pc, #88]	@ (8005a44 <HAL_PCD_EP_DB_Receive+0x22c>)
 80059ec:	400a      	ands	r2, r1
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	001a      	movs	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	18d3      	adds	r3, r2, r3
 80059fe:	183a      	adds	r2, r7, r0
 8005a00:	8812      	ldrh	r2, [r2, #0]
 8005a02:	4911      	ldr	r1, [pc, #68]	@ (8005a48 <HAL_PCD_EP_DB_Receive+0x230>)
 8005a04:	430a      	orrs	r2, r1
 8005a06:	b292      	uxth	r2, r2
 8005a08:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005a0a:	241a      	movs	r4, #26
 8005a0c:	193b      	adds	r3, r7, r4
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d009      	beq.n	8005a28 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6959      	ldr	r1, [r3, #20]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	895a      	ldrh	r2, [r3, #10]
 8005a20:	193b      	adds	r3, r7, r4
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	f005 f9be 	bl	800ada4 <USB_ReadPMA>
    }
  }

  return count;
 8005a28:	231a      	movs	r3, #26
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	881b      	ldrh	r3, [r3, #0]
}
 8005a2e:	0018      	movs	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b009      	add	sp, #36	@ 0x24
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	46c0      	nop			@ (mov r8, r8)
 8005a38:	00000402 	.word	0x00000402
 8005a3c:	ffffbf8f 	.word	0xffffbf8f
 8005a40:	ffff8080 	.word	0xffff8080
 8005a44:	ffff8f8f 	.word	0xffff8f8f
 8005a48:	ffff80c0 	.word	0xffff80c0
 8005a4c:	00000406 	.word	0x00000406

08005a50 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b0a4      	sub	sp, #144	@ 0x90
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	1dbb      	adds	r3, r7, #6
 8005a5c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a5e:	1dbb      	adds	r3, r7, #6
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	2240      	movs	r2, #64	@ 0x40
 8005a64:	4013      	ands	r3, r2
 8005a66:	d100      	bne.n	8005a6a <HAL_PCD_EP_DB_Transmit+0x1a>
 8005a68:	e1e4      	b.n	8005e34 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2250      	movs	r2, #80	@ 0x50
 8005a70:	5a9b      	ldrh	r3, [r3, r2]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	001a      	movs	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	18d2      	adds	r2, r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	18d3      	adds	r3, r2, r3
 8005a84:	4ad0      	ldr	r2, [pc, #832]	@ (8005dc8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005a86:	4694      	mov	ip, r2
 8005a88:	4463      	add	r3, ip
 8005a8a:	881a      	ldrh	r2, [r3, #0]
 8005a8c:	2188      	movs	r1, #136	@ 0x88
 8005a8e:	187b      	adds	r3, r7, r1
 8005a90:	0592      	lsls	r2, r2, #22
 8005a92:	0d92      	lsrs	r2, r2, #22
 8005a94:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	187b      	adds	r3, r7, r1
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d907      	bls.n	8005ab2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	187b      	adds	r3, r7, r1
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	1ad2      	subs	r2, r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	619a      	str	r2, [r3, #24]
 8005ab0:	e002      	b.n	8005ab8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d000      	beq.n	8005ac2 <HAL_PCD_EP_DB_Transmit+0x72>
 8005ac0:	e0b5      	b.n	8005c2e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d125      	bne.n	8005b16 <HAL_PCD_EP_DB_Transmit+0xc6>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2250      	movs	r2, #80	@ 0x50
 8005ad6:	5a9b      	ldrh	r3, [r3, r2]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	001a      	movs	r2, r3
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ade:	189b      	adds	r3, r3, r2
 8005ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	00da      	lsls	r2, r3, #3
 8005ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aea:	18d3      	adds	r3, r2, r3
 8005aec:	4ab6      	ldr	r2, [pc, #728]	@ (8005dc8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005aee:	4694      	mov	ip, r2
 8005af0:	4463      	add	r3, ip
 8005af2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	059b      	lsls	r3, r3, #22
 8005afc:	0d9b      	lsrs	r3, r3, #22
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	4ab0      	ldr	r2, [pc, #704]	@ (8005dcc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	e01b      	b.n	8005b4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d117      	bne.n	8005b4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2250      	movs	r2, #80	@ 0x50
 8005b2a:	5a9b      	ldrh	r3, [r3, r2]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	001a      	movs	r2, r3
 8005b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b32:	189b      	adds	r3, r3, r2
 8005b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	00da      	lsls	r2, r3, #3
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3e:	18d3      	adds	r3, r2, r3
 8005b40:	4aa1      	ldr	r2, [pc, #644]	@ (8005dc8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005b42:	4694      	mov	ip, r2
 8005b44:	4463      	add	r3, ip
 8005b46:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d125      	bne.n	8005ba8 <HAL_PCD_EP_DB_Transmit+0x158>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2250      	movs	r2, #80	@ 0x50
 8005b68:	5a9b      	ldrh	r3, [r3, r2]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	001a      	movs	r2, r3
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	189b      	adds	r3, r3, r2
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	00da      	lsls	r2, r3, #3
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	18d3      	adds	r3, r2, r3
 8005b7e:	4a94      	ldr	r2, [pc, #592]	@ (8005dd0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005b80:	4694      	mov	ip, r2
 8005b82:	4463      	add	r3, ip
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	059b      	lsls	r3, r3, #22
 8005b8e:	0d9b      	lsrs	r3, r3, #22
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4a8b      	ldr	r2, [pc, #556]	@ (8005dcc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e018      	b.n	8005bda <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d114      	bne.n	8005bda <HAL_PCD_EP_DB_Transmit+0x18a>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2250      	movs	r2, #80	@ 0x50
 8005bb6:	5a9b      	ldrh	r3, [r3, r2]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	001a      	movs	r2, r3
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	189b      	adds	r3, r3, r2
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	00da      	lsls	r2, r3, #3
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	18d3      	adds	r3, r2, r3
 8005bcc:	4a80      	ldr	r2, [pc, #512]	@ (8005dd0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005bce:	4694      	mov	ip, r2
 8005bd0:	4463      	add	r3, ip
 8005bd2:	623b      	str	r3, [r7, #32]
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	781a      	ldrb	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	0011      	movs	r1, r2
 8005be2:	0018      	movs	r0, r3
 8005be4:	f006 ffaa 	bl	800cb3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005be8:	1dbb      	adds	r3, r7, #6
 8005bea:	881a      	ldrh	r2, [r3, #0]
 8005bec:	2380      	movs	r3, #128	@ 0x80
 8005bee:	01db      	lsls	r3, r3, #7
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d100      	bne.n	8005bf6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005bf4:	e308      	b.n	8006208 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	001a      	movs	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	18d3      	adds	r3, r2, r3
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	2016      	movs	r0, #22
 8005c0a:	183b      	adds	r3, r7, r0
 8005c0c:	4971      	ldr	r1, [pc, #452]	@ (8005dd4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8005c0e:	400a      	ands	r2, r1
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	001a      	movs	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	18d3      	adds	r3, r2, r3
 8005c20:	183a      	adds	r2, r7, r0
 8005c22:	8812      	ldrh	r2, [r2, #0]
 8005c24:	496c      	ldr	r1, [pc, #432]	@ (8005dd8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005c26:	430a      	orrs	r2, r1
 8005c28:	b292      	uxth	r2, r2
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	e2ec      	b.n	8006208 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c2e:	1dbb      	adds	r3, r7, #6
 8005c30:	881a      	ldrh	r2, [r3, #0]
 8005c32:	2380      	movs	r3, #128	@ 0x80
 8005c34:	01db      	lsls	r3, r3, #7
 8005c36:	4013      	ands	r3, r2
 8005c38:	d01a      	beq.n	8005c70 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	001a      	movs	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	208a      	movs	r0, #138	@ 0x8a
 8005c4e:	183b      	adds	r3, r7, r0
 8005c50:	4960      	ldr	r1, [pc, #384]	@ (8005dd4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	001a      	movs	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	18d3      	adds	r3, r2, r3
 8005c64:	183a      	adds	r2, r7, r0
 8005c66:	8812      	ldrh	r2, [r2, #0]
 8005c68:	495b      	ldr	r1, [pc, #364]	@ (8005dd8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2224      	movs	r2, #36	@ 0x24
 8005c74:	5c9b      	ldrb	r3, [r3, r2]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d000      	beq.n	8005c7c <HAL_PCD_EP_DB_Transmit+0x22c>
 8005c7a:	e2c5      	b.n	8006208 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	2188      	movs	r1, #136	@ 0x88
 8005c82:	187b      	adds	r3, r7, r1
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	18d2      	adds	r2, r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	187b      	adds	r3, r7, r1
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	18d2      	adds	r2, r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6a1a      	ldr	r2, [r3, #32]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d30c      	bcc.n	8005cc0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	218c      	movs	r1, #140	@ 0x8c
 8005cac:	187a      	adds	r2, r7, r1
 8005cae:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6a1a      	ldr	r2, [r3, #32]
 8005cb4:	187b      	adds	r3, r7, r1
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	1ad2      	subs	r2, r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	621a      	str	r2, [r3, #32]
 8005cbe:	e01a      	b.n	8005cf6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005cc8:	2388      	movs	r3, #136	@ 0x88
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	228c      	movs	r2, #140	@ 0x8c
 8005cd0:	18ba      	adds	r2, r7, r2
 8005cd2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2224      	movs	r2, #36	@ 0x24
 8005cd8:	2100      	movs	r1, #0
 8005cda:	5499      	strb	r1, [r3, r2]
 8005cdc:	e00b      	b.n	8005cf6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2224      	movs	r2, #36	@ 0x24
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	228c      	movs	r2, #140	@ 0x8c
 8005cec:	18ba      	adds	r2, r7, r2
 8005cee:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d000      	beq.n	8005d00 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8005cfe:	e06d      	b.n	8005ddc <HAL_PCD_EP_DB_Transmit+0x38c>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2250      	movs	r2, #80	@ 0x50
 8005d0c:	5a9b      	ldrh	r3, [r3, r2]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	001a      	movs	r2, r3
 8005d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d14:	189b      	adds	r3, r3, r2
 8005d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	00da      	lsls	r2, r3, #3
 8005d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d20:	18d3      	adds	r3, r2, r3
 8005d22:	4a29      	ldr	r2, [pc, #164]	@ (8005dc8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005d24:	4694      	mov	ip, r2
 8005d26:	4463      	add	r3, ip
 8005d28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	059b      	lsls	r3, r3, #22
 8005d32:	0d9b      	lsrs	r3, r3, #22
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	238c      	movs	r3, #140	@ 0x8c
 8005d3c:	18fb      	adds	r3, r7, r3
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d108      	bne.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x306>
 8005d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	4a20      	ldr	r2, [pc, #128]	@ (8005dcc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	e061      	b.n	8005e1a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005d56:	228c      	movs	r2, #140	@ 0x8c
 8005d58:	18bb      	adds	r3, r7, r2
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d5e:	d817      	bhi.n	8005d90 <HAL_PCD_EP_DB_Transmit+0x340>
 8005d60:	18bb      	adds	r3, r7, r2
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d68:	18bb      	adds	r3, r7, r2
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d002      	beq.n	8005d78 <HAL_PCD_EP_DB_Transmit+0x328>
 8005d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d74:	3301      	adds	r3, #1
 8005d76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	e044      	b.n	8005e1a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005d90:	228c      	movs	r2, #140	@ 0x8c
 8005d92:	18bb      	adds	r3, r7, r2
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d9a:	18bb      	adds	r3, r7, r2
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	221f      	movs	r2, #31
 8005da0:	4013      	ands	r3, r2
 8005da2:	d102      	bne.n	8005daa <HAL_PCD_EP_DB_Transmit+0x35a>
 8005da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005da6:	3b01      	subs	r3, #1
 8005da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	029b      	lsls	r3, r3, #10
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	4313      	orrs	r3, r2
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	4a03      	ldr	r2, [pc, #12]	@ (8005dcc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	e028      	b.n	8005e1a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005dc8:	00000402 	.word	0x00000402
 8005dcc:	ffff8000 	.word	0xffff8000
 8005dd0:	00000406 	.word	0x00000406
 8005dd4:	ffff8f8f 	.word	0xffff8f8f
 8005dd8:	ffffc080 	.word	0xffffc080
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	785b      	ldrb	r3, [r3, #1]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d11a      	bne.n	8005e1a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2250      	movs	r2, #80	@ 0x50
 8005df0:	5a9b      	ldrh	r3, [r3, r2]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	001a      	movs	r2, r3
 8005df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df8:	189b      	adds	r3, r3, r2
 8005dfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	00da      	lsls	r2, r3, #3
 8005e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e04:	18d3      	adds	r3, r2, r3
 8005e06:	4ad9      	ldr	r2, [pc, #868]	@ (800616c <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005e08:	4694      	mov	ip, r2
 8005e0a:	4463      	add	r3, ip
 8005e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e0e:	238c      	movs	r3, #140	@ 0x8c
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e18:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6959      	ldr	r1, [r3, #20]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	891a      	ldrh	r2, [r3, #8]
 8005e26:	238c      	movs	r3, #140	@ 0x8c
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f004 ff6f 	bl	800ad10 <USB_WritePMA>
 8005e32:	e1e9      	b.n	8006208 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2250      	movs	r2, #80	@ 0x50
 8005e3a:	5a9b      	ldrh	r3, [r3, r2]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	001a      	movs	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	18d2      	adds	r2, r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	18d3      	adds	r3, r2, r3
 8005e4e:	4ac8      	ldr	r2, [pc, #800]	@ (8006170 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005e50:	4694      	mov	ip, r2
 8005e52:	4463      	add	r3, ip
 8005e54:	881a      	ldrh	r2, [r3, #0]
 8005e56:	2188      	movs	r1, #136	@ 0x88
 8005e58:	187b      	adds	r3, r7, r1
 8005e5a:	0592      	lsls	r2, r2, #22
 8005e5c:	0d92      	lsrs	r2, r2, #22
 8005e5e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	187b      	adds	r3, r7, r1
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d307      	bcc.n	8005e7c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	699a      	ldr	r2, [r3, #24]
 8005e70:	187b      	adds	r3, r7, r1
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	1ad2      	subs	r2, r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	619a      	str	r2, [r3, #24]
 8005e7a:	e002      	b.n	8005e82 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d000      	beq.n	8005e8c <HAL_PCD_EP_DB_Transmit+0x43c>
 8005e8a:	e0bb      	b.n	8006004 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d125      	bne.n	8005ee0 <HAL_PCD_EP_DB_Transmit+0x490>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2250      	movs	r2, #80	@ 0x50
 8005ea0:	5a9b      	ldrh	r3, [r3, r2]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	001a      	movs	r2, r3
 8005ea6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ea8:	189b      	adds	r3, r3, r2
 8005eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	00da      	lsls	r2, r3, #3
 8005eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005eb4:	18d3      	adds	r3, r2, r3
 8005eb6:	4aad      	ldr	r2, [pc, #692]	@ (800616c <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005eb8:	4694      	mov	ip, r2
 8005eba:	4463      	add	r3, ip
 8005ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	059b      	lsls	r3, r3, #22
 8005ec6:	0d9b      	lsrs	r3, r3, #22
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	4aa7      	ldr	r2, [pc, #668]	@ (8006174 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	e01b      	b.n	8005f18 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d117      	bne.n	8005f18 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	667b      	str	r3, [r7, #100]	@ 0x64
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2250      	movs	r2, #80	@ 0x50
 8005ef4:	5a9b      	ldrh	r3, [r3, r2]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	001a      	movs	r2, r3
 8005efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005efc:	189b      	adds	r3, r3, r2
 8005efe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	00da      	lsls	r2, r3, #3
 8005f06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f08:	18d3      	adds	r3, r2, r3
 8005f0a:	4a98      	ldr	r2, [pc, #608]	@ (800616c <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005f0c:	4694      	mov	ip, r2
 8005f0e:	4463      	add	r3, ip
 8005f10:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f14:	2200      	movs	r2, #0
 8005f16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d12b      	bne.n	8005f7e <HAL_PCD_EP_DB_Transmit+0x52e>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2250      	movs	r2, #80	@ 0x50
 8005f32:	5a9b      	ldrh	r3, [r3, r2]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	001a      	movs	r2, r3
 8005f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f3a:	189b      	adds	r3, r3, r2
 8005f3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	00da      	lsls	r2, r3, #3
 8005f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f46:	18d3      	adds	r3, r2, r3
 8005f48:	4a89      	ldr	r2, [pc, #548]	@ (8006170 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005f4a:	4694      	mov	ip, r2
 8005f4c:	4463      	add	r3, ip
 8005f4e:	2184      	movs	r1, #132	@ 0x84
 8005f50:	187a      	adds	r2, r7, r1
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	059b      	lsls	r3, r3, #22
 8005f5e:	0d9b      	lsrs	r3, r3, #22
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	187b      	adds	r3, r7, r1
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	187b      	adds	r3, r7, r1
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	4a80      	ldr	r2, [pc, #512]	@ (8006174 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	e018      	b.n	8005fb0 <HAL_PCD_EP_DB_Transmit+0x560>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	785b      	ldrb	r3, [r3, #1]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d114      	bne.n	8005fb0 <HAL_PCD_EP_DB_Transmit+0x560>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2250      	movs	r2, #80	@ 0x50
 8005f8c:	5a9b      	ldrh	r3, [r3, r2]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	001a      	movs	r2, r3
 8005f92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f94:	189b      	adds	r3, r3, r2
 8005f96:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	00da      	lsls	r2, r3, #3
 8005f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fa0:	18d3      	adds	r3, r2, r3
 8005fa2:	4a73      	ldr	r2, [pc, #460]	@ (8006170 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005fa4:	4694      	mov	ip, r2
 8005fa6:	4463      	add	r3, ip
 8005fa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fac:	2200      	movs	r2, #0
 8005fae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	781a      	ldrb	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f006 fdbf 	bl	800cb3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fbe:	1dbb      	adds	r3, r7, #6
 8005fc0:	881a      	ldrh	r2, [r3, #0]
 8005fc2:	2380      	movs	r3, #128	@ 0x80
 8005fc4:	01db      	lsls	r3, r3, #7
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d000      	beq.n	8005fcc <HAL_PCD_EP_DB_Transmit+0x57c>
 8005fca:	e11d      	b.n	8006208 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	001a      	movs	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	18d3      	adds	r3, r2, r3
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	2082      	movs	r0, #130	@ 0x82
 8005fe0:	183b      	adds	r3, r7, r0
 8005fe2:	4965      	ldr	r1, [pc, #404]	@ (8006178 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005fe4:	400a      	ands	r2, r1
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	001a      	movs	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	18d3      	adds	r3, r2, r3
 8005ff6:	183a      	adds	r2, r7, r0
 8005ff8:	8812      	ldrh	r2, [r2, #0]
 8005ffa:	4960      	ldr	r1, [pc, #384]	@ (800617c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	b292      	uxth	r2, r2
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	e101      	b.n	8006208 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006004:	1dbb      	adds	r3, r7, #6
 8006006:	881a      	ldrh	r2, [r3, #0]
 8006008:	2380      	movs	r3, #128	@ 0x80
 800600a:	01db      	lsls	r3, r3, #7
 800600c:	4013      	ands	r3, r2
 800600e:	d11a      	bne.n	8006046 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	001a      	movs	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	18d3      	adds	r3, r2, r3
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29a      	uxth	r2, r3
 8006022:	204e      	movs	r0, #78	@ 0x4e
 8006024:	183b      	adds	r3, r7, r0
 8006026:	4954      	ldr	r1, [pc, #336]	@ (8006178 <HAL_PCD_EP_DB_Transmit+0x728>)
 8006028:	400a      	ands	r2, r1
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	001a      	movs	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	183a      	adds	r2, r7, r0
 800603c:	8812      	ldrh	r2, [r2, #0]
 800603e:	494f      	ldr	r1, [pc, #316]	@ (800617c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006040:	430a      	orrs	r2, r1
 8006042:	b292      	uxth	r2, r2
 8006044:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2224      	movs	r2, #36	@ 0x24
 800604a:	5c9b      	ldrb	r3, [r3, r2]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d000      	beq.n	8006052 <HAL_PCD_EP_DB_Transmit+0x602>
 8006050:	e0da      	b.n	8006208 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	2188      	movs	r1, #136	@ 0x88
 8006058:	187b      	adds	r3, r7, r1
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	18d2      	adds	r2, r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	69da      	ldr	r2, [r3, #28]
 8006066:	187b      	adds	r3, r7, r1
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	18d2      	adds	r2, r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	429a      	cmp	r2, r3
 800607a:	d30c      	bcc.n	8006096 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	218c      	movs	r1, #140	@ 0x8c
 8006082:	187a      	adds	r2, r7, r1
 8006084:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	187b      	adds	r3, r7, r1
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	621a      	str	r2, [r3, #32]
 8006094:	e01a      	b.n	80060cc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800609e:	2388      	movs	r3, #136	@ 0x88
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	228c      	movs	r2, #140	@ 0x8c
 80060a6:	18ba      	adds	r2, r7, r2
 80060a8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2224      	movs	r2, #36	@ 0x24
 80060ae:	2100      	movs	r1, #0
 80060b0:	5499      	strb	r1, [r3, r2]
 80060b2:	e00b      	b.n	80060cc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	228c      	movs	r2, #140	@ 0x8c
 80060ba:	18ba      	adds	r2, r7, r2
 80060bc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2200      	movs	r2, #0
 80060c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2224      	movs	r2, #36	@ 0x24
 80060c8:	2100      	movs	r1, #0
 80060ca:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d000      	beq.n	80060dc <HAL_PCD_EP_DB_Transmit+0x68c>
 80060da:	e06d      	b.n	80061b8 <HAL_PCD_EP_DB_Transmit+0x768>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2250      	movs	r2, #80	@ 0x50
 80060e8:	5a9b      	ldrh	r3, [r3, r2]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	001a      	movs	r2, r3
 80060ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060f0:	189b      	adds	r3, r3, r2
 80060f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	00da      	lsls	r2, r3, #3
 80060fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060fc:	18d3      	adds	r3, r2, r3
 80060fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006170 <HAL_PCD_EP_DB_Transmit+0x720>)
 8006100:	4694      	mov	ip, r2
 8006102:	4463      	add	r3, ip
 8006104:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	059b      	lsls	r3, r3, #22
 800610e:	0d9b      	lsrs	r3, r3, #22
 8006110:	b29a      	uxth	r2, r3
 8006112:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006114:	801a      	strh	r2, [r3, #0]
 8006116:	238c      	movs	r3, #140	@ 0x8c
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d108      	bne.n	8006132 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8006120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	4a13      	ldr	r2, [pc, #76]	@ (8006174 <HAL_PCD_EP_DB_Transmit+0x724>)
 8006128:	4313      	orrs	r3, r2
 800612a:	b29a      	uxth	r2, r3
 800612c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	e05e      	b.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006132:	228c      	movs	r2, #140	@ 0x8c
 8006134:	18bb      	adds	r3, r7, r2
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b3e      	cmp	r3, #62	@ 0x3e
 800613a:	d821      	bhi.n	8006180 <HAL_PCD_EP_DB_Transmit+0x730>
 800613c:	18bb      	adds	r3, r7, r2
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006144:	18bb      	adds	r3, r7, r2
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2201      	movs	r2, #1
 800614a:	4013      	ands	r3, r2
 800614c:	d002      	beq.n	8006154 <HAL_PCD_EP_DB_Transmit+0x704>
 800614e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006150:	3301      	adds	r3, #1
 8006152:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29a      	uxth	r2, r3
 800615a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800615c:	b29b      	uxth	r3, r3
 800615e:	029b      	lsls	r3, r3, #10
 8006160:	b29b      	uxth	r3, r3
 8006162:	4313      	orrs	r3, r2
 8006164:	b29a      	uxth	r2, r3
 8006166:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	e041      	b.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800616c:	00000402 	.word	0x00000402
 8006170:	00000406 	.word	0x00000406
 8006174:	ffff8000 	.word	0xffff8000
 8006178:	ffff8f8f 	.word	0xffff8f8f
 800617c:	ffffc080 	.word	0xffffc080
 8006180:	228c      	movs	r2, #140	@ 0x8c
 8006182:	18bb      	adds	r3, r7, r2
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800618a:	18bb      	adds	r3, r7, r2
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	221f      	movs	r2, #31
 8006190:	4013      	ands	r3, r2
 8006192:	d102      	bne.n	800619a <HAL_PCD_EP_DB_Transmit+0x74a>
 8006194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006196:	3b01      	subs	r3, #1
 8006198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800619a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29a      	uxth	r2, r3
 80061a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	029b      	lsls	r3, r3, #10
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	4313      	orrs	r3, r2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006260 <HAL_PCD_EP_DB_Transmit+0x810>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	e01b      	b.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d117      	bne.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2250      	movs	r2, #80	@ 0x50
 80061c6:	5a9b      	ldrh	r3, [r3, r2]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	001a      	movs	r2, r3
 80061cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	00da      	lsls	r2, r3, #3
 80061d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061da:	18d3      	adds	r3, r2, r3
 80061dc:	4a21      	ldr	r2, [pc, #132]	@ (8006264 <HAL_PCD_EP_DB_Transmit+0x814>)
 80061de:	4694      	mov	ip, r2
 80061e0:	4463      	add	r3, ip
 80061e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061e4:	238c      	movs	r3, #140	@ 0x8c
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	6959      	ldr	r1, [r3, #20]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	895a      	ldrh	r2, [r3, #10]
 80061fc:	238c      	movs	r3, #140	@ 0x8c
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f004 fd84 	bl	800ad10 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	001a      	movs	r2, r3
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	18d3      	adds	r3, r2, r3
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b29a      	uxth	r2, r3
 800621a:	2014      	movs	r0, #20
 800621c:	183b      	adds	r3, r7, r0
 800621e:	4912      	ldr	r1, [pc, #72]	@ (8006268 <HAL_PCD_EP_DB_Transmit+0x818>)
 8006220:	400a      	ands	r2, r1
 8006222:	801a      	strh	r2, [r3, #0]
 8006224:	183b      	adds	r3, r7, r0
 8006226:	183a      	adds	r2, r7, r0
 8006228:	8812      	ldrh	r2, [r2, #0]
 800622a:	2110      	movs	r1, #16
 800622c:	404a      	eors	r2, r1
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	183b      	adds	r3, r7, r0
 8006232:	183a      	adds	r2, r7, r0
 8006234:	8812      	ldrh	r2, [r2, #0]
 8006236:	2120      	movs	r1, #32
 8006238:	404a      	eors	r2, r1
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	001a      	movs	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	18d3      	adds	r3, r2, r3
 800624a:	183a      	adds	r2, r7, r0
 800624c:	8812      	ldrh	r2, [r2, #0]
 800624e:	4907      	ldr	r1, [pc, #28]	@ (800626c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8006250:	430a      	orrs	r2, r1
 8006252:	b292      	uxth	r2, r2
 8006254:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	0018      	movs	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	b024      	add	sp, #144	@ 0x90
 800625e:	bd80      	pop	{r7, pc}
 8006260:	ffff8000 	.word	0xffff8000
 8006264:	00000406 	.word	0x00000406
 8006268:	ffff8fbf 	.word	0xffff8fbf
 800626c:	ffff8080 	.word	0xffff8080

08006270 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006270:	b590      	push	{r4, r7, lr}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	0008      	movs	r0, r1
 800627a:	0011      	movs	r1, r2
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	240a      	movs	r4, #10
 8006280:	193b      	adds	r3, r7, r4
 8006282:	1c02      	adds	r2, r0, #0
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	2308      	movs	r3, #8
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	1c0a      	adds	r2, r1, #0
 800628c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800628e:	0021      	movs	r1, r4
 8006290:	187b      	adds	r3, r7, r1
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	2280      	movs	r2, #128	@ 0x80
 8006296:	4013      	ands	r3, r2
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00c      	beq.n	80062b8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800629e:	187b      	adds	r3, r7, r1
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	2207      	movs	r2, #7
 80062a4:	401a      	ands	r2, r3
 80062a6:	0013      	movs	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	189b      	adds	r3, r3, r2
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	3310      	adds	r3, #16
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	18d3      	adds	r3, r2, r3
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	e00b      	b.n	80062d0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062b8:	230a      	movs	r3, #10
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	881a      	ldrh	r2, [r3, #0]
 80062be:	0013      	movs	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	189b      	adds	r3, r3, r2
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	3351      	adds	r3, #81	@ 0x51
 80062c8:	33ff      	adds	r3, #255	@ 0xff
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	18d3      	adds	r3, r2, r3
 80062ce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062d0:	2308      	movs	r3, #8
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d107      	bne.n	80062ea <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2200      	movs	r2, #0
 80062de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	80da      	strh	r2, [r3, #6]
 80062e8:	e00b      	b.n	8006302 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2201      	movs	r2, #1
 80062ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0c1b      	lsrs	r3, r3, #16
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	0018      	movs	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	b007      	add	sp, #28
 800630a:	bd90      	pop	{r4, r7, pc}

0800630c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	23b4      	movs	r3, #180	@ 0xb4
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	2101      	movs	r1, #1
 8006322:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	23b2      	movs	r3, #178	@ 0xb2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	2100      	movs	r1, #0
 800632c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2254      	movs	r2, #84	@ 0x54
 8006332:	5a9b      	ldrh	r3, [r3, r2]
 8006334:	b29b      	uxth	r3, r3
 8006336:	2201      	movs	r2, #1
 8006338:	4313      	orrs	r3, r2
 800633a:	b299      	uxth	r1, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2254      	movs	r2, #84	@ 0x54
 8006340:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2254      	movs	r2, #84	@ 0x54
 8006346:	5a9b      	ldrh	r3, [r3, r2]
 8006348:	b29b      	uxth	r3, r3
 800634a:	2202      	movs	r2, #2
 800634c:	4313      	orrs	r3, r2
 800634e:	b299      	uxth	r1, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2254      	movs	r2, #84	@ 0x54
 8006354:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	b004      	add	sp, #16
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	000a      	movs	r2, r1
 800636a:	1cfb      	adds	r3, r7, #3
 800636c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800636e:	46c0      	nop			@ (mov r8, r8)
 8006370:	46bd      	mov	sp, r7
 8006372:	b002      	add	sp, #8
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d102      	bne.n	800638c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	f000 fb76 	bl	8006a78 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2201      	movs	r2, #1
 8006392:	4013      	ands	r3, r2
 8006394:	d100      	bne.n	8006398 <HAL_RCC_OscConfig+0x20>
 8006396:	e08e      	b.n	80064b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006398:	4bc5      	ldr	r3, [pc, #788]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	220c      	movs	r2, #12
 800639e:	4013      	ands	r3, r2
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d00e      	beq.n	80063c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063a4:	4bc2      	ldr	r3, [pc, #776]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	220c      	movs	r2, #12
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d117      	bne.n	80063e0 <HAL_RCC_OscConfig+0x68>
 80063b0:	4bbf      	ldr	r3, [pc, #764]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	23c0      	movs	r3, #192	@ 0xc0
 80063b6:	025b      	lsls	r3, r3, #9
 80063b8:	401a      	ands	r2, r3
 80063ba:	2380      	movs	r3, #128	@ 0x80
 80063bc:	025b      	lsls	r3, r3, #9
 80063be:	429a      	cmp	r2, r3
 80063c0:	d10e      	bne.n	80063e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c2:	4bbb      	ldr	r3, [pc, #748]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	2380      	movs	r3, #128	@ 0x80
 80063c8:	029b      	lsls	r3, r3, #10
 80063ca:	4013      	ands	r3, r2
 80063cc:	d100      	bne.n	80063d0 <HAL_RCC_OscConfig+0x58>
 80063ce:	e071      	b.n	80064b4 <HAL_RCC_OscConfig+0x13c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d000      	beq.n	80063da <HAL_RCC_OscConfig+0x62>
 80063d8:	e06c      	b.n	80064b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f000 fb4c 	bl	8006a78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d107      	bne.n	80063f8 <HAL_RCC_OscConfig+0x80>
 80063e8:	4bb1      	ldr	r3, [pc, #708]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	4bb0      	ldr	r3, [pc, #704]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80063ee:	2180      	movs	r1, #128	@ 0x80
 80063f0:	0249      	lsls	r1, r1, #9
 80063f2:	430a      	orrs	r2, r1
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	e02f      	b.n	8006458 <HAL_RCC_OscConfig+0xe0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10c      	bne.n	800641a <HAL_RCC_OscConfig+0xa2>
 8006400:	4bab      	ldr	r3, [pc, #684]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4baa      	ldr	r3, [pc, #680]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006406:	49ab      	ldr	r1, [pc, #684]	@ (80066b4 <HAL_RCC_OscConfig+0x33c>)
 8006408:	400a      	ands	r2, r1
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	4ba8      	ldr	r3, [pc, #672]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4ba7      	ldr	r3, [pc, #668]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006412:	49a9      	ldr	r1, [pc, #676]	@ (80066b8 <HAL_RCC_OscConfig+0x340>)
 8006414:	400a      	ands	r2, r1
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	e01e      	b.n	8006458 <HAL_RCC_OscConfig+0xe0>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b05      	cmp	r3, #5
 8006420:	d10e      	bne.n	8006440 <HAL_RCC_OscConfig+0xc8>
 8006422:	4ba3      	ldr	r3, [pc, #652]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4ba2      	ldr	r3, [pc, #648]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006428:	2180      	movs	r1, #128	@ 0x80
 800642a:	02c9      	lsls	r1, r1, #11
 800642c:	430a      	orrs	r2, r1
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	4b9f      	ldr	r3, [pc, #636]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	4b9e      	ldr	r3, [pc, #632]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006436:	2180      	movs	r1, #128	@ 0x80
 8006438:	0249      	lsls	r1, r1, #9
 800643a:	430a      	orrs	r2, r1
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e00b      	b.n	8006458 <HAL_RCC_OscConfig+0xe0>
 8006440:	4b9b      	ldr	r3, [pc, #620]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4b9a      	ldr	r3, [pc, #616]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006446:	499b      	ldr	r1, [pc, #620]	@ (80066b4 <HAL_RCC_OscConfig+0x33c>)
 8006448:	400a      	ands	r2, r1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	4b98      	ldr	r3, [pc, #608]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	4b97      	ldr	r3, [pc, #604]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006452:	4999      	ldr	r1, [pc, #612]	@ (80066b8 <HAL_RCC_OscConfig+0x340>)
 8006454:	400a      	ands	r2, r1
 8006456:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d014      	beq.n	800648a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006460:	f7fd f834 	bl	80034cc <HAL_GetTick>
 8006464:	0003      	movs	r3, r0
 8006466:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800646a:	f7fd f82f 	bl	80034cc <HAL_GetTick>
 800646e:	0002      	movs	r2, r0
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b64      	cmp	r3, #100	@ 0x64
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e2fd      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647c:	4b8c      	ldr	r3, [pc, #560]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	029b      	lsls	r3, r3, #10
 8006484:	4013      	ands	r3, r2
 8006486:	d0f0      	beq.n	800646a <HAL_RCC_OscConfig+0xf2>
 8006488:	e015      	b.n	80064b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800648a:	f7fd f81f 	bl	80034cc <HAL_GetTick>
 800648e:	0003      	movs	r3, r0
 8006490:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006494:	f7fd f81a 	bl	80034cc <HAL_GetTick>
 8006498:	0002      	movs	r2, r0
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b64      	cmp	r3, #100	@ 0x64
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e2e8      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064a6:	4b82      	ldr	r3, [pc, #520]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	2380      	movs	r3, #128	@ 0x80
 80064ac:	029b      	lsls	r3, r3, #10
 80064ae:	4013      	ands	r3, r2
 80064b0:	d1f0      	bne.n	8006494 <HAL_RCC_OscConfig+0x11c>
 80064b2:	e000      	b.n	80064b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2202      	movs	r2, #2
 80064bc:	4013      	ands	r3, r2
 80064be:	d100      	bne.n	80064c2 <HAL_RCC_OscConfig+0x14a>
 80064c0:	e06c      	b.n	800659c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80064c2:	4b7b      	ldr	r3, [pc, #492]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	220c      	movs	r2, #12
 80064c8:	4013      	ands	r3, r2
 80064ca:	d00e      	beq.n	80064ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80064cc:	4b78      	ldr	r3, [pc, #480]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	220c      	movs	r2, #12
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d11f      	bne.n	8006518 <HAL_RCC_OscConfig+0x1a0>
 80064d8:	4b75      	ldr	r3, [pc, #468]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	23c0      	movs	r3, #192	@ 0xc0
 80064de:	025b      	lsls	r3, r3, #9
 80064e0:	401a      	ands	r2, r3
 80064e2:	2380      	movs	r3, #128	@ 0x80
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d116      	bne.n	8006518 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ea:	4b71      	ldr	r3, [pc, #452]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2202      	movs	r2, #2
 80064f0:	4013      	ands	r3, r2
 80064f2:	d005      	beq.n	8006500 <HAL_RCC_OscConfig+0x188>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d001      	beq.n	8006500 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e2bb      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006500:	4b6b      	ldr	r3, [pc, #428]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	22f8      	movs	r2, #248	@ 0xf8
 8006506:	4393      	bics	r3, r2
 8006508:	0019      	movs	r1, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	00da      	lsls	r2, r3, #3
 8006510:	4b67      	ldr	r3, [pc, #412]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006512:	430a      	orrs	r2, r1
 8006514:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006516:	e041      	b.n	800659c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d024      	beq.n	800656a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006520:	4b63      	ldr	r3, [pc, #396]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	4b62      	ldr	r3, [pc, #392]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006526:	2101      	movs	r1, #1
 8006528:	430a      	orrs	r2, r1
 800652a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fc ffce 	bl	80034cc <HAL_GetTick>
 8006530:	0003      	movs	r3, r0
 8006532:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006536:	f7fc ffc9 	bl	80034cc <HAL_GetTick>
 800653a:	0002      	movs	r2, r0
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e297      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006548:	4b59      	ldr	r3, [pc, #356]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2202      	movs	r2, #2
 800654e:	4013      	ands	r3, r2
 8006550:	d0f1      	beq.n	8006536 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006552:	4b57      	ldr	r3, [pc, #348]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	22f8      	movs	r2, #248	@ 0xf8
 8006558:	4393      	bics	r3, r2
 800655a:	0019      	movs	r1, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	00da      	lsls	r2, r3, #3
 8006562:	4b53      	ldr	r3, [pc, #332]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006564:	430a      	orrs	r2, r1
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	e018      	b.n	800659c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800656a:	4b51      	ldr	r3, [pc, #324]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b50      	ldr	r3, [pc, #320]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006570:	2101      	movs	r1, #1
 8006572:	438a      	bics	r2, r1
 8006574:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006576:	f7fc ffa9 	bl	80034cc <HAL_GetTick>
 800657a:	0003      	movs	r3, r0
 800657c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006580:	f7fc ffa4 	bl	80034cc <HAL_GetTick>
 8006584:	0002      	movs	r2, r0
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e272      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006592:	4b47      	ldr	r3, [pc, #284]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2202      	movs	r2, #2
 8006598:	4013      	ands	r3, r2
 800659a:	d1f1      	bne.n	8006580 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2208      	movs	r2, #8
 80065a2:	4013      	ands	r3, r2
 80065a4:	d036      	beq.n	8006614 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d019      	beq.n	80065e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ae:	4b40      	ldr	r3, [pc, #256]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80065b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065b2:	4b3f      	ldr	r3, [pc, #252]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80065b4:	2101      	movs	r1, #1
 80065b6:	430a      	orrs	r2, r1
 80065b8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ba:	f7fc ff87 	bl	80034cc <HAL_GetTick>
 80065be:	0003      	movs	r3, r0
 80065c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065c4:	f7fc ff82 	bl	80034cc <HAL_GetTick>
 80065c8:	0002      	movs	r2, r0
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e250      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065d6:	4b36      	ldr	r3, [pc, #216]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80065d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065da:	2202      	movs	r2, #2
 80065dc:	4013      	ands	r3, r2
 80065de:	d0f1      	beq.n	80065c4 <HAL_RCC_OscConfig+0x24c>
 80065e0:	e018      	b.n	8006614 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065e2:	4b33      	ldr	r3, [pc, #204]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80065e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065e6:	4b32      	ldr	r3, [pc, #200]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80065e8:	2101      	movs	r1, #1
 80065ea:	438a      	bics	r2, r1
 80065ec:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ee:	f7fc ff6d 	bl	80034cc <HAL_GetTick>
 80065f2:	0003      	movs	r3, r0
 80065f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065f8:	f7fc ff68 	bl	80034cc <HAL_GetTick>
 80065fc:	0002      	movs	r2, r0
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e236      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800660a:	4b29      	ldr	r3, [pc, #164]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660e:	2202      	movs	r2, #2
 8006610:	4013      	ands	r3, r2
 8006612:	d1f1      	bne.n	80065f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2204      	movs	r2, #4
 800661a:	4013      	ands	r3, r2
 800661c:	d100      	bne.n	8006620 <HAL_RCC_OscConfig+0x2a8>
 800661e:	e0b5      	b.n	800678c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006620:	201f      	movs	r0, #31
 8006622:	183b      	adds	r3, r7, r0
 8006624:	2200      	movs	r2, #0
 8006626:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006628:	4b21      	ldr	r3, [pc, #132]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	2380      	movs	r3, #128	@ 0x80
 800662e:	055b      	lsls	r3, r3, #21
 8006630:	4013      	ands	r3, r2
 8006632:	d110      	bne.n	8006656 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006634:	4b1e      	ldr	r3, [pc, #120]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	4b1d      	ldr	r3, [pc, #116]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 800663a:	2180      	movs	r1, #128	@ 0x80
 800663c:	0549      	lsls	r1, r1, #21
 800663e:	430a      	orrs	r2, r1
 8006640:	61da      	str	r2, [r3, #28]
 8006642:	4b1b      	ldr	r3, [pc, #108]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 8006644:	69da      	ldr	r2, [r3, #28]
 8006646:	2380      	movs	r3, #128	@ 0x80
 8006648:	055b      	lsls	r3, r3, #21
 800664a:	4013      	ands	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006650:	183b      	adds	r3, r7, r0
 8006652:	2201      	movs	r2, #1
 8006654:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006656:	4b19      	ldr	r3, [pc, #100]	@ (80066bc <HAL_RCC_OscConfig+0x344>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	2380      	movs	r3, #128	@ 0x80
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	4013      	ands	r3, r2
 8006660:	d11a      	bne.n	8006698 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006662:	4b16      	ldr	r3, [pc, #88]	@ (80066bc <HAL_RCC_OscConfig+0x344>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4b15      	ldr	r3, [pc, #84]	@ (80066bc <HAL_RCC_OscConfig+0x344>)
 8006668:	2180      	movs	r1, #128	@ 0x80
 800666a:	0049      	lsls	r1, r1, #1
 800666c:	430a      	orrs	r2, r1
 800666e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006670:	f7fc ff2c 	bl	80034cc <HAL_GetTick>
 8006674:	0003      	movs	r3, r0
 8006676:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800667a:	f7fc ff27 	bl	80034cc <HAL_GetTick>
 800667e:	0002      	movs	r2, r0
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b64      	cmp	r3, #100	@ 0x64
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e1f5      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800668c:	4b0b      	ldr	r3, [pc, #44]	@ (80066bc <HAL_RCC_OscConfig+0x344>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	2380      	movs	r3, #128	@ 0x80
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	4013      	ands	r3, r2
 8006696:	d0f0      	beq.n	800667a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10f      	bne.n	80066c0 <HAL_RCC_OscConfig+0x348>
 80066a0:	4b03      	ldr	r3, [pc, #12]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80066a2:	6a1a      	ldr	r2, [r3, #32]
 80066a4:	4b02      	ldr	r3, [pc, #8]	@ (80066b0 <HAL_RCC_OscConfig+0x338>)
 80066a6:	2101      	movs	r1, #1
 80066a8:	430a      	orrs	r2, r1
 80066aa:	621a      	str	r2, [r3, #32]
 80066ac:	e036      	b.n	800671c <HAL_RCC_OscConfig+0x3a4>
 80066ae:	46c0      	nop			@ (mov r8, r8)
 80066b0:	40021000 	.word	0x40021000
 80066b4:	fffeffff 	.word	0xfffeffff
 80066b8:	fffbffff 	.word	0xfffbffff
 80066bc:	40007000 	.word	0x40007000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10c      	bne.n	80066e2 <HAL_RCC_OscConfig+0x36a>
 80066c8:	4bca      	ldr	r3, [pc, #808]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80066ca:	6a1a      	ldr	r2, [r3, #32]
 80066cc:	4bc9      	ldr	r3, [pc, #804]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80066ce:	2101      	movs	r1, #1
 80066d0:	438a      	bics	r2, r1
 80066d2:	621a      	str	r2, [r3, #32]
 80066d4:	4bc7      	ldr	r3, [pc, #796]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80066d6:	6a1a      	ldr	r2, [r3, #32]
 80066d8:	4bc6      	ldr	r3, [pc, #792]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80066da:	2104      	movs	r1, #4
 80066dc:	438a      	bics	r2, r1
 80066de:	621a      	str	r2, [r3, #32]
 80066e0:	e01c      	b.n	800671c <HAL_RCC_OscConfig+0x3a4>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	d10c      	bne.n	8006704 <HAL_RCC_OscConfig+0x38c>
 80066ea:	4bc2      	ldr	r3, [pc, #776]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80066ec:	6a1a      	ldr	r2, [r3, #32]
 80066ee:	4bc1      	ldr	r3, [pc, #772]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80066f0:	2104      	movs	r1, #4
 80066f2:	430a      	orrs	r2, r1
 80066f4:	621a      	str	r2, [r3, #32]
 80066f6:	4bbf      	ldr	r3, [pc, #764]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80066f8:	6a1a      	ldr	r2, [r3, #32]
 80066fa:	4bbe      	ldr	r3, [pc, #760]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80066fc:	2101      	movs	r1, #1
 80066fe:	430a      	orrs	r2, r1
 8006700:	621a      	str	r2, [r3, #32]
 8006702:	e00b      	b.n	800671c <HAL_RCC_OscConfig+0x3a4>
 8006704:	4bbb      	ldr	r3, [pc, #748]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006706:	6a1a      	ldr	r2, [r3, #32]
 8006708:	4bba      	ldr	r3, [pc, #744]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 800670a:	2101      	movs	r1, #1
 800670c:	438a      	bics	r2, r1
 800670e:	621a      	str	r2, [r3, #32]
 8006710:	4bb8      	ldr	r3, [pc, #736]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	4bb7      	ldr	r3, [pc, #732]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006716:	2104      	movs	r1, #4
 8006718:	438a      	bics	r2, r1
 800671a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d014      	beq.n	800674e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006724:	f7fc fed2 	bl	80034cc <HAL_GetTick>
 8006728:	0003      	movs	r3, r0
 800672a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800672c:	e009      	b.n	8006742 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800672e:	f7fc fecd 	bl	80034cc <HAL_GetTick>
 8006732:	0002      	movs	r2, r0
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	4aaf      	ldr	r2, [pc, #700]	@ (80069f8 <HAL_RCC_OscConfig+0x680>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e19a      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006742:	4bac      	ldr	r3, [pc, #688]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	2202      	movs	r2, #2
 8006748:	4013      	ands	r3, r2
 800674a:	d0f0      	beq.n	800672e <HAL_RCC_OscConfig+0x3b6>
 800674c:	e013      	b.n	8006776 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800674e:	f7fc febd 	bl	80034cc <HAL_GetTick>
 8006752:	0003      	movs	r3, r0
 8006754:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006756:	e009      	b.n	800676c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006758:	f7fc feb8 	bl	80034cc <HAL_GetTick>
 800675c:	0002      	movs	r2, r0
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	4aa5      	ldr	r2, [pc, #660]	@ (80069f8 <HAL_RCC_OscConfig+0x680>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e185      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800676c:	4ba1      	ldr	r3, [pc, #644]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	2202      	movs	r2, #2
 8006772:	4013      	ands	r3, r2
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006776:	231f      	movs	r3, #31
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d105      	bne.n	800678c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006780:	4b9c      	ldr	r3, [pc, #624]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	4b9b      	ldr	r3, [pc, #620]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006786:	499d      	ldr	r1, [pc, #628]	@ (80069fc <HAL_RCC_OscConfig+0x684>)
 8006788:	400a      	ands	r2, r1
 800678a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2210      	movs	r2, #16
 8006792:	4013      	ands	r3, r2
 8006794:	d063      	beq.n	800685e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d12a      	bne.n	80067f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800679e:	4b95      	ldr	r3, [pc, #596]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80067a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067a2:	4b94      	ldr	r3, [pc, #592]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80067a4:	2104      	movs	r1, #4
 80067a6:	430a      	orrs	r2, r1
 80067a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80067aa:	4b92      	ldr	r3, [pc, #584]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80067ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067ae:	4b91      	ldr	r3, [pc, #580]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80067b0:	2101      	movs	r1, #1
 80067b2:	430a      	orrs	r2, r1
 80067b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067b6:	f7fc fe89 	bl	80034cc <HAL_GetTick>
 80067ba:	0003      	movs	r3, r0
 80067bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80067c0:	f7fc fe84 	bl	80034cc <HAL_GetTick>
 80067c4:	0002      	movs	r2, r0
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e152      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80067d2:	4b88      	ldr	r3, [pc, #544]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80067d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d6:	2202      	movs	r2, #2
 80067d8:	4013      	ands	r3, r2
 80067da:	d0f1      	beq.n	80067c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80067dc:	4b85      	ldr	r3, [pc, #532]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80067de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e0:	22f8      	movs	r2, #248	@ 0xf8
 80067e2:	4393      	bics	r3, r2
 80067e4:	0019      	movs	r1, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	00da      	lsls	r2, r3, #3
 80067ec:	4b81      	ldr	r3, [pc, #516]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80067ee:	430a      	orrs	r2, r1
 80067f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80067f2:	e034      	b.n	800685e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	3305      	adds	r3, #5
 80067fa:	d111      	bne.n	8006820 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80067fc:	4b7d      	ldr	r3, [pc, #500]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80067fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006800:	4b7c      	ldr	r3, [pc, #496]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006802:	2104      	movs	r1, #4
 8006804:	438a      	bics	r2, r1
 8006806:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006808:	4b7a      	ldr	r3, [pc, #488]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 800680a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680c:	22f8      	movs	r2, #248	@ 0xf8
 800680e:	4393      	bics	r3, r2
 8006810:	0019      	movs	r1, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	00da      	lsls	r2, r3, #3
 8006818:	4b76      	ldr	r3, [pc, #472]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 800681a:	430a      	orrs	r2, r1
 800681c:	635a      	str	r2, [r3, #52]	@ 0x34
 800681e:	e01e      	b.n	800685e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006820:	4b74      	ldr	r3, [pc, #464]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006824:	4b73      	ldr	r3, [pc, #460]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006826:	2104      	movs	r1, #4
 8006828:	430a      	orrs	r2, r1
 800682a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800682c:	4b71      	ldr	r3, [pc, #452]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 800682e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006830:	4b70      	ldr	r3, [pc, #448]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006832:	2101      	movs	r1, #1
 8006834:	438a      	bics	r2, r1
 8006836:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006838:	f7fc fe48 	bl	80034cc <HAL_GetTick>
 800683c:	0003      	movs	r3, r0
 800683e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006840:	e008      	b.n	8006854 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006842:	f7fc fe43 	bl	80034cc <HAL_GetTick>
 8006846:	0002      	movs	r2, r0
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e111      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006854:	4b67      	ldr	r3, [pc, #412]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006858:	2202      	movs	r2, #2
 800685a:	4013      	ands	r3, r2
 800685c:	d1f1      	bne.n	8006842 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2220      	movs	r2, #32
 8006864:	4013      	ands	r3, r2
 8006866:	d05c      	beq.n	8006922 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006868:	4b62      	ldr	r3, [pc, #392]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	220c      	movs	r2, #12
 800686e:	4013      	ands	r3, r2
 8006870:	2b0c      	cmp	r3, #12
 8006872:	d00e      	beq.n	8006892 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006874:	4b5f      	ldr	r3, [pc, #380]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	220c      	movs	r2, #12
 800687a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800687c:	2b08      	cmp	r3, #8
 800687e:	d114      	bne.n	80068aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006880:	4b5c      	ldr	r3, [pc, #368]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	23c0      	movs	r3, #192	@ 0xc0
 8006886:	025b      	lsls	r3, r3, #9
 8006888:	401a      	ands	r2, r3
 800688a:	23c0      	movs	r3, #192	@ 0xc0
 800688c:	025b      	lsls	r3, r3, #9
 800688e:	429a      	cmp	r2, r3
 8006890:	d10b      	bne.n	80068aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006892:	4b58      	ldr	r3, [pc, #352]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006896:	2380      	movs	r3, #128	@ 0x80
 8006898:	029b      	lsls	r3, r3, #10
 800689a:	4013      	ands	r3, r2
 800689c:	d040      	beq.n	8006920 <HAL_RCC_OscConfig+0x5a8>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d03c      	beq.n	8006920 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e0e6      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01b      	beq.n	80068ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80068b2:	4b50      	ldr	r3, [pc, #320]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80068b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068b6:	4b4f      	ldr	r3, [pc, #316]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80068b8:	2180      	movs	r1, #128	@ 0x80
 80068ba:	0249      	lsls	r1, r1, #9
 80068bc:	430a      	orrs	r2, r1
 80068be:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c0:	f7fc fe04 	bl	80034cc <HAL_GetTick>
 80068c4:	0003      	movs	r3, r0
 80068c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068ca:	f7fc fdff 	bl	80034cc <HAL_GetTick>
 80068ce:	0002      	movs	r2, r0
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e0cd      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80068dc:	4b45      	ldr	r3, [pc, #276]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80068de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068e0:	2380      	movs	r3, #128	@ 0x80
 80068e2:	029b      	lsls	r3, r3, #10
 80068e4:	4013      	ands	r3, r2
 80068e6:	d0f0      	beq.n	80068ca <HAL_RCC_OscConfig+0x552>
 80068e8:	e01b      	b.n	8006922 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80068ea:	4b42      	ldr	r3, [pc, #264]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80068ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ee:	4b41      	ldr	r3, [pc, #260]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80068f0:	4943      	ldr	r1, [pc, #268]	@ (8006a00 <HAL_RCC_OscConfig+0x688>)
 80068f2:	400a      	ands	r2, r1
 80068f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f6:	f7fc fde9 	bl	80034cc <HAL_GetTick>
 80068fa:	0003      	movs	r3, r0
 80068fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006900:	f7fc fde4 	bl	80034cc <HAL_GetTick>
 8006904:	0002      	movs	r2, r0
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e0b2      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006912:	4b38      	ldr	r3, [pc, #224]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006916:	2380      	movs	r3, #128	@ 0x80
 8006918:	029b      	lsls	r3, r3, #10
 800691a:	4013      	ands	r3, r2
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0x588>
 800691e:	e000      	b.n	8006922 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006920:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	d100      	bne.n	800692c <HAL_RCC_OscConfig+0x5b4>
 800692a:	e0a4      	b.n	8006a76 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800692c:	4b31      	ldr	r3, [pc, #196]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	220c      	movs	r2, #12
 8006932:	4013      	ands	r3, r2
 8006934:	2b08      	cmp	r3, #8
 8006936:	d100      	bne.n	800693a <HAL_RCC_OscConfig+0x5c2>
 8006938:	e078      	b.n	8006a2c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	2b02      	cmp	r3, #2
 8006940:	d14c      	bne.n	80069dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006942:	4b2c      	ldr	r3, [pc, #176]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b2b      	ldr	r3, [pc, #172]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006948:	492e      	ldr	r1, [pc, #184]	@ (8006a04 <HAL_RCC_OscConfig+0x68c>)
 800694a:	400a      	ands	r2, r1
 800694c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694e:	f7fc fdbd 	bl	80034cc <HAL_GetTick>
 8006952:	0003      	movs	r3, r0
 8006954:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006958:	f7fc fdb8 	bl	80034cc <HAL_GetTick>
 800695c:	0002      	movs	r2, r0
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e086      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800696a:	4b22      	ldr	r3, [pc, #136]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	2380      	movs	r3, #128	@ 0x80
 8006970:	049b      	lsls	r3, r3, #18
 8006972:	4013      	ands	r3, r2
 8006974:	d1f0      	bne.n	8006958 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006976:	4b1f      	ldr	r3, [pc, #124]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697a:	220f      	movs	r2, #15
 800697c:	4393      	bics	r3, r2
 800697e:	0019      	movs	r1, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006984:	4b1b      	ldr	r3, [pc, #108]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 8006986:	430a      	orrs	r2, r1
 8006988:	62da      	str	r2, [r3, #44]	@ 0x2c
 800698a:	4b1a      	ldr	r3, [pc, #104]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4a1e      	ldr	r2, [pc, #120]	@ (8006a08 <HAL_RCC_OscConfig+0x690>)
 8006990:	4013      	ands	r3, r2
 8006992:	0019      	movs	r1, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699c:	431a      	orrs	r2, r3
 800699e:	4b15      	ldr	r3, [pc, #84]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80069a0:	430a      	orrs	r2, r1
 80069a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069a4:	4b13      	ldr	r3, [pc, #76]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	4b12      	ldr	r3, [pc, #72]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80069aa:	2180      	movs	r1, #128	@ 0x80
 80069ac:	0449      	lsls	r1, r1, #17
 80069ae:	430a      	orrs	r2, r1
 80069b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b2:	f7fc fd8b 	bl	80034cc <HAL_GetTick>
 80069b6:	0003      	movs	r3, r0
 80069b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069bc:	f7fc fd86 	bl	80034cc <HAL_GetTick>
 80069c0:	0002      	movs	r2, r0
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e054      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069ce:	4b09      	ldr	r3, [pc, #36]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	2380      	movs	r3, #128	@ 0x80
 80069d4:	049b      	lsls	r3, r3, #18
 80069d6:	4013      	ands	r3, r2
 80069d8:	d0f0      	beq.n	80069bc <HAL_RCC_OscConfig+0x644>
 80069da:	e04c      	b.n	8006a76 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069dc:	4b05      	ldr	r3, [pc, #20]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4b04      	ldr	r3, [pc, #16]	@ (80069f4 <HAL_RCC_OscConfig+0x67c>)
 80069e2:	4908      	ldr	r1, [pc, #32]	@ (8006a04 <HAL_RCC_OscConfig+0x68c>)
 80069e4:	400a      	ands	r2, r1
 80069e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e8:	f7fc fd70 	bl	80034cc <HAL_GetTick>
 80069ec:	0003      	movs	r3, r0
 80069ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069f0:	e015      	b.n	8006a1e <HAL_RCC_OscConfig+0x6a6>
 80069f2:	46c0      	nop			@ (mov r8, r8)
 80069f4:	40021000 	.word	0x40021000
 80069f8:	00001388 	.word	0x00001388
 80069fc:	efffffff 	.word	0xefffffff
 8006a00:	fffeffff 	.word	0xfffeffff
 8006a04:	feffffff 	.word	0xfeffffff
 8006a08:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a0c:	f7fc fd5e 	bl	80034cc <HAL_GetTick>
 8006a10:	0002      	movs	r2, r0
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e02c      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a1e:	4b18      	ldr	r3, [pc, #96]	@ (8006a80 <HAL_RCC_OscConfig+0x708>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	2380      	movs	r3, #128	@ 0x80
 8006a24:	049b      	lsls	r3, r3, #18
 8006a26:	4013      	ands	r3, r2
 8006a28:	d1f0      	bne.n	8006a0c <HAL_RCC_OscConfig+0x694>
 8006a2a:	e024      	b.n	8006a76 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d101      	bne.n	8006a38 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e01f      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006a38:	4b11      	ldr	r3, [pc, #68]	@ (8006a80 <HAL_RCC_OscConfig+0x708>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006a3e:	4b10      	ldr	r3, [pc, #64]	@ (8006a80 <HAL_RCC_OscConfig+0x708>)
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	23c0      	movs	r3, #192	@ 0xc0
 8006a48:	025b      	lsls	r3, r3, #9
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d10e      	bne.n	8006a72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	220f      	movs	r2, #15
 8006a58:	401a      	ands	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d107      	bne.n	8006a72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	23f0      	movs	r3, #240	@ 0xf0
 8006a66:	039b      	lsls	r3, r3, #14
 8006a68:	401a      	ands	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d001      	beq.n	8006a76 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	0018      	movs	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b008      	add	sp, #32
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40021000 	.word	0x40021000

08006a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0bf      	b.n	8006c18 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a98:	4b61      	ldr	r3, [pc, #388]	@ (8006c20 <HAL_RCC_ClockConfig+0x19c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d911      	bls.n	8006aca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa6:	4b5e      	ldr	r3, [pc, #376]	@ (8006c20 <HAL_RCC_ClockConfig+0x19c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4393      	bics	r3, r2
 8006aae:	0019      	movs	r1, r3
 8006ab0:	4b5b      	ldr	r3, [pc, #364]	@ (8006c20 <HAL_RCC_ClockConfig+0x19c>)
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ab8:	4b59      	ldr	r3, [pc, #356]	@ (8006c20 <HAL_RCC_ClockConfig+0x19c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2201      	movs	r2, #1
 8006abe:	4013      	ands	r3, r2
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d001      	beq.n	8006aca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e0a6      	b.n	8006c18 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	d015      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2204      	movs	r2, #4
 8006ada:	4013      	ands	r3, r2
 8006adc:	d006      	beq.n	8006aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006ade:	4b51      	ldr	r3, [pc, #324]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	4b50      	ldr	r3, [pc, #320]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006ae4:	21e0      	movs	r1, #224	@ 0xe0
 8006ae6:	00c9      	lsls	r1, r1, #3
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aec:	4b4d      	ldr	r3, [pc, #308]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	22f0      	movs	r2, #240	@ 0xf0
 8006af2:	4393      	bics	r3, r2
 8006af4:	0019      	movs	r1, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	4b4a      	ldr	r3, [pc, #296]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006afc:	430a      	orrs	r2, r1
 8006afe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2201      	movs	r2, #1
 8006b06:	4013      	ands	r3, r2
 8006b08:	d04c      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d107      	bne.n	8006b22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b12:	4b44      	ldr	r3, [pc, #272]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	2380      	movs	r3, #128	@ 0x80
 8006b18:	029b      	lsls	r3, r3, #10
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d120      	bne.n	8006b60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e07a      	b.n	8006c18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d107      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	2380      	movs	r3, #128	@ 0x80
 8006b30:	049b      	lsls	r3, r3, #18
 8006b32:	4013      	ands	r3, r2
 8006b34:	d114      	bne.n	8006b60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e06e      	b.n	8006c18 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d107      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006b42:	4b38      	ldr	r3, [pc, #224]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b46:	2380      	movs	r3, #128	@ 0x80
 8006b48:	029b      	lsls	r3, r3, #10
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	d108      	bne.n	8006b60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e062      	b.n	8006c18 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b52:	4b34      	ldr	r3, [pc, #208]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2202      	movs	r2, #2
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d101      	bne.n	8006b60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e05b      	b.n	8006c18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b60:	4b30      	ldr	r3, [pc, #192]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2203      	movs	r2, #3
 8006b66:	4393      	bics	r3, r2
 8006b68:	0019      	movs	r1, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006b70:	430a      	orrs	r2, r1
 8006b72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b74:	f7fc fcaa 	bl	80034cc <HAL_GetTick>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7c:	e009      	b.n	8006b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b7e:	f7fc fca5 	bl	80034cc <HAL_GetTick>
 8006b82:	0002      	movs	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	4a27      	ldr	r2, [pc, #156]	@ (8006c28 <HAL_RCC_ClockConfig+0x1a4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e042      	b.n	8006c18 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b92:	4b24      	ldr	r3, [pc, #144]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	220c      	movs	r2, #12
 8006b98:	401a      	ands	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d1ec      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8006c20 <HAL_RCC_ClockConfig+0x19c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	4013      	ands	r3, r2
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d211      	bcs.n	8006bd6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c20 <HAL_RCC_ClockConfig+0x19c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	4393      	bics	r3, r2
 8006bba:	0019      	movs	r1, r3
 8006bbc:	4b18      	ldr	r3, [pc, #96]	@ (8006c20 <HAL_RCC_ClockConfig+0x19c>)
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc4:	4b16      	ldr	r3, [pc, #88]	@ (8006c20 <HAL_RCC_ClockConfig+0x19c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	4013      	ands	r3, r2
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d001      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e020      	b.n	8006c18 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006be0:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	4a11      	ldr	r2, [pc, #68]	@ (8006c2c <HAL_RCC_ClockConfig+0x1a8>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	0019      	movs	r1, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	4b0d      	ldr	r3, [pc, #52]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006bf4:	f000 f820 	bl	8006c38 <HAL_RCC_GetSysClockFreq>
 8006bf8:	0001      	movs	r1, r0
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <HAL_RCC_ClockConfig+0x1a0>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	091b      	lsrs	r3, r3, #4
 8006c00:	220f      	movs	r2, #15
 8006c02:	4013      	ands	r3, r2
 8006c04:	4a0a      	ldr	r2, [pc, #40]	@ (8006c30 <HAL_RCC_ClockConfig+0x1ac>)
 8006c06:	5cd3      	ldrb	r3, [r2, r3]
 8006c08:	000a      	movs	r2, r1
 8006c0a:	40da      	lsrs	r2, r3
 8006c0c:	4b09      	ldr	r3, [pc, #36]	@ (8006c34 <HAL_RCC_ClockConfig+0x1b0>)
 8006c0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006c10:	2000      	movs	r0, #0
 8006c12:	f7fc fc15 	bl	8003440 <HAL_InitTick>
  
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	0018      	movs	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b004      	add	sp, #16
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40022000 	.word	0x40022000
 8006c24:	40021000 	.word	0x40021000
 8006c28:	00001388 	.word	0x00001388
 8006c2c:	fffff8ff 	.word	0xfffff8ff
 8006c30:	08010dc8 	.word	0x08010dc8
 8006c34:	20000000 	.word	0x20000000

08006c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	2300      	movs	r3, #0
 8006c44:	60bb      	str	r3, [r7, #8]
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006c52:	4b2d      	ldr	r3, [pc, #180]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	220c      	movs	r2, #12
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	2b0c      	cmp	r3, #12
 8006c60:	d046      	beq.n	8006cf0 <HAL_RCC_GetSysClockFreq+0xb8>
 8006c62:	d848      	bhi.n	8006cf6 <HAL_RCC_GetSysClockFreq+0xbe>
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d002      	beq.n	8006c6e <HAL_RCC_GetSysClockFreq+0x36>
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d003      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0x3c>
 8006c6c:	e043      	b.n	8006cf6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c6e:	4b27      	ldr	r3, [pc, #156]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c70:	613b      	str	r3, [r7, #16]
      break;
 8006c72:	e043      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	0c9b      	lsrs	r3, r3, #18
 8006c78:	220f      	movs	r2, #15
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	4a24      	ldr	r2, [pc, #144]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0xd8>)
 8006c7e:	5cd3      	ldrb	r3, [r2, r3]
 8006c80:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006c82:	4b21      	ldr	r3, [pc, #132]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	220f      	movs	r2, #15
 8006c88:	4013      	ands	r3, r2
 8006c8a:	4a22      	ldr	r2, [pc, #136]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0xdc>)
 8006c8c:	5cd3      	ldrb	r3, [r2, r3]
 8006c8e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	23c0      	movs	r3, #192	@ 0xc0
 8006c94:	025b      	lsls	r3, r3, #9
 8006c96:	401a      	ands	r2, r3
 8006c98:	2380      	movs	r3, #128	@ 0x80
 8006c9a:	025b      	lsls	r3, r3, #9
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d109      	bne.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006ca0:	68b9      	ldr	r1, [r7, #8]
 8006ca2:	481a      	ldr	r0, [pc, #104]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006ca4:	f7f9 fa4c 	bl	8000140 <__udivsi3>
 8006ca8:	0003      	movs	r3, r0
 8006caa:	001a      	movs	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4353      	muls	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e01a      	b.n	8006cea <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	23c0      	movs	r3, #192	@ 0xc0
 8006cb8:	025b      	lsls	r3, r3, #9
 8006cba:	401a      	ands	r2, r3
 8006cbc:	23c0      	movs	r3, #192	@ 0xc0
 8006cbe:	025b      	lsls	r3, r3, #9
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d109      	bne.n	8006cd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	4814      	ldr	r0, [pc, #80]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006cc8:	f7f9 fa3a 	bl	8000140 <__udivsi3>
 8006ccc:	0003      	movs	r3, r0
 8006cce:	001a      	movs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4353      	muls	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	480c      	ldr	r0, [pc, #48]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006cdc:	f7f9 fa30 	bl	8000140 <__udivsi3>
 8006ce0:	0003      	movs	r3, r0
 8006ce2:	001a      	movs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4353      	muls	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	613b      	str	r3, [r7, #16]
      break;
 8006cee:	e005      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006cf0:	4b09      	ldr	r3, [pc, #36]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006cf2:	613b      	str	r3, [r7, #16]
      break;
 8006cf4:	e002      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006cf6:	4b05      	ldr	r3, [pc, #20]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006cf8:	613b      	str	r3, [r7, #16]
      break;
 8006cfa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006cfc:	693b      	ldr	r3, [r7, #16]
}
 8006cfe:	0018      	movs	r0, r3
 8006d00:	46bd      	mov	sp, r7
 8006d02:	b006      	add	sp, #24
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	46c0      	nop			@ (mov r8, r8)
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	007a1200 	.word	0x007a1200
 8006d10:	08010de0 	.word	0x08010de0
 8006d14:	08010df0 	.word	0x08010df0
 8006d18:	02dc6c00 	.word	0x02dc6c00

08006d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d20:	4b02      	ldr	r3, [pc, #8]	@ (8006d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	0018      	movs	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	46c0      	nop			@ (mov r8, r8)
 8006d2c:	20000000 	.word	0x20000000

08006d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006d34:	f7ff fff2 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d38:	0001      	movs	r1, r0
 8006d3a:	4b06      	ldr	r3, [pc, #24]	@ (8006d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	2207      	movs	r2, #7
 8006d42:	4013      	ands	r3, r2
 8006d44:	4a04      	ldr	r2, [pc, #16]	@ (8006d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d46:	5cd3      	ldrb	r3, [r2, r3]
 8006d48:	40d9      	lsrs	r1, r3
 8006d4a:	000b      	movs	r3, r1
}    
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	46c0      	nop			@ (mov r8, r8)
 8006d54:	40021000 	.word	0x40021000
 8006d58:	08010dd8 	.word	0x08010dd8

08006d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	2380      	movs	r3, #128	@ 0x80
 8006d72:	025b      	lsls	r3, r3, #9
 8006d74:	4013      	ands	r3, r2
 8006d76:	d100      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006d78:	e08e      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006d7a:	2017      	movs	r0, #23
 8006d7c:	183b      	adds	r3, r7, r0
 8006d7e:	2200      	movs	r2, #0
 8006d80:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d82:	4b6e      	ldr	r3, [pc, #440]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d84:	69da      	ldr	r2, [r3, #28]
 8006d86:	2380      	movs	r3, #128	@ 0x80
 8006d88:	055b      	lsls	r3, r3, #21
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d110      	bne.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d8e:	4b6b      	ldr	r3, [pc, #428]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d90:	69da      	ldr	r2, [r3, #28]
 8006d92:	4b6a      	ldr	r3, [pc, #424]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d94:	2180      	movs	r1, #128	@ 0x80
 8006d96:	0549      	lsls	r1, r1, #21
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	61da      	str	r2, [r3, #28]
 8006d9c:	4b67      	ldr	r3, [pc, #412]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d9e:	69da      	ldr	r2, [r3, #28]
 8006da0:	2380      	movs	r3, #128	@ 0x80
 8006da2:	055b      	lsls	r3, r3, #21
 8006da4:	4013      	ands	r3, r2
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006daa:	183b      	adds	r3, r7, r0
 8006dac:	2201      	movs	r2, #1
 8006dae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db0:	4b63      	ldr	r3, [pc, #396]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	2380      	movs	r3, #128	@ 0x80
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4013      	ands	r3, r2
 8006dba:	d11a      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dbc:	4b60      	ldr	r3, [pc, #384]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4b5f      	ldr	r3, [pc, #380]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006dc2:	2180      	movs	r1, #128	@ 0x80
 8006dc4:	0049      	lsls	r1, r1, #1
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dca:	f7fc fb7f 	bl	80034cc <HAL_GetTick>
 8006dce:	0003      	movs	r3, r0
 8006dd0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd2:	e008      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd4:	f7fc fb7a 	bl	80034cc <HAL_GetTick>
 8006dd8:	0002      	movs	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b64      	cmp	r3, #100	@ 0x64
 8006de0:	d901      	bls.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e0a6      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de6:	4b56      	ldr	r3, [pc, #344]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	2380      	movs	r3, #128	@ 0x80
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	4013      	ands	r3, r2
 8006df0:	d0f0      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006df2:	4b52      	ldr	r3, [pc, #328]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006df4:	6a1a      	ldr	r2, [r3, #32]
 8006df6:	23c0      	movs	r3, #192	@ 0xc0
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d034      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	23c0      	movs	r3, #192	@ 0xc0
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d02c      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e14:	4b49      	ldr	r3, [pc, #292]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	4a4a      	ldr	r2, [pc, #296]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e1e:	4b47      	ldr	r3, [pc, #284]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e20:	6a1a      	ldr	r2, [r3, #32]
 8006e22:	4b46      	ldr	r3, [pc, #280]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e24:	2180      	movs	r1, #128	@ 0x80
 8006e26:	0249      	lsls	r1, r1, #9
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e2c:	4b43      	ldr	r3, [pc, #268]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e2e:	6a1a      	ldr	r2, [r3, #32]
 8006e30:	4b42      	ldr	r3, [pc, #264]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e32:	4945      	ldr	r1, [pc, #276]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006e34:	400a      	ands	r2, r1
 8006e36:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006e38:	4b40      	ldr	r3, [pc, #256]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	4013      	ands	r3, r2
 8006e44:	d013      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e46:	f7fc fb41 	bl	80034cc <HAL_GetTick>
 8006e4a:	0003      	movs	r3, r0
 8006e4c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e4e:	e009      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e50:	f7fc fb3c 	bl	80034cc <HAL_GetTick>
 8006e54:	0002      	movs	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	4a3c      	ldr	r2, [pc, #240]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e067      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e64:	4b35      	ldr	r3, [pc, #212]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	d0f0      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e6e:	4b33      	ldr	r3, [pc, #204]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	4a34      	ldr	r2, [pc, #208]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	0019      	movs	r1, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e82:	2317      	movs	r3, #23
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d105      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	4b2a      	ldr	r3, [pc, #168]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e92:	492f      	ldr	r1, [pc, #188]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006e94:	400a      	ands	r2, r1
 8006e96:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	d009      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ea2:	4b26      	ldr	r3, [pc, #152]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	4393      	bics	r3, r2
 8006eaa:	0019      	movs	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	4b22      	ldr	r3, [pc, #136]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	d009      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec4:	4a23      	ldr	r2, [pc, #140]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	0019      	movs	r1, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	4b1b      	ldr	r3, [pc, #108]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	4013      	ands	r3, r2
 8006edc:	d009      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ede:	4b17      	ldr	r3, [pc, #92]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee2:	2210      	movs	r2, #16
 8006ee4:	4393      	bics	r3, r2
 8006ee6:	0019      	movs	r1, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	4b13      	ldr	r3, [pc, #76]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	2380      	movs	r3, #128	@ 0x80
 8006ef8:	029b      	lsls	r3, r3, #10
 8006efa:	4013      	ands	r3, r2
 8006efc:	d009      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006efe:	4b0f      	ldr	r3, [pc, #60]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f02:	2280      	movs	r2, #128	@ 0x80
 8006f04:	4393      	bics	r3, r2
 8006f06:	0019      	movs	r1, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	2380      	movs	r3, #128	@ 0x80
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	d009      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f1e:	4b07      	ldr	r3, [pc, #28]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f22:	2240      	movs	r2, #64	@ 0x40
 8006f24:	4393      	bics	r3, r2
 8006f26:	0019      	movs	r1, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	695a      	ldr	r2, [r3, #20]
 8006f2c:	4b03      	ldr	r3, [pc, #12]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	0018      	movs	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b006      	add	sp, #24
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	40007000 	.word	0x40007000
 8006f44:	fffffcff 	.word	0xfffffcff
 8006f48:	fffeffff 	.word	0xfffeffff
 8006f4c:	00001388 	.word	0x00001388
 8006f50:	efffffff 	.word	0xefffffff
 8006f54:	fffcffff 	.word	0xfffcffff

08006f58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f58:	b5b0      	push	{r4, r5, r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f60:	230f      	movs	r3, #15
 8006f62:	18fb      	adds	r3, r7, r3
 8006f64:	2201      	movs	r2, #1
 8006f66:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e081      	b.n	8007076 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7f5b      	ldrb	r3, [r3, #29]
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f7fb ff7b 	bl	8002e80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	2210      	movs	r2, #16
 8006f98:	4013      	ands	r3, r2
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d05c      	beq.n	8007058 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	22ca      	movs	r2, #202	@ 0xca
 8006fa4:	625a      	str	r2, [r3, #36]	@ 0x24
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2253      	movs	r2, #83	@ 0x53
 8006fac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006fae:	250f      	movs	r5, #15
 8006fb0:	197c      	adds	r4, r7, r5
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f000 f9c5 	bl	8007344 <RTC_EnterInitMode>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8006fbe:	0028      	movs	r0, r5
 8006fc0:	183b      	adds	r3, r7, r0
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d12c      	bne.n	8007022 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	492b      	ldr	r1, [pc, #172]	@ (8007080 <HAL_RTC_Init+0x128>)
 8006fd4:	400a      	ands	r2, r1
 8006fd6:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6899      	ldr	r1, [r3, #8]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	68d2      	ldr	r2, [r2, #12]
 8006ffe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6919      	ldr	r1, [r3, #16]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	041a      	lsls	r2, r3, #16
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007014:	183c      	adds	r4, r7, r0
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0018      	movs	r0, r3
 800701a:	f000 f9d6 	bl	80073ca <RTC_ExitInitMode>
 800701e:	0003      	movs	r3, r0
 8007020:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8007022:	230f      	movs	r3, #15
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d110      	bne.n	800704e <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4913      	ldr	r1, [pc, #76]	@ (8007084 <HAL_RTC_Init+0x12c>)
 8007038:	400a      	ands	r2, r1
 800703a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	22ff      	movs	r2, #255	@ 0xff
 8007054:	625a      	str	r2, [r3, #36]	@ 0x24
 8007056:	e003      	b.n	8007060 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007058:	230f      	movs	r3, #15
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	2200      	movs	r2, #0
 800705e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8007060:	230f      	movs	r3, #15
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d102      	bne.n	8007070 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007070:	230f      	movs	r3, #15
 8007072:	18fb      	adds	r3, r7, r3
 8007074:	781b      	ldrb	r3, [r3, #0]
}
 8007076:	0018      	movs	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	b004      	add	sp, #16
 800707c:	bdb0      	pop	{r4, r5, r7, pc}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	ff8fffbf 	.word	0xff8fffbf
 8007084:	fffbffff 	.word	0xfffbffff

08007088 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007088:	b5b0      	push	{r4, r5, r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	7f1b      	ldrb	r3, [r3, #28]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d101      	bne.n	80070a4 <HAL_RTC_SetTime+0x1c>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e08e      	b.n	80071c2 <HAL_RTC_SetTime+0x13a>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2202      	movs	r2, #2
 80070ae:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d125      	bne.n	8007102 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2240      	movs	r2, #64	@ 0x40
 80070be:	4013      	ands	r3, r2
 80070c0:	d102      	bne.n	80070c8 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	0018      	movs	r0, r3
 80070ce:	f000 f9a5 	bl	800741c <RTC_ByteToBcd2>
 80070d2:	0003      	movs	r3, r0
 80070d4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	0018      	movs	r0, r3
 80070dc:	f000 f99e 	bl	800741c <RTC_ByteToBcd2>
 80070e0:	0003      	movs	r3, r0
 80070e2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80070e4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	789b      	ldrb	r3, [r3, #2]
 80070ea:	0018      	movs	r0, r3
 80070ec:	f000 f996 	bl	800741c <RTC_ByteToBcd2>
 80070f0:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80070f2:	0022      	movs	r2, r4
 80070f4:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	78db      	ldrb	r3, [r3, #3]
 80070fa:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	e017      	b.n	8007132 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2240      	movs	r2, #64	@ 0x40
 800710a:	4013      	ands	r3, r2
 800710c:	d102      	bne.n	8007114 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2200      	movs	r2, #0
 8007112:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007120:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007126:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	78db      	ldrb	r3, [r3, #3]
 800712c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	22ca      	movs	r2, #202	@ 0xca
 8007138:	625a      	str	r2, [r3, #36]	@ 0x24
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2253      	movs	r2, #83	@ 0x53
 8007140:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007142:	2513      	movs	r5, #19
 8007144:	197c      	adds	r4, r7, r5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	0018      	movs	r0, r3
 800714a:	f000 f8fb 	bl	8007344 <RTC_EnterInitMode>
 800714e:	0003      	movs	r3, r0
 8007150:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8007152:	0028      	movs	r0, r5
 8007154:	183b      	adds	r3, r7, r0
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d120      	bne.n	800719e <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	491a      	ldr	r1, [pc, #104]	@ (80071cc <HAL_RTC_SetTime+0x144>)
 8007164:	400a      	ands	r2, r1
 8007166:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4917      	ldr	r1, [pc, #92]	@ (80071d0 <HAL_RTC_SetTime+0x148>)
 8007174:	400a      	ands	r2, r1
 8007176:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6899      	ldr	r1, [r3, #8]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	431a      	orrs	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007190:	183c      	adds	r4, r7, r0
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	0018      	movs	r0, r3
 8007196:	f000 f918 	bl	80073ca <RTC_ExitInitMode>
 800719a:	0003      	movs	r3, r0
 800719c:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800719e:	2313      	movs	r3, #19
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	22ff      	movs	r2, #255	@ 0xff
 80071b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]

  return status;
 80071bc:	2313      	movs	r3, #19
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	781b      	ldrb	r3, [r3, #0]
}
 80071c2:	0018      	movs	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b006      	add	sp, #24
 80071c8:	bdb0      	pop	{r4, r5, r7, pc}
 80071ca:	46c0      	nop			@ (mov r8, r8)
 80071cc:	007f7f7f 	.word	0x007f7f7f
 80071d0:	fffbffff 	.word	0xfffbffff

080071d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80071d4:	b5b0      	push	{r4, r5, r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	7f1b      	ldrb	r3, [r3, #28]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_RTC_SetDate+0x1c>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e07a      	b.n	80072e6 <HAL_RTC_SetDate+0x112>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2202      	movs	r2, #2
 80071fa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10e      	bne.n	8007220 <HAL_RTC_SetDate+0x4c>
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	001a      	movs	r2, r3
 8007208:	2310      	movs	r3, #16
 800720a:	4013      	ands	r3, r2
 800720c:	d008      	beq.n	8007220 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	785b      	ldrb	r3, [r3, #1]
 8007212:	2210      	movs	r2, #16
 8007214:	4393      	bics	r3, r2
 8007216:	b2db      	uxtb	r3, r3
 8007218:	330a      	adds	r3, #10
 800721a:	b2da      	uxtb	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d11c      	bne.n	8007260 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	78db      	ldrb	r3, [r3, #3]
 800722a:	0018      	movs	r0, r3
 800722c:	f000 f8f6 	bl	800741c <RTC_ByteToBcd2>
 8007230:	0003      	movs	r3, r0
 8007232:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	0018      	movs	r0, r3
 800723a:	f000 f8ef 	bl	800741c <RTC_ByteToBcd2>
 800723e:	0003      	movs	r3, r0
 8007240:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007242:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	789b      	ldrb	r3, [r3, #2]
 8007248:	0018      	movs	r0, r3
 800724a:	f000 f8e7 	bl	800741c <RTC_ByteToBcd2>
 800724e:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007250:	0022      	movs	r2, r4
 8007252:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e00e      	b.n	800727e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	78db      	ldrb	r3, [r3, #3]
 8007264:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	785b      	ldrb	r3, [r3, #1]
 800726a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800726c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007272:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	22ca      	movs	r2, #202	@ 0xca
 8007284:	625a      	str	r2, [r3, #36]	@ 0x24
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2253      	movs	r2, #83	@ 0x53
 800728c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800728e:	2513      	movs	r5, #19
 8007290:	197c      	adds	r4, r7, r5
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	0018      	movs	r0, r3
 8007296:	f000 f855 	bl	8007344 <RTC_EnterInitMode>
 800729a:	0003      	movs	r3, r0
 800729c:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800729e:	0028      	movs	r0, r5
 80072a0:	183b      	adds	r3, r7, r0
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10c      	bne.n	80072c2 <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4910      	ldr	r1, [pc, #64]	@ (80072f0 <HAL_RTC_SetDate+0x11c>)
 80072b0:	400a      	ands	r2, r1
 80072b2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072b4:	183c      	adds	r4, r7, r0
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	0018      	movs	r0, r3
 80072ba:	f000 f886 	bl	80073ca <RTC_ExitInitMode>
 80072be:	0003      	movs	r3, r0
 80072c0:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80072c2:	2313      	movs	r3, #19
 80072c4:	18fb      	adds	r3, r7, r3
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	22ff      	movs	r2, #255	@ 0xff
 80072d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]

  return status;
 80072e0:	2313      	movs	r3, #19
 80072e2:	18fb      	adds	r3, r7, r3
 80072e4:	781b      	ldrb	r3, [r3, #0]
}
 80072e6:	0018      	movs	r0, r3
 80072e8:	46bd      	mov	sp, r7
 80072ea:	b006      	add	sp, #24
 80072ec:	bdb0      	pop	{r4, r5, r7, pc}
 80072ee:	46c0      	nop			@ (mov r8, r8)
 80072f0:	00ffff3f 	.word	0x00ffff3f

080072f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a0e      	ldr	r2, [pc, #56]	@ (8007340 <HAL_RTC_WaitForSynchro+0x4c>)
 8007306:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007308:	f7fc f8e0 	bl	80034cc <HAL_GetTick>
 800730c:	0003      	movs	r3, r0
 800730e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007310:	e00a      	b.n	8007328 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007312:	f7fc f8db 	bl	80034cc <HAL_GetTick>
 8007316:	0002      	movs	r2, r0
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	1ad2      	subs	r2, r2, r3
 800731c:	23fa      	movs	r3, #250	@ 0xfa
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	429a      	cmp	r2, r3
 8007322:	d901      	bls.n	8007328 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e006      	b.n	8007336 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	2220      	movs	r2, #32
 8007330:	4013      	ands	r3, r2
 8007332:	d0ee      	beq.n	8007312 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	0018      	movs	r0, r3
 8007338:	46bd      	mov	sp, r7
 800733a:	b004      	add	sp, #16
 800733c:	bd80      	pop	{r7, pc}
 800733e:	46c0      	nop			@ (mov r8, r8)
 8007340:	0001fd5d 	.word	0x0001fd5d

08007344 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007350:	230f      	movs	r3, #15
 8007352:	18fb      	adds	r3, r7, r3
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	2240      	movs	r2, #64	@ 0x40
 8007360:	4013      	ands	r3, r2
 8007362:	d12b      	bne.n	80073bc <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2180      	movs	r1, #128	@ 0x80
 8007370:	430a      	orrs	r2, r1
 8007372:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007374:	f7fc f8aa 	bl	80034cc <HAL_GetTick>
 8007378:	0003      	movs	r3, r0
 800737a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800737c:	e013      	b.n	80073a6 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800737e:	f7fc f8a5 	bl	80034cc <HAL_GetTick>
 8007382:	0002      	movs	r2, r0
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	200f      	movs	r0, #15
 800738a:	183b      	adds	r3, r7, r0
 800738c:	1839      	adds	r1, r7, r0
 800738e:	7809      	ldrb	r1, [r1, #0]
 8007390:	7019      	strb	r1, [r3, #0]
 8007392:	23fa      	movs	r3, #250	@ 0xfa
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	429a      	cmp	r2, r3
 8007398:	d905      	bls.n	80073a6 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2204      	movs	r2, #4
 800739e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80073a0:	183b      	adds	r3, r7, r0
 80073a2:	2201      	movs	r2, #1
 80073a4:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	2240      	movs	r2, #64	@ 0x40
 80073ae:	4013      	ands	r3, r2
 80073b0:	d104      	bne.n	80073bc <RTC_EnterInitMode+0x78>
 80073b2:	230f      	movs	r3, #15
 80073b4:	18fb      	adds	r3, r7, r3
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d1e0      	bne.n	800737e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80073bc:	230f      	movs	r3, #15
 80073be:	18fb      	adds	r3, r7, r3
 80073c0:	781b      	ldrb	r3, [r3, #0]
}
 80073c2:	0018      	movs	r0, r3
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b004      	add	sp, #16
 80073c8:	bd80      	pop	{r7, pc}

080073ca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80073ca:	b590      	push	{r4, r7, lr}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d2:	240f      	movs	r4, #15
 80073d4:	193b      	adds	r3, r7, r4
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2180      	movs	r1, #128	@ 0x80
 80073e6:	438a      	bics	r2, r1
 80073e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2220      	movs	r2, #32
 80073f2:	4013      	ands	r3, r2
 80073f4:	d10b      	bne.n	800740e <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	0018      	movs	r0, r3
 80073fa:	f7ff ff7b 	bl	80072f4 <HAL_RTC_WaitForSynchro>
 80073fe:	1e03      	subs	r3, r0, #0
 8007400:	d005      	beq.n	800740e <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2204      	movs	r2, #4
 8007406:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007408:	193b      	adds	r3, r7, r4
 800740a:	2201      	movs	r2, #1
 800740c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800740e:	230f      	movs	r3, #15
 8007410:	18fb      	adds	r3, r7, r3
 8007412:	781b      	ldrb	r3, [r3, #0]
}
 8007414:	0018      	movs	r0, r3
 8007416:	46bd      	mov	sp, r7
 8007418:	b005      	add	sp, #20
 800741a:	bd90      	pop	{r4, r7, pc}

0800741c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	0002      	movs	r2, r0
 8007424:	1dfb      	adds	r3, r7, #7
 8007426:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800742c:	e007      	b.n	800743e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3301      	adds	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007434:	1dfb      	adds	r3, r7, #7
 8007436:	1dfa      	adds	r2, r7, #7
 8007438:	7812      	ldrb	r2, [r2, #0]
 800743a:	3a0a      	subs	r2, #10
 800743c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800743e:	1dfb      	adds	r3, r7, #7
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b09      	cmp	r3, #9
 8007444:	d8f3      	bhi.n	800742e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	b2da      	uxtb	r2, r3
 800744e:	1dfb      	adds	r3, r7, #7
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	4313      	orrs	r3, r2
 8007454:	b2db      	uxtb	r3, r3
}
 8007456:	0018      	movs	r0, r3
 8007458:	46bd      	mov	sp, r7
 800745a:	b004      	add	sp, #16
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e0a8      	b.n	80075c4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	2382      	movs	r3, #130	@ 0x82
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	429a      	cmp	r2, r3
 8007484:	d009      	beq.n	800749a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	61da      	str	r2, [r3, #28]
 800748c:	e005      	b.n	800749a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	225d      	movs	r2, #93	@ 0x5d
 80074a4:	5c9b      	ldrb	r3, [r3, r2]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d107      	bne.n	80074bc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	225c      	movs	r2, #92	@ 0x5c
 80074b0:	2100      	movs	r1, #0
 80074b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	0018      	movs	r0, r3
 80074b8:	f7fb fcfa 	bl	8002eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	225d      	movs	r2, #93	@ 0x5d
 80074c0:	2102      	movs	r1, #2
 80074c2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2140      	movs	r1, #64	@ 0x40
 80074d0:	438a      	bics	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	23e0      	movs	r3, #224	@ 0xe0
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	429a      	cmp	r2, r3
 80074de:	d902      	bls.n	80074e6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e002      	b.n	80074ec <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074e6:	2380      	movs	r3, #128	@ 0x80
 80074e8:	015b      	lsls	r3, r3, #5
 80074ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	23f0      	movs	r3, #240	@ 0xf0
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d008      	beq.n	800750a <HAL_SPI_Init+0xaa>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	23e0      	movs	r3, #224	@ 0xe0
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	429a      	cmp	r2, r3
 8007502:	d002      	beq.n	800750a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	2382      	movs	r3, #130	@ 0x82
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	401a      	ands	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6899      	ldr	r1, [r3, #8]
 8007518:	2384      	movs	r3, #132	@ 0x84
 800751a:	021b      	lsls	r3, r3, #8
 800751c:	400b      	ands	r3, r1
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	2102      	movs	r1, #2
 8007526:	400b      	ands	r3, r1
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	2101      	movs	r1, #1
 8007530:	400b      	ands	r3, r1
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6999      	ldr	r1, [r3, #24]
 8007538:	2380      	movs	r3, #128	@ 0x80
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	400b      	ands	r3, r1
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	2138      	movs	r1, #56	@ 0x38
 8007546:	400b      	ands	r3, r1
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	2180      	movs	r1, #128	@ 0x80
 8007550:	400b      	ands	r3, r1
 8007552:	431a      	orrs	r2, r3
 8007554:	0011      	movs	r1, r2
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800755a:	2380      	movs	r3, #128	@ 0x80
 800755c:	019b      	lsls	r3, r3, #6
 800755e:	401a      	ands	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	0c1b      	lsrs	r3, r3, #16
 800756e:	2204      	movs	r2, #4
 8007570:	401a      	ands	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007576:	2110      	movs	r1, #16
 8007578:	400b      	ands	r3, r1
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007580:	2108      	movs	r1, #8
 8007582:	400b      	ands	r3, r1
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68d9      	ldr	r1, [r3, #12]
 800758a:	23f0      	movs	r3, #240	@ 0xf0
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	400b      	ands	r3, r1
 8007590:	431a      	orrs	r2, r3
 8007592:	0011      	movs	r1, r2
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	2380      	movs	r3, #128	@ 0x80
 8007598:	015b      	lsls	r3, r3, #5
 800759a:	401a      	ands	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69da      	ldr	r2, [r3, #28]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4907      	ldr	r1, [pc, #28]	@ (80075cc <HAL_SPI_Init+0x16c>)
 80075b0:	400a      	ands	r2, r1
 80075b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	225d      	movs	r2, #93	@ 0x5d
 80075be:	2101      	movs	r1, #1
 80075c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	0018      	movs	r0, r3
 80075c6:	46bd      	mov	sp, r7
 80075c8:	b004      	add	sp, #16
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	fffff7ff 	.word	0xfffff7ff

080075d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	1dbb      	adds	r3, r7, #6
 80075de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075e0:	231f      	movs	r3, #31
 80075e2:	18fb      	adds	r3, r7, r3
 80075e4:	2200      	movs	r2, #0
 80075e6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	225c      	movs	r2, #92	@ 0x5c
 80075ec:	5c9b      	ldrb	r3, [r3, r2]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <HAL_SPI_Transmit+0x26>
 80075f2:	2302      	movs	r3, #2
 80075f4:	e147      	b.n	8007886 <HAL_SPI_Transmit+0x2b6>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	225c      	movs	r2, #92	@ 0x5c
 80075fa:	2101      	movs	r1, #1
 80075fc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075fe:	f7fb ff65 	bl	80034cc <HAL_GetTick>
 8007602:	0003      	movs	r3, r0
 8007604:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007606:	2316      	movs	r3, #22
 8007608:	18fb      	adds	r3, r7, r3
 800760a:	1dba      	adds	r2, r7, #6
 800760c:	8812      	ldrh	r2, [r2, #0]
 800760e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	225d      	movs	r2, #93	@ 0x5d
 8007614:	5c9b      	ldrb	r3, [r3, r2]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	d004      	beq.n	8007626 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800761c:	231f      	movs	r3, #31
 800761e:	18fb      	adds	r3, r7, r3
 8007620:	2202      	movs	r2, #2
 8007622:	701a      	strb	r2, [r3, #0]
    goto error;
 8007624:	e128      	b.n	8007878 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <HAL_SPI_Transmit+0x64>
 800762c:	1dbb      	adds	r3, r7, #6
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d104      	bne.n	800763e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007634:	231f      	movs	r3, #31
 8007636:	18fb      	adds	r3, r7, r3
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
    goto error;
 800763c:	e11c      	b.n	8007878 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	225d      	movs	r2, #93	@ 0x5d
 8007642:	2103      	movs	r1, #3
 8007644:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1dba      	adds	r2, r7, #6
 8007656:	8812      	ldrh	r2, [r2, #0]
 8007658:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	1dba      	adds	r2, r7, #6
 800765e:	8812      	ldrh	r2, [r2, #0]
 8007660:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2244      	movs	r2, #68	@ 0x44
 800766c:	2100      	movs	r1, #0
 800766e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2246      	movs	r2, #70	@ 0x46
 8007674:	2100      	movs	r1, #0
 8007676:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	2380      	movs	r3, #128	@ 0x80
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	429a      	cmp	r2, r3
 800768e:	d110      	bne.n	80076b2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2140      	movs	r1, #64	@ 0x40
 800769c:	438a      	bics	r2, r1
 800769e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2180      	movs	r1, #128	@ 0x80
 80076ac:	01c9      	lsls	r1, r1, #7
 80076ae:	430a      	orrs	r2, r1
 80076b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2240      	movs	r2, #64	@ 0x40
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b40      	cmp	r3, #64	@ 0x40
 80076be:	d007      	beq.n	80076d0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2140      	movs	r1, #64	@ 0x40
 80076cc:	430a      	orrs	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	23e0      	movs	r3, #224	@ 0xe0
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	429a      	cmp	r2, r3
 80076da:	d952      	bls.n	8007782 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d004      	beq.n	80076ee <HAL_SPI_Transmit+0x11e>
 80076e4:	2316      	movs	r3, #22
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d143      	bne.n	8007776 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f2:	881a      	ldrh	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	1c9a      	adds	r2, r3, #2
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007712:	e030      	b.n	8007776 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	2202      	movs	r2, #2
 800771c:	4013      	ands	r3, r2
 800771e:	2b02      	cmp	r3, #2
 8007720:	d112      	bne.n	8007748 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007726:	881a      	ldrh	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007732:	1c9a      	adds	r2, r3, #2
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007746:	e016      	b.n	8007776 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007748:	f7fb fec0 	bl	80034cc <HAL_GetTick>
 800774c:	0002      	movs	r2, r0
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d802      	bhi.n	800775e <HAL_SPI_Transmit+0x18e>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	3301      	adds	r3, #1
 800775c:	d102      	bne.n	8007764 <HAL_SPI_Transmit+0x194>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d108      	bne.n	8007776 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8007764:	231f      	movs	r3, #31
 8007766:	18fb      	adds	r3, r7, r3
 8007768:	2203      	movs	r2, #3
 800776a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	225d      	movs	r2, #93	@ 0x5d
 8007770:	2101      	movs	r1, #1
 8007772:	5499      	strb	r1, [r3, r2]
          goto error;
 8007774:	e080      	b.n	8007878 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1c9      	bne.n	8007714 <HAL_SPI_Transmit+0x144>
 8007780:	e053      	b.n	800782a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d004      	beq.n	8007794 <HAL_SPI_Transmit+0x1c4>
 800778a:	2316      	movs	r3, #22
 800778c:	18fb      	adds	r3, r7, r3
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d145      	bne.n	8007820 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	7812      	ldrb	r2, [r2, #0]
 80077a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80077ba:	e031      	b.n	8007820 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2202      	movs	r2, #2
 80077c4:	4013      	ands	r3, r2
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d113      	bne.n	80077f2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	330c      	adds	r3, #12
 80077d4:	7812      	ldrb	r2, [r2, #0]
 80077d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077f0:	e016      	b.n	8007820 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077f2:	f7fb fe6b 	bl	80034cc <HAL_GetTick>
 80077f6:	0002      	movs	r2, r0
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d802      	bhi.n	8007808 <HAL_SPI_Transmit+0x238>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	3301      	adds	r3, #1
 8007806:	d102      	bne.n	800780e <HAL_SPI_Transmit+0x23e>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d108      	bne.n	8007820 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800780e:	231f      	movs	r3, #31
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	2203      	movs	r2, #3
 8007814:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	225d      	movs	r2, #93	@ 0x5d
 800781a:	2101      	movs	r1, #1
 800781c:	5499      	strb	r1, [r3, r2]
          goto error;
 800781e:	e02b      	b.n	8007878 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1c8      	bne.n	80077bc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	0018      	movs	r0, r3
 8007832:	f000 fa79 	bl	8007d28 <SPI_EndRxTxTransaction>
 8007836:	1e03      	subs	r3, r0, #0
 8007838:	d002      	beq.n	8007840 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007848:	2300      	movs	r3, #0
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8007866:	231f      	movs	r3, #31
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	2201      	movs	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e003      	b.n	8007878 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	225d      	movs	r2, #93	@ 0x5d
 8007874:	2101      	movs	r1, #1
 8007876:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	225c      	movs	r2, #92	@ 0x5c
 800787c:	2100      	movs	r1, #0
 800787e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007880:	231f      	movs	r3, #31
 8007882:	18fb      	adds	r3, r7, r3
 8007884:	781b      	ldrb	r3, [r3, #0]
}
 8007886:	0018      	movs	r0, r3
 8007888:	46bd      	mov	sp, r7
 800788a:	b008      	add	sp, #32
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	099b      	lsrs	r3, r3, #6
 80078ac:	001a      	movs	r2, r3
 80078ae:	2301      	movs	r3, #1
 80078b0:	4013      	ands	r3, r2
 80078b2:	d10f      	bne.n	80078d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2201      	movs	r2, #1
 80078b8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078ba:	d00b      	beq.n	80078d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	099b      	lsrs	r3, r3, #6
 80078c0:	001a      	movs	r2, r3
 80078c2:	2301      	movs	r3, #1
 80078c4:	4013      	ands	r3, r2
 80078c6:	d005      	beq.n	80078d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	0010      	movs	r0, r2
 80078d0:	4798      	blx	r3
    return;
 80078d2:	e0d5      	b.n	8007a80 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	001a      	movs	r2, r3
 80078da:	2301      	movs	r3, #1
 80078dc:	4013      	ands	r3, r2
 80078de:	d00b      	beq.n	80078f8 <HAL_SPI_IRQHandler+0x68>
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	09db      	lsrs	r3, r3, #7
 80078e4:	001a      	movs	r2, r3
 80078e6:	2301      	movs	r3, #1
 80078e8:	4013      	ands	r3, r2
 80078ea:	d005      	beq.n	80078f8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	0010      	movs	r0, r2
 80078f4:	4798      	blx	r3
    return;
 80078f6:	e0c3      	b.n	8007a80 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	001a      	movs	r2, r3
 80078fe:	2301      	movs	r3, #1
 8007900:	4013      	ands	r3, r2
 8007902:	d10c      	bne.n	800791e <HAL_SPI_IRQHandler+0x8e>
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	001a      	movs	r2, r3
 800790a:	2301      	movs	r3, #1
 800790c:	4013      	ands	r3, r2
 800790e:	d106      	bne.n	800791e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	001a      	movs	r2, r3
 8007916:	2301      	movs	r3, #1
 8007918:	4013      	ands	r3, r2
 800791a:	d100      	bne.n	800791e <HAL_SPI_IRQHandler+0x8e>
 800791c:	e0b0      	b.n	8007a80 <HAL_SPI_IRQHandler+0x1f0>
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	095b      	lsrs	r3, r3, #5
 8007922:	001a      	movs	r2, r3
 8007924:	2301      	movs	r3, #1
 8007926:	4013      	ands	r3, r2
 8007928:	d100      	bne.n	800792c <HAL_SPI_IRQHandler+0x9c>
 800792a:	e0a9      	b.n	8007a80 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	099b      	lsrs	r3, r3, #6
 8007930:	001a      	movs	r2, r3
 8007932:	2301      	movs	r3, #1
 8007934:	4013      	ands	r3, r2
 8007936:	d023      	beq.n	8007980 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	225d      	movs	r2, #93	@ 0x5d
 800793c:	5c9b      	ldrb	r3, [r3, r2]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b03      	cmp	r3, #3
 8007942:	d011      	beq.n	8007968 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007948:	2204      	movs	r2, #4
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	617b      	str	r3, [r7, #20]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	e00b      	b.n	8007980 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007968:	2300      	movs	r3, #0
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	693b      	ldr	r3, [r7, #16]
        return;
 800797e:	e07f      	b.n	8007a80 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	095b      	lsrs	r3, r3, #5
 8007984:	001a      	movs	r2, r3
 8007986:	2301      	movs	r3, #1
 8007988:	4013      	ands	r3, r2
 800798a:	d014      	beq.n	80079b6 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007990:	2201      	movs	r2, #1
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2140      	movs	r1, #64	@ 0x40
 80079b0:	438a      	bics	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	0a1b      	lsrs	r3, r3, #8
 80079ba:	001a      	movs	r2, r3
 80079bc:	2301      	movs	r3, #1
 80079be:	4013      	ands	r3, r2
 80079c0:	d00c      	beq.n	80079dc <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079c6:	2208      	movs	r2, #8
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079ce:	2300      	movs	r3, #0
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	60bb      	str	r3, [r7, #8]
 80079da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d04c      	beq.n	8007a7e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	21e0      	movs	r1, #224	@ 0xe0
 80079f0:	438a      	bics	r2, r1
 80079f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	225d      	movs	r2, #93	@ 0x5d
 80079f8:	2101      	movs	r1, #1
 80079fa:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	2202      	movs	r2, #2
 8007a00:	4013      	ands	r3, r2
 8007a02:	d103      	bne.n	8007a0c <HAL_SPI_IRQHandler+0x17c>
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	2201      	movs	r2, #1
 8007a08:	4013      	ands	r3, r2
 8007a0a:	d032      	beq.n	8007a72 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2103      	movs	r1, #3
 8007a18:	438a      	bics	r2, r1
 8007a1a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d010      	beq.n	8007a46 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a28:	4a17      	ldr	r2, [pc, #92]	@ (8007a88 <HAL_SPI_IRQHandler+0x1f8>)
 8007a2a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7fc fb95 	bl	8004160 <HAL_DMA_Abort_IT>
 8007a36:	1e03      	subs	r3, r0, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a3e:	2240      	movs	r2, #64	@ 0x40
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d016      	beq.n	8007a7c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a52:	4a0d      	ldr	r2, [pc, #52]	@ (8007a88 <HAL_SPI_IRQHandler+0x1f8>)
 8007a54:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f7fc fb80 	bl	8004160 <HAL_DMA_Abort_IT>
 8007a60:	1e03      	subs	r3, r0, #0
 8007a62:	d00b      	beq.n	8007a7c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a68:	2240      	movs	r2, #64	@ 0x40
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007a70:	e004      	b.n	8007a7c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	0018      	movs	r0, r3
 8007a76:	f000 f809 	bl	8007a8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a7a:	e000      	b.n	8007a7e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8007a7c:	46c0      	nop			@ (mov r8, r8)
    return;
 8007a7e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007a80:	46bd      	mov	sp, r7
 8007a82:	b008      	add	sp, #32
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	46c0      	nop			@ (mov r8, r8)
 8007a88:	08007a9d 	.word	0x08007a9d

08007a8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007a94:	46c0      	nop			@ (mov r8, r8)
 8007a96:	46bd      	mov	sp, r7
 8007a98:	b002      	add	sp, #8
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2246      	movs	r2, #70	@ 0x46
 8007aae:	2100      	movs	r1, #0
 8007ab0:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	0018      	movs	r0, r3
 8007abc:	f7ff ffe6 	bl	8007a8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ac0:	46c0      	nop			@ (mov r8, r8)
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	b004      	add	sp, #16
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	1dfb      	adds	r3, r7, #7
 8007ad6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ad8:	f7fb fcf8 	bl	80034cc <HAL_GetTick>
 8007adc:	0002      	movs	r2, r0
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	1a9b      	subs	r3, r3, r2
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	18d3      	adds	r3, r2, r3
 8007ae6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ae8:	f7fb fcf0 	bl	80034cc <HAL_GetTick>
 8007aec:	0003      	movs	r3, r0
 8007aee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007af0:	4b3a      	ldr	r3, [pc, #232]	@ (8007bdc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	015b      	lsls	r3, r3, #5
 8007af6:	0d1b      	lsrs	r3, r3, #20
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	4353      	muls	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007afe:	e058      	b.n	8007bb2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	d055      	beq.n	8007bb2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b06:	f7fb fce1 	bl	80034cc <HAL_GetTick>
 8007b0a:	0002      	movs	r2, r0
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d902      	bls.n	8007b1c <SPI_WaitFlagStateUntilTimeout+0x54>
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d142      	bne.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	21e0      	movs	r1, #224	@ 0xe0
 8007b28:	438a      	bics	r2, r1
 8007b2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	2382      	movs	r3, #130	@ 0x82
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d113      	bne.n	8007b60 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	2380      	movs	r3, #128	@ 0x80
 8007b3e:	021b      	lsls	r3, r3, #8
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d005      	beq.n	8007b50 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	2380      	movs	r3, #128	@ 0x80
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d107      	bne.n	8007b60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2140      	movs	r1, #64	@ 0x40
 8007b5c:	438a      	bics	r2, r1
 8007b5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b64:	2380      	movs	r3, #128	@ 0x80
 8007b66:	019b      	lsls	r3, r3, #6
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d110      	bne.n	8007b8e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	491a      	ldr	r1, [pc, #104]	@ (8007be0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007b78:	400a      	ands	r2, r1
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2180      	movs	r1, #128	@ 0x80
 8007b88:	0189      	lsls	r1, r1, #6
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	225d      	movs	r2, #93	@ 0x5d
 8007b92:	2101      	movs	r1, #1
 8007b94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	225c      	movs	r2, #92	@ 0x5c
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e017      	b.n	8007bd2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	425a      	negs	r2, r3
 8007bc2:	4153      	adcs	r3, r2
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	001a      	movs	r2, r3
 8007bc8:	1dfb      	adds	r3, r7, #7
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d197      	bne.n	8007b00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	b008      	add	sp, #32
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	46c0      	nop			@ (mov r8, r8)
 8007bdc:	20000000 	.word	0x20000000
 8007be0:	ffffdfff 	.word	0xffffdfff

08007be4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08a      	sub	sp, #40	@ 0x28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007bf2:	2317      	movs	r3, #23
 8007bf4:	18fb      	adds	r3, r7, r3
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007bfa:	f7fb fc67 	bl	80034cc <HAL_GetTick>
 8007bfe:	0002      	movs	r2, r0
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	1a9b      	subs	r3, r3, r2
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	18d3      	adds	r3, r2, r3
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007c0a:	f7fb fc5f 	bl	80034cc <HAL_GetTick>
 8007c0e:	0003      	movs	r3, r0
 8007c10:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	330c      	adds	r3, #12
 8007c18:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c1a:	4b41      	ldr	r3, [pc, #260]	@ (8007d20 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	0013      	movs	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	189b      	adds	r3, r3, r2
 8007c24:	00da      	lsls	r2, r3, #3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	0d1b      	lsrs	r3, r3, #20
 8007c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c2c:	4353      	muls	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007c30:	e068      	b.n	8007d04 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	23c0      	movs	r3, #192	@ 0xc0
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d10a      	bne.n	8007c52 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d107      	bne.n	8007c52 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	2117      	movs	r1, #23
 8007c4a:	187b      	adds	r3, r7, r1
 8007c4c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007c4e:	187b      	adds	r3, r7, r1
 8007c50:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	d055      	beq.n	8007d04 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c58:	f7fb fc38 	bl	80034cc <HAL_GetTick>
 8007c5c:	0002      	movs	r2, r0
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d902      	bls.n	8007c6e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d142      	bne.n	8007cf4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	21e0      	movs	r1, #224	@ 0xe0
 8007c7a:	438a      	bics	r2, r1
 8007c7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	2382      	movs	r3, #130	@ 0x82
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d113      	bne.n	8007cb2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	2380      	movs	r3, #128	@ 0x80
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d005      	beq.n	8007ca2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	2380      	movs	r3, #128	@ 0x80
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d107      	bne.n	8007cb2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2140      	movs	r1, #64	@ 0x40
 8007cae:	438a      	bics	r2, r1
 8007cb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cb6:	2380      	movs	r3, #128	@ 0x80
 8007cb8:	019b      	lsls	r3, r3, #6
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d110      	bne.n	8007ce0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4916      	ldr	r1, [pc, #88]	@ (8007d24 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007cca:	400a      	ands	r2, r1
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2180      	movs	r1, #128	@ 0x80
 8007cda:	0189      	lsls	r1, r1, #6
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	225d      	movs	r2, #93	@ 0x5d
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	225c      	movs	r2, #92	@ 0x5c
 8007cec:	2100      	movs	r1, #0
 8007cee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e010      	b.n	8007d16 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d18e      	bne.n	8007c32 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	0018      	movs	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b00a      	add	sp, #40	@ 0x28
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	46c0      	nop			@ (mov r8, r8)
 8007d20:	20000000 	.word	0x20000000
 8007d24:	ffffdfff 	.word	0xffffdfff

08007d28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	23c0      	movs	r3, #192	@ 0xc0
 8007d38:	0159      	lsls	r1, r3, #5
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	0013      	movs	r3, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	f7ff ff4e 	bl	8007be4 <SPI_WaitFifoStateUntilTimeout>
 8007d48:	1e03      	subs	r3, r0, #0
 8007d4a:	d007      	beq.n	8007d5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d50:	2220      	movs	r2, #32
 8007d52:	431a      	orrs	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e027      	b.n	8007dac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	0013      	movs	r3, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	2180      	movs	r1, #128	@ 0x80
 8007d6a:	f7ff fead 	bl	8007ac8 <SPI_WaitFlagStateUntilTimeout>
 8007d6e:	1e03      	subs	r3, r0, #0
 8007d70:	d007      	beq.n	8007d82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d76:	2220      	movs	r2, #32
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e014      	b.n	8007dac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	23c0      	movs	r3, #192	@ 0xc0
 8007d86:	00d9      	lsls	r1, r3, #3
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	0013      	movs	r3, r2
 8007d90:	2200      	movs	r2, #0
 8007d92:	f7ff ff27 	bl	8007be4 <SPI_WaitFifoStateUntilTimeout>
 8007d96:	1e03      	subs	r3, r0, #0
 8007d98:	d007      	beq.n	8007daa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d9e:	2220      	movs	r2, #32
 8007da0:	431a      	orrs	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e000      	b.n	8007dac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	0018      	movs	r0, r3
 8007dae:	46bd      	mov	sp, r7
 8007db0:	b004      	add	sp, #16
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e090      	b.n	8007eea <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	223d      	movs	r2, #61	@ 0x3d
 8007dcc:	5c9b      	ldrb	r3, [r3, r2]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d107      	bne.n	8007de4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	223c      	movs	r2, #60	@ 0x3c
 8007dd8:	2100      	movs	r1, #0
 8007dda:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	0018      	movs	r0, r3
 8007de0:	f7fb f90c 	bl	8002ffc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	223d      	movs	r2, #61	@ 0x3d
 8007de8:	2102      	movs	r1, #2
 8007dea:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	493f      	ldr	r1, [pc, #252]	@ (8007ef4 <HAL_TIM_Encoder_Init+0x140>)
 8007df8:	400a      	ands	r2, r1
 8007dfa:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3304      	adds	r3, #4
 8007e04:	0019      	movs	r1, r3
 8007e06:	0010      	movs	r0, r2
 8007e08:	f000 f920 	bl	800804c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	4a31      	ldr	r2, [pc, #196]	@ (8007ef8 <HAL_TIM_Encoder_Init+0x144>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	4313      	orrs	r3, r2
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8007efc <HAL_TIM_Encoder_Init+0x148>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	4a2b      	ldr	r2, [pc, #172]	@ (8007f00 <HAL_TIM_Encoder_Init+0x14c>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	68da      	ldr	r2, [r3, #12]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	021b      	lsls	r3, r3, #8
 8007e62:	4313      	orrs	r3, r2
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	011a      	lsls	r2, r3, #4
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	031b      	lsls	r3, r3, #12
 8007e76:	4313      	orrs	r3, r2
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2222      	movs	r2, #34	@ 0x22
 8007e82:	4393      	bics	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2288      	movs	r2, #136	@ 0x88
 8007e8a:	4393      	bics	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2246      	movs	r2, #70	@ 0x46
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	223e      	movs	r2, #62	@ 0x3e
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	223f      	movs	r2, #63	@ 0x3f
 8007ecc:	2101      	movs	r1, #1
 8007ece:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2242      	movs	r2, #66	@ 0x42
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2243      	movs	r2, #67	@ 0x43
 8007edc:	2101      	movs	r1, #1
 8007ede:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	223d      	movs	r2, #61	@ 0x3d
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	0018      	movs	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b006      	add	sp, #24
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	46c0      	nop			@ (mov r8, r8)
 8007ef4:	ffffbff8 	.word	0xffffbff8
 8007ef8:	fffffcfc 	.word	0xfffffcfc
 8007efc:	fffff3f3 	.word	0xfffff3f3
 8007f00:	ffff0f0f 	.word	0xffff0f0f

08007f04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f04:	b590      	push	{r4, r7, lr}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f0e:	200f      	movs	r0, #15
 8007f10:	183b      	adds	r3, r7, r0
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	213e      	movs	r1, #62	@ 0x3e
 8007f16:	5c52      	ldrb	r2, [r2, r1]
 8007f18:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f1a:	230e      	movs	r3, #14
 8007f1c:	18fb      	adds	r3, r7, r3
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	213f      	movs	r1, #63	@ 0x3f
 8007f22:	5c52      	ldrb	r2, [r2, r1]
 8007f24:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f26:	240d      	movs	r4, #13
 8007f28:	193b      	adds	r3, r7, r4
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	2142      	movs	r1, #66	@ 0x42
 8007f2e:	5c52      	ldrb	r2, [r2, r1]
 8007f30:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f32:	230c      	movs	r3, #12
 8007f34:	18fb      	adds	r3, r7, r3
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	2143      	movs	r1, #67	@ 0x43
 8007f3a:	5c52      	ldrb	r2, [r2, r1]
 8007f3c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d112      	bne.n	8007f6a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f44:	183b      	adds	r3, r7, r0
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d103      	bne.n	8007f54 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f4c:	193b      	adds	r3, r7, r4
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d001      	beq.n	8007f58 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e075      	b.n	8008044 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	223e      	movs	r2, #62	@ 0x3e
 8007f5c:	2102      	movs	r1, #2
 8007f5e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2242      	movs	r2, #66	@ 0x42
 8007f64:	2102      	movs	r1, #2
 8007f66:	5499      	strb	r1, [r3, r2]
 8007f68:	e03d      	b.n	8007fe6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d114      	bne.n	8007f9a <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f70:	230e      	movs	r3, #14
 8007f72:	18fb      	adds	r3, r7, r3
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d104      	bne.n	8007f84 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	18fb      	adds	r3, r7, r3
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d001      	beq.n	8007f88 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e05d      	b.n	8008044 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	223f      	movs	r2, #63	@ 0x3f
 8007f8c:	2102      	movs	r1, #2
 8007f8e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2243      	movs	r2, #67	@ 0x43
 8007f94:	2102      	movs	r1, #2
 8007f96:	5499      	strb	r1, [r3, r2]
 8007f98:	e025      	b.n	8007fe6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f9a:	230f      	movs	r3, #15
 8007f9c:	18fb      	adds	r3, r7, r3
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d10e      	bne.n	8007fc2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fa4:	230e      	movs	r3, #14
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d109      	bne.n	8007fc2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fae:	230d      	movs	r3, #13
 8007fb0:	18fb      	adds	r3, r7, r3
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d104      	bne.n	8007fc2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fb8:	230c      	movs	r3, #12
 8007fba:	18fb      	adds	r3, r7, r3
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d001      	beq.n	8007fc6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e03e      	b.n	8008044 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	223e      	movs	r2, #62	@ 0x3e
 8007fca:	2102      	movs	r1, #2
 8007fcc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	223f      	movs	r2, #63	@ 0x3f
 8007fd2:	2102      	movs	r1, #2
 8007fd4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2242      	movs	r2, #66	@ 0x42
 8007fda:	2102      	movs	r1, #2
 8007fdc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2243      	movs	r2, #67	@ 0x43
 8007fe2:	2102      	movs	r1, #2
 8007fe4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <HAL_TIM_Encoder_Start+0xf0>
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d008      	beq.n	8008004 <HAL_TIM_Encoder_Start+0x100>
 8007ff2:	e00f      	b.n	8008014 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	f000 f8b3 	bl	8008168 <TIM_CCxChannelCmd>
      break;
 8008002:	e016      	b.n	8008032 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2201      	movs	r2, #1
 800800a:	2104      	movs	r1, #4
 800800c:	0018      	movs	r0, r3
 800800e:	f000 f8ab 	bl	8008168 <TIM_CCxChannelCmd>
      break;
 8008012:	e00e      	b.n	8008032 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2201      	movs	r2, #1
 800801a:	2100      	movs	r1, #0
 800801c:	0018      	movs	r0, r3
 800801e:	f000 f8a3 	bl	8008168 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2201      	movs	r2, #1
 8008028:	2104      	movs	r1, #4
 800802a:	0018      	movs	r0, r3
 800802c:	f000 f89c 	bl	8008168 <TIM_CCxChannelCmd>
      break;
 8008030:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2101      	movs	r1, #1
 800803e:	430a      	orrs	r2, r1
 8008040:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	0018      	movs	r0, r3
 8008046:	46bd      	mov	sp, r7
 8008048:	b005      	add	sp, #20
 800804a:	bd90      	pop	{r4, r7, pc}

0800804c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a3b      	ldr	r2, [pc, #236]	@ (800814c <TIM_Base_SetConfig+0x100>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d008      	beq.n	8008076 <TIM_Base_SetConfig+0x2a>
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	2380      	movs	r3, #128	@ 0x80
 8008068:	05db      	lsls	r3, r3, #23
 800806a:	429a      	cmp	r2, r3
 800806c:	d003      	beq.n	8008076 <TIM_Base_SetConfig+0x2a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a37      	ldr	r2, [pc, #220]	@ (8008150 <TIM_Base_SetConfig+0x104>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d108      	bne.n	8008088 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2270      	movs	r2, #112	@ 0x70
 800807a:	4393      	bics	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a30      	ldr	r2, [pc, #192]	@ (800814c <TIM_Base_SetConfig+0x100>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d018      	beq.n	80080c2 <TIM_Base_SetConfig+0x76>
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	2380      	movs	r3, #128	@ 0x80
 8008094:	05db      	lsls	r3, r3, #23
 8008096:	429a      	cmp	r2, r3
 8008098:	d013      	beq.n	80080c2 <TIM_Base_SetConfig+0x76>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a2c      	ldr	r2, [pc, #176]	@ (8008150 <TIM_Base_SetConfig+0x104>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00f      	beq.n	80080c2 <TIM_Base_SetConfig+0x76>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a2b      	ldr	r2, [pc, #172]	@ (8008154 <TIM_Base_SetConfig+0x108>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00b      	beq.n	80080c2 <TIM_Base_SetConfig+0x76>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a2a      	ldr	r2, [pc, #168]	@ (8008158 <TIM_Base_SetConfig+0x10c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d007      	beq.n	80080c2 <TIM_Base_SetConfig+0x76>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a29      	ldr	r2, [pc, #164]	@ (800815c <TIM_Base_SetConfig+0x110>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_Base_SetConfig+0x76>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a28      	ldr	r2, [pc, #160]	@ (8008160 <TIM_Base_SetConfig+0x114>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d108      	bne.n	80080d4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4a27      	ldr	r2, [pc, #156]	@ (8008164 <TIM_Base_SetConfig+0x118>)
 80080c6:	4013      	ands	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2280      	movs	r2, #128	@ 0x80
 80080d8:	4393      	bics	r3, r2
 80080da:	001a      	movs	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a13      	ldr	r2, [pc, #76]	@ (800814c <TIM_Base_SetConfig+0x100>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00b      	beq.n	800811a <TIM_Base_SetConfig+0xce>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a14      	ldr	r2, [pc, #80]	@ (8008158 <TIM_Base_SetConfig+0x10c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d007      	beq.n	800811a <TIM_Base_SetConfig+0xce>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a13      	ldr	r2, [pc, #76]	@ (800815c <TIM_Base_SetConfig+0x110>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d003      	beq.n	800811a <TIM_Base_SetConfig+0xce>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a12      	ldr	r2, [pc, #72]	@ (8008160 <TIM_Base_SetConfig+0x114>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d103      	bne.n	8008122 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	691a      	ldr	r2, [r3, #16]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	2201      	movs	r2, #1
 800812e:	4013      	ands	r3, r2
 8008130:	2b01      	cmp	r3, #1
 8008132:	d106      	bne.n	8008142 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2201      	movs	r2, #1
 800813a:	4393      	bics	r3, r2
 800813c:	001a      	movs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	611a      	str	r2, [r3, #16]
  }
}
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	46bd      	mov	sp, r7
 8008146:	b004      	add	sp, #16
 8008148:	bd80      	pop	{r7, pc}
 800814a:	46c0      	nop			@ (mov r8, r8)
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40000400 	.word	0x40000400
 8008154:	40002000 	.word	0x40002000
 8008158:	40014000 	.word	0x40014000
 800815c:	40014400 	.word	0x40014400
 8008160:	40014800 	.word	0x40014800
 8008164:	fffffcff 	.word	0xfffffcff

08008168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	221f      	movs	r2, #31
 8008178:	4013      	ands	r3, r2
 800817a:	2201      	movs	r2, #1
 800817c:	409a      	lsls	r2, r3
 800817e:	0013      	movs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	43d2      	mvns	r2, r2
 800818a:	401a      	ands	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1a      	ldr	r2, [r3, #32]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	211f      	movs	r1, #31
 8008198:	400b      	ands	r3, r1
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	4099      	lsls	r1, r3
 800819e:	000b      	movs	r3, r1
 80081a0:	431a      	orrs	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b006      	add	sp, #24
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	223c      	movs	r2, #60	@ 0x3c
 80081be:	5c9b      	ldrb	r3, [r3, r2]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e047      	b.n	8008258 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	223c      	movs	r2, #60	@ 0x3c
 80081cc:	2101      	movs	r1, #1
 80081ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	223d      	movs	r2, #61	@ 0x3d
 80081d4:	2102      	movs	r1, #2
 80081d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2270      	movs	r2, #112	@ 0x70
 80081ec:	4393      	bics	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a16      	ldr	r2, [pc, #88]	@ (8008260 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00f      	beq.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	2380      	movs	r3, #128	@ 0x80
 8008212:	05db      	lsls	r3, r3, #23
 8008214:	429a      	cmp	r2, r3
 8008216:	d009      	beq.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a11      	ldr	r2, [pc, #68]	@ (8008264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d004      	beq.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a10      	ldr	r2, [pc, #64]	@ (8008268 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d10c      	bne.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2280      	movs	r2, #128	@ 0x80
 8008230:	4393      	bics	r3, r2
 8008232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	4313      	orrs	r3, r2
 800823c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	223d      	movs	r2, #61	@ 0x3d
 800824a:	2101      	movs	r1, #1
 800824c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	223c      	movs	r2, #60	@ 0x3c
 8008252:	2100      	movs	r1, #0
 8008254:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	0018      	movs	r0, r3
 800825a:	46bd      	mov	sp, r7
 800825c:	b004      	add	sp, #16
 800825e:	bd80      	pop	{r7, pc}
 8008260:	40012c00 	.word	0x40012c00
 8008264:	40000400 	.word	0x40000400
 8008268:	40014000 	.word	0x40014000

0800826c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e044      	b.n	8008308 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d107      	bne.n	8008296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2278      	movs	r2, #120	@ 0x78
 800828a:	2100      	movs	r1, #0
 800828c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	0018      	movs	r0, r3
 8008292:	f7fa ff3b 	bl	800310c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2224      	movs	r2, #36	@ 0x24
 800829a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2101      	movs	r1, #1
 80082a8:	438a      	bics	r2, r1
 80082aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	0018      	movs	r0, r3
 80082b8:	f000 fa24 	bl	8008704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	0018      	movs	r0, r3
 80082c0:	f000 f898 	bl	80083f4 <UART_SetConfig>
 80082c4:	0003      	movs	r3, r0
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e01c      	b.n	8008308 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	490d      	ldr	r1, [pc, #52]	@ (8008310 <HAL_UART_Init+0xa4>)
 80082da:	400a      	ands	r2, r1
 80082dc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	212a      	movs	r1, #42	@ 0x2a
 80082ea:	438a      	bics	r2, r1
 80082ec:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2101      	movs	r1, #1
 80082fa:	430a      	orrs	r2, r1
 80082fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	0018      	movs	r0, r3
 8008302:	f000 fab3 	bl	800886c <UART_CheckIdleState>
 8008306:	0003      	movs	r3, r0
}
 8008308:	0018      	movs	r0, r3
 800830a:	46bd      	mov	sp, r7
 800830c:	b002      	add	sp, #8
 800830e:	bd80      	pop	{r7, pc}
 8008310:	ffffb7ff 	.word	0xffffb7ff

08008314 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	1dbb      	adds	r3, r7, #6
 8008320:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008326:	2b20      	cmp	r3, #32
 8008328:	d15b      	bne.n	80083e2 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <HAL_UART_Transmit_IT+0x24>
 8008330:	1dbb      	adds	r3, r7, #6
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e053      	b.n	80083e4 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	2380      	movs	r3, #128	@ 0x80
 8008342:	015b      	lsls	r3, r3, #5
 8008344:	429a      	cmp	r2, r3
 8008346:	d109      	bne.n	800835c <HAL_UART_Transmit_IT+0x48>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d105      	bne.n	800835c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2201      	movs	r2, #1
 8008354:	4013      	ands	r3, r2
 8008356:	d001      	beq.n	800835c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e043      	b.n	80083e4 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1dba      	adds	r2, r7, #6
 8008366:	2150      	movs	r1, #80	@ 0x50
 8008368:	8812      	ldrh	r2, [r2, #0]
 800836a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	1dba      	adds	r2, r7, #6
 8008370:	2152      	movs	r1, #82	@ 0x52
 8008372:	8812      	ldrh	r2, [r2, #0]
 8008374:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2284      	movs	r2, #132	@ 0x84
 8008380:	2100      	movs	r1, #0
 8008382:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2221      	movs	r2, #33	@ 0x21
 8008388:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	2380      	movs	r3, #128	@ 0x80
 8008390:	015b      	lsls	r3, r3, #5
 8008392:	429a      	cmp	r2, r3
 8008394:	d107      	bne.n	80083a6 <HAL_UART_Transmit_IT+0x92>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d103      	bne.n	80083a6 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4a12      	ldr	r2, [pc, #72]	@ (80083ec <HAL_UART_Transmit_IT+0xd8>)
 80083a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80083a4:	e002      	b.n	80083ac <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4a11      	ldr	r2, [pc, #68]	@ (80083f0 <HAL_UART_Transmit_IT+0xdc>)
 80083aa:	66da      	str	r2, [r3, #108]	@ 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ac:	f3ef 8310 	mrs	r3, PRIMASK
 80083b0:	613b      	str	r3, [r7, #16]
  return(result);
 80083b2:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80083b4:	61fb      	str	r3, [r7, #28]
 80083b6:	2301      	movs	r3, #1
 80083b8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f383 8810 	msr	PRIMASK, r3
}
 80083c0:	46c0      	nop			@ (mov r8, r8)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2180      	movs	r1, #128	@ 0x80
 80083ce:	430a      	orrs	r2, r1
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	f383 8810 	msr	PRIMASK, r3
}
 80083dc:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	e000      	b.n	80083e4 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80083e2:	2302      	movs	r3, #2
  }
}
 80083e4:	0018      	movs	r0, r3
 80083e6:	46bd      	mov	sp, r7
 80083e8:	b008      	add	sp, #32
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	08008c17 	.word	0x08008c17
 80083f0:	08008b65 	.word	0x08008b65

080083f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083fc:	231e      	movs	r3, #30
 80083fe:	18fb      	adds	r3, r7, r3
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	431a      	orrs	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	431a      	orrs	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4aaf      	ldr	r2, [pc, #700]	@ (80086e0 <UART_SetConfig+0x2ec>)
 8008424:	4013      	ands	r3, r2
 8008426:	0019      	movs	r1, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	430a      	orrs	r2, r1
 8008430:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	4aaa      	ldr	r2, [pc, #680]	@ (80086e4 <UART_SetConfig+0x2f0>)
 800843a:	4013      	ands	r3, r2
 800843c:	0019      	movs	r1, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	4aa1      	ldr	r2, [pc, #644]	@ (80086e8 <UART_SetConfig+0x2f4>)
 8008462:	4013      	ands	r3, r2
 8008464:	0019      	movs	r1, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	430a      	orrs	r2, r1
 800846e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a9d      	ldr	r2, [pc, #628]	@ (80086ec <UART_SetConfig+0x2f8>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d127      	bne.n	80084ca <UART_SetConfig+0xd6>
 800847a:	4b9d      	ldr	r3, [pc, #628]	@ (80086f0 <UART_SetConfig+0x2fc>)
 800847c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847e:	2203      	movs	r2, #3
 8008480:	4013      	ands	r3, r2
 8008482:	2b03      	cmp	r3, #3
 8008484:	d00d      	beq.n	80084a2 <UART_SetConfig+0xae>
 8008486:	d81b      	bhi.n	80084c0 <UART_SetConfig+0xcc>
 8008488:	2b02      	cmp	r3, #2
 800848a:	d014      	beq.n	80084b6 <UART_SetConfig+0xc2>
 800848c:	d818      	bhi.n	80084c0 <UART_SetConfig+0xcc>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <UART_SetConfig+0xa4>
 8008492:	2b01      	cmp	r3, #1
 8008494:	d00a      	beq.n	80084ac <UART_SetConfig+0xb8>
 8008496:	e013      	b.n	80084c0 <UART_SetConfig+0xcc>
 8008498:	231f      	movs	r3, #31
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	2200      	movs	r2, #0
 800849e:	701a      	strb	r2, [r3, #0]
 80084a0:	e065      	b.n	800856e <UART_SetConfig+0x17a>
 80084a2:	231f      	movs	r3, #31
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	2202      	movs	r2, #2
 80084a8:	701a      	strb	r2, [r3, #0]
 80084aa:	e060      	b.n	800856e <UART_SetConfig+0x17a>
 80084ac:	231f      	movs	r3, #31
 80084ae:	18fb      	adds	r3, r7, r3
 80084b0:	2204      	movs	r2, #4
 80084b2:	701a      	strb	r2, [r3, #0]
 80084b4:	e05b      	b.n	800856e <UART_SetConfig+0x17a>
 80084b6:	231f      	movs	r3, #31
 80084b8:	18fb      	adds	r3, r7, r3
 80084ba:	2208      	movs	r2, #8
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	e056      	b.n	800856e <UART_SetConfig+0x17a>
 80084c0:	231f      	movs	r3, #31
 80084c2:	18fb      	adds	r3, r7, r3
 80084c4:	2210      	movs	r2, #16
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	e051      	b.n	800856e <UART_SetConfig+0x17a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a89      	ldr	r2, [pc, #548]	@ (80086f4 <UART_SetConfig+0x300>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d134      	bne.n	800853e <UART_SetConfig+0x14a>
 80084d4:	4b86      	ldr	r3, [pc, #536]	@ (80086f0 <UART_SetConfig+0x2fc>)
 80084d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084d8:	23c0      	movs	r3, #192	@ 0xc0
 80084da:	029b      	lsls	r3, r3, #10
 80084dc:	4013      	ands	r3, r2
 80084de:	22c0      	movs	r2, #192	@ 0xc0
 80084e0:	0292      	lsls	r2, r2, #10
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d017      	beq.n	8008516 <UART_SetConfig+0x122>
 80084e6:	22c0      	movs	r2, #192	@ 0xc0
 80084e8:	0292      	lsls	r2, r2, #10
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d822      	bhi.n	8008534 <UART_SetConfig+0x140>
 80084ee:	2280      	movs	r2, #128	@ 0x80
 80084f0:	0292      	lsls	r2, r2, #10
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d019      	beq.n	800852a <UART_SetConfig+0x136>
 80084f6:	2280      	movs	r2, #128	@ 0x80
 80084f8:	0292      	lsls	r2, r2, #10
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d81a      	bhi.n	8008534 <UART_SetConfig+0x140>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <UART_SetConfig+0x118>
 8008502:	2280      	movs	r2, #128	@ 0x80
 8008504:	0252      	lsls	r2, r2, #9
 8008506:	4293      	cmp	r3, r2
 8008508:	d00a      	beq.n	8008520 <UART_SetConfig+0x12c>
 800850a:	e013      	b.n	8008534 <UART_SetConfig+0x140>
 800850c:	231f      	movs	r3, #31
 800850e:	18fb      	adds	r3, r7, r3
 8008510:	2200      	movs	r2, #0
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	e02b      	b.n	800856e <UART_SetConfig+0x17a>
 8008516:	231f      	movs	r3, #31
 8008518:	18fb      	adds	r3, r7, r3
 800851a:	2202      	movs	r2, #2
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	e026      	b.n	800856e <UART_SetConfig+0x17a>
 8008520:	231f      	movs	r3, #31
 8008522:	18fb      	adds	r3, r7, r3
 8008524:	2204      	movs	r2, #4
 8008526:	701a      	strb	r2, [r3, #0]
 8008528:	e021      	b.n	800856e <UART_SetConfig+0x17a>
 800852a:	231f      	movs	r3, #31
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	2208      	movs	r2, #8
 8008530:	701a      	strb	r2, [r3, #0]
 8008532:	e01c      	b.n	800856e <UART_SetConfig+0x17a>
 8008534:	231f      	movs	r3, #31
 8008536:	18fb      	adds	r3, r7, r3
 8008538:	2210      	movs	r2, #16
 800853a:	701a      	strb	r2, [r3, #0]
 800853c:	e017      	b.n	800856e <UART_SetConfig+0x17a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a6d      	ldr	r2, [pc, #436]	@ (80086f8 <UART_SetConfig+0x304>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d104      	bne.n	8008552 <UART_SetConfig+0x15e>
 8008548:	231f      	movs	r3, #31
 800854a:	18fb      	adds	r3, r7, r3
 800854c:	2200      	movs	r2, #0
 800854e:	701a      	strb	r2, [r3, #0]
 8008550:	e00d      	b.n	800856e <UART_SetConfig+0x17a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a69      	ldr	r2, [pc, #420]	@ (80086fc <UART_SetConfig+0x308>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d104      	bne.n	8008566 <UART_SetConfig+0x172>
 800855c:	231f      	movs	r3, #31
 800855e:	18fb      	adds	r3, r7, r3
 8008560:	2200      	movs	r2, #0
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	e003      	b.n	800856e <UART_SetConfig+0x17a>
 8008566:	231f      	movs	r3, #31
 8008568:	18fb      	adds	r3, r7, r3
 800856a:	2210      	movs	r2, #16
 800856c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	69da      	ldr	r2, [r3, #28]
 8008572:	2380      	movs	r3, #128	@ 0x80
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	429a      	cmp	r2, r3
 8008578:	d15c      	bne.n	8008634 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800857a:	231f      	movs	r3, #31
 800857c:	18fb      	adds	r3, r7, r3
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b08      	cmp	r3, #8
 8008582:	d015      	beq.n	80085b0 <UART_SetConfig+0x1bc>
 8008584:	dc18      	bgt.n	80085b8 <UART_SetConfig+0x1c4>
 8008586:	2b04      	cmp	r3, #4
 8008588:	d00d      	beq.n	80085a6 <UART_SetConfig+0x1b2>
 800858a:	dc15      	bgt.n	80085b8 <UART_SetConfig+0x1c4>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <UART_SetConfig+0x1a2>
 8008590:	2b02      	cmp	r3, #2
 8008592:	d005      	beq.n	80085a0 <UART_SetConfig+0x1ac>
 8008594:	e010      	b.n	80085b8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008596:	f7fe fbcb 	bl	8006d30 <HAL_RCC_GetPCLK1Freq>
 800859a:	0003      	movs	r3, r0
 800859c:	61bb      	str	r3, [r7, #24]
        break;
 800859e:	e012      	b.n	80085c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085a0:	4b57      	ldr	r3, [pc, #348]	@ (8008700 <UART_SetConfig+0x30c>)
 80085a2:	61bb      	str	r3, [r7, #24]
        break;
 80085a4:	e00f      	b.n	80085c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085a6:	f7fe fb47 	bl	8006c38 <HAL_RCC_GetSysClockFreq>
 80085aa:	0003      	movs	r3, r0
 80085ac:	61bb      	str	r3, [r7, #24]
        break;
 80085ae:	e00a      	b.n	80085c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085b0:	2380      	movs	r3, #128	@ 0x80
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	61bb      	str	r3, [r7, #24]
        break;
 80085b6:	e006      	b.n	80085c6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80085bc:	231e      	movs	r3, #30
 80085be:	18fb      	adds	r3, r7, r3
 80085c0:	2201      	movs	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]
        break;
 80085c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d100      	bne.n	80085ce <UART_SetConfig+0x1da>
 80085cc:	e07a      	b.n	80086c4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	005a      	lsls	r2, r3, #1
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	18d2      	adds	r2, r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	0019      	movs	r1, r3
 80085e0:	0010      	movs	r0, r2
 80085e2:	f7f7 fdad 	bl	8000140 <__udivsi3>
 80085e6:	0003      	movs	r3, r0
 80085e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	2b0f      	cmp	r3, #15
 80085ee:	d91c      	bls.n	800862a <UART_SetConfig+0x236>
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	2380      	movs	r3, #128	@ 0x80
 80085f4:	025b      	lsls	r3, r3, #9
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d217      	bcs.n	800862a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	200e      	movs	r0, #14
 8008600:	183b      	adds	r3, r7, r0
 8008602:	210f      	movs	r1, #15
 8008604:	438a      	bics	r2, r1
 8008606:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	085b      	lsrs	r3, r3, #1
 800860c:	b29b      	uxth	r3, r3
 800860e:	2207      	movs	r2, #7
 8008610:	4013      	ands	r3, r2
 8008612:	b299      	uxth	r1, r3
 8008614:	183b      	adds	r3, r7, r0
 8008616:	183a      	adds	r2, r7, r0
 8008618:	8812      	ldrh	r2, [r2, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	183a      	adds	r2, r7, r0
 8008624:	8812      	ldrh	r2, [r2, #0]
 8008626:	60da      	str	r2, [r3, #12]
 8008628:	e04c      	b.n	80086c4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800862a:	231e      	movs	r3, #30
 800862c:	18fb      	adds	r3, r7, r3
 800862e:	2201      	movs	r2, #1
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	e047      	b.n	80086c4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008634:	231f      	movs	r3, #31
 8008636:	18fb      	adds	r3, r7, r3
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b08      	cmp	r3, #8
 800863c:	d015      	beq.n	800866a <UART_SetConfig+0x276>
 800863e:	dc18      	bgt.n	8008672 <UART_SetConfig+0x27e>
 8008640:	2b04      	cmp	r3, #4
 8008642:	d00d      	beq.n	8008660 <UART_SetConfig+0x26c>
 8008644:	dc15      	bgt.n	8008672 <UART_SetConfig+0x27e>
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <UART_SetConfig+0x25c>
 800864a:	2b02      	cmp	r3, #2
 800864c:	d005      	beq.n	800865a <UART_SetConfig+0x266>
 800864e:	e010      	b.n	8008672 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008650:	f7fe fb6e 	bl	8006d30 <HAL_RCC_GetPCLK1Freq>
 8008654:	0003      	movs	r3, r0
 8008656:	61bb      	str	r3, [r7, #24]
        break;
 8008658:	e012      	b.n	8008680 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800865a:	4b29      	ldr	r3, [pc, #164]	@ (8008700 <UART_SetConfig+0x30c>)
 800865c:	61bb      	str	r3, [r7, #24]
        break;
 800865e:	e00f      	b.n	8008680 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008660:	f7fe faea 	bl	8006c38 <HAL_RCC_GetSysClockFreq>
 8008664:	0003      	movs	r3, r0
 8008666:	61bb      	str	r3, [r7, #24]
        break;
 8008668:	e00a      	b.n	8008680 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800866a:	2380      	movs	r3, #128	@ 0x80
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	61bb      	str	r3, [r7, #24]
        break;
 8008670:	e006      	b.n	8008680 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008676:	231e      	movs	r3, #30
 8008678:	18fb      	adds	r3, r7, r3
 800867a:	2201      	movs	r2, #1
 800867c:	701a      	strb	r2, [r3, #0]
        break;
 800867e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01e      	beq.n	80086c4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	085a      	lsrs	r2, r3, #1
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	18d2      	adds	r2, r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	0019      	movs	r1, r3
 8008696:	0010      	movs	r0, r2
 8008698:	f7f7 fd52 	bl	8000140 <__udivsi3>
 800869c:	0003      	movs	r3, r0
 800869e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2b0f      	cmp	r3, #15
 80086a4:	d90a      	bls.n	80086bc <UART_SetConfig+0x2c8>
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	2380      	movs	r3, #128	@ 0x80
 80086aa:	025b      	lsls	r3, r3, #9
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d205      	bcs.n	80086bc <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	60da      	str	r2, [r3, #12]
 80086ba:	e003      	b.n	80086c4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80086bc:	231e      	movs	r3, #30
 80086be:	18fb      	adds	r3, r7, r3
 80086c0:	2201      	movs	r2, #1
 80086c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80086d0:	231e      	movs	r3, #30
 80086d2:	18fb      	adds	r3, r7, r3
 80086d4:	781b      	ldrb	r3, [r3, #0]
}
 80086d6:	0018      	movs	r0, r3
 80086d8:	46bd      	mov	sp, r7
 80086da:	b008      	add	sp, #32
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	46c0      	nop			@ (mov r8, r8)
 80086e0:	efff69f3 	.word	0xefff69f3
 80086e4:	ffffcfff 	.word	0xffffcfff
 80086e8:	fffff4ff 	.word	0xfffff4ff
 80086ec:	40013800 	.word	0x40013800
 80086f0:	40021000 	.word	0x40021000
 80086f4:	40004400 	.word	0x40004400
 80086f8:	40004800 	.word	0x40004800
 80086fc:	40004c00 	.word	0x40004c00
 8008700:	007a1200 	.word	0x007a1200

08008704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008710:	2208      	movs	r2, #8
 8008712:	4013      	ands	r3, r2
 8008714:	d00b      	beq.n	800872e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	4a4a      	ldr	r2, [pc, #296]	@ (8008848 <UART_AdvFeatureConfig+0x144>)
 800871e:	4013      	ands	r3, r2
 8008720:	0019      	movs	r1, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008732:	2201      	movs	r2, #1
 8008734:	4013      	ands	r3, r2
 8008736:	d00b      	beq.n	8008750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	4a43      	ldr	r2, [pc, #268]	@ (800884c <UART_AdvFeatureConfig+0x148>)
 8008740:	4013      	ands	r3, r2
 8008742:	0019      	movs	r1, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008754:	2202      	movs	r2, #2
 8008756:	4013      	ands	r3, r2
 8008758:	d00b      	beq.n	8008772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	4a3b      	ldr	r2, [pc, #236]	@ (8008850 <UART_AdvFeatureConfig+0x14c>)
 8008762:	4013      	ands	r3, r2
 8008764:	0019      	movs	r1, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	430a      	orrs	r2, r1
 8008770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008776:	2204      	movs	r2, #4
 8008778:	4013      	ands	r3, r2
 800877a:	d00b      	beq.n	8008794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	4a34      	ldr	r2, [pc, #208]	@ (8008854 <UART_AdvFeatureConfig+0x150>)
 8008784:	4013      	ands	r3, r2
 8008786:	0019      	movs	r1, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	430a      	orrs	r2, r1
 8008792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008798:	2210      	movs	r2, #16
 800879a:	4013      	ands	r3, r2
 800879c:	d00b      	beq.n	80087b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	4a2c      	ldr	r2, [pc, #176]	@ (8008858 <UART_AdvFeatureConfig+0x154>)
 80087a6:	4013      	ands	r3, r2
 80087a8:	0019      	movs	r1, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ba:	2220      	movs	r2, #32
 80087bc:	4013      	ands	r3, r2
 80087be:	d00b      	beq.n	80087d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	4a25      	ldr	r2, [pc, #148]	@ (800885c <UART_AdvFeatureConfig+0x158>)
 80087c8:	4013      	ands	r3, r2
 80087ca:	0019      	movs	r1, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087dc:	2240      	movs	r2, #64	@ 0x40
 80087de:	4013      	ands	r3, r2
 80087e0:	d01d      	beq.n	800881e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008860 <UART_AdvFeatureConfig+0x15c>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	0019      	movs	r1, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087fe:	2380      	movs	r3, #128	@ 0x80
 8008800:	035b      	lsls	r3, r3, #13
 8008802:	429a      	cmp	r2, r3
 8008804:	d10b      	bne.n	800881e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	4a15      	ldr	r2, [pc, #84]	@ (8008864 <UART_AdvFeatureConfig+0x160>)
 800880e:	4013      	ands	r3, r2
 8008810:	0019      	movs	r1, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008822:	2280      	movs	r2, #128	@ 0x80
 8008824:	4013      	ands	r3, r2
 8008826:	d00b      	beq.n	8008840 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	4a0e      	ldr	r2, [pc, #56]	@ (8008868 <UART_AdvFeatureConfig+0x164>)
 8008830:	4013      	ands	r3, r2
 8008832:	0019      	movs	r1, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	605a      	str	r2, [r3, #4]
  }
}
 8008840:	46c0      	nop			@ (mov r8, r8)
 8008842:	46bd      	mov	sp, r7
 8008844:	b002      	add	sp, #8
 8008846:	bd80      	pop	{r7, pc}
 8008848:	ffff7fff 	.word	0xffff7fff
 800884c:	fffdffff 	.word	0xfffdffff
 8008850:	fffeffff 	.word	0xfffeffff
 8008854:	fffbffff 	.word	0xfffbffff
 8008858:	ffffefff 	.word	0xffffefff
 800885c:	ffffdfff 	.word	0xffffdfff
 8008860:	ffefffff 	.word	0xffefffff
 8008864:	ff9fffff 	.word	0xff9fffff
 8008868:	fff7ffff 	.word	0xfff7ffff

0800886c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b092      	sub	sp, #72	@ 0x48
 8008870:	af02      	add	r7, sp, #8
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2284      	movs	r2, #132	@ 0x84
 8008878:	2100      	movs	r1, #0
 800887a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800887c:	f7fa fe26 	bl	80034cc <HAL_GetTick>
 8008880:	0003      	movs	r3, r0
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2208      	movs	r2, #8
 800888c:	4013      	ands	r3, r2
 800888e:	2b08      	cmp	r3, #8
 8008890:	d12c      	bne.n	80088ec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008894:	2280      	movs	r2, #128	@ 0x80
 8008896:	0391      	lsls	r1, r2, #14
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	4a46      	ldr	r2, [pc, #280]	@ (80089b4 <UART_CheckIdleState+0x148>)
 800889c:	9200      	str	r2, [sp, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	f000 f88c 	bl	80089bc <UART_WaitOnFlagUntilTimeout>
 80088a4:	1e03      	subs	r3, r0, #0
 80088a6:	d021      	beq.n	80088ec <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a8:	f3ef 8310 	mrs	r3, PRIMASK
 80088ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80088ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80088b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088b2:	2301      	movs	r3, #1
 80088b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b8:	f383 8810 	msr	PRIMASK, r3
}
 80088bc:	46c0      	nop			@ (mov r8, r8)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2180      	movs	r1, #128	@ 0x80
 80088ca:	438a      	bics	r2, r1
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d4:	f383 8810 	msr	PRIMASK, r3
}
 80088d8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2278      	movs	r2, #120	@ 0x78
 80088e4:	2100      	movs	r1, #0
 80088e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e05f      	b.n	80089ac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2204      	movs	r2, #4
 80088f4:	4013      	ands	r3, r2
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d146      	bne.n	8008988 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088fc:	2280      	movs	r2, #128	@ 0x80
 80088fe:	03d1      	lsls	r1, r2, #15
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4a2c      	ldr	r2, [pc, #176]	@ (80089b4 <UART_CheckIdleState+0x148>)
 8008904:	9200      	str	r2, [sp, #0]
 8008906:	2200      	movs	r2, #0
 8008908:	f000 f858 	bl	80089bc <UART_WaitOnFlagUntilTimeout>
 800890c:	1e03      	subs	r3, r0, #0
 800890e:	d03b      	beq.n	8008988 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008910:	f3ef 8310 	mrs	r3, PRIMASK
 8008914:	60fb      	str	r3, [r7, #12]
  return(result);
 8008916:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008918:	637b      	str	r3, [r7, #52]	@ 0x34
 800891a:	2301      	movs	r3, #1
 800891c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f383 8810 	msr	PRIMASK, r3
}
 8008924:	46c0      	nop			@ (mov r8, r8)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4921      	ldr	r1, [pc, #132]	@ (80089b8 <UART_CheckIdleState+0x14c>)
 8008932:	400a      	ands	r2, r1
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008938:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f383 8810 	msr	PRIMASK, r3
}
 8008940:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008942:	f3ef 8310 	mrs	r3, PRIMASK
 8008946:	61bb      	str	r3, [r7, #24]
  return(result);
 8008948:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894a:	633b      	str	r3, [r7, #48]	@ 0x30
 800894c:	2301      	movs	r3, #1
 800894e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	f383 8810 	msr	PRIMASK, r3
}
 8008956:	46c0      	nop			@ (mov r8, r8)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2101      	movs	r1, #1
 8008964:	438a      	bics	r2, r1
 8008966:	609a      	str	r2, [r3, #8]
 8008968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	f383 8810 	msr	PRIMASK, r3
}
 8008972:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2280      	movs	r2, #128	@ 0x80
 8008978:	2120      	movs	r1, #32
 800897a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2278      	movs	r2, #120	@ 0x78
 8008980:	2100      	movs	r1, #0
 8008982:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e011      	b.n	80089ac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2280      	movs	r2, #128	@ 0x80
 8008992:	2120      	movs	r1, #32
 8008994:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2278      	movs	r2, #120	@ 0x78
 80089a6:	2100      	movs	r1, #0
 80089a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	0018      	movs	r0, r3
 80089ae:	46bd      	mov	sp, r7
 80089b0:	b010      	add	sp, #64	@ 0x40
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	01ffffff 	.word	0x01ffffff
 80089b8:	fffffedf 	.word	0xfffffedf

080089bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	1dfb      	adds	r3, r7, #7
 80089ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089cc:	e051      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	3301      	adds	r3, #1
 80089d2:	d04e      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089d4:	f7fa fd7a 	bl	80034cc <HAL_GetTick>
 80089d8:	0002      	movs	r2, r0
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d302      	bcc.n	80089ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e051      	b.n	8008a92 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2204      	movs	r2, #4
 80089f6:	4013      	ands	r3, r2
 80089f8:	d03b      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb6>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b80      	cmp	r3, #128	@ 0x80
 80089fe:	d038      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b40      	cmp	r3, #64	@ 0x40
 8008a04:	d035      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	4013      	ands	r3, r2
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d111      	bne.n	8008a38 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2208      	movs	r2, #8
 8008a1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f000 f83c 	bl	8008a9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2284      	movs	r2, #132	@ 0x84
 8008a28:	2108      	movs	r1, #8
 8008a2a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2278      	movs	r2, #120	@ 0x78
 8008a30:	2100      	movs	r1, #0
 8008a32:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e02c      	b.n	8008a92 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	69da      	ldr	r2, [r3, #28]
 8008a3e:	2380      	movs	r3, #128	@ 0x80
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	401a      	ands	r2, r3
 8008a44:	2380      	movs	r3, #128	@ 0x80
 8008a46:	011b      	lsls	r3, r3, #4
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d112      	bne.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2280      	movs	r2, #128	@ 0x80
 8008a52:	0112      	lsls	r2, r2, #4
 8008a54:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f000 f81f 	bl	8008a9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2284      	movs	r2, #132	@ 0x84
 8008a62:	2120      	movs	r1, #32
 8008a64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2278      	movs	r2, #120	@ 0x78
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e00f      	b.n	8008a92 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	425a      	negs	r2, r3
 8008a82:	4153      	adcs	r3, r2
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	001a      	movs	r2, r3
 8008a88:	1dfb      	adds	r3, r7, #7
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d09e      	beq.n	80089ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	0018      	movs	r0, r3
 8008a94:	46bd      	mov	sp, r7
 8008a96:	b004      	add	sp, #16
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08e      	sub	sp, #56	@ 0x38
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa8:	617b      	str	r3, [r7, #20]
  return(result);
 8008aaa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aae:	2301      	movs	r3, #1
 8008ab0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	f383 8810 	msr	PRIMASK, r3
}
 8008ab8:	46c0      	nop			@ (mov r8, r8)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4926      	ldr	r1, [pc, #152]	@ (8008b60 <UART_EndRxTransfer+0xc4>)
 8008ac6:	400a      	ands	r2, r1
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008acc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	f383 8810 	msr	PRIMASK, r3
}
 8008ad4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8008ada:	623b      	str	r3, [r7, #32]
  return(result);
 8008adc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ade:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae6:	f383 8810 	msr	PRIMASK, r3
}
 8008aea:	46c0      	nop			@ (mov r8, r8)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2101      	movs	r1, #1
 8008af8:	438a      	bics	r2, r1
 8008afa:	609a      	str	r2, [r3, #8]
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	f383 8810 	msr	PRIMASK, r3
}
 8008b06:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d118      	bne.n	8008b42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b10:	f3ef 8310 	mrs	r3, PRIMASK
 8008b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f383 8810 	msr	PRIMASK, r3
}
 8008b24:	46c0      	nop			@ (mov r8, r8)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2110      	movs	r1, #16
 8008b32:	438a      	bics	r2, r1
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f383 8810 	msr	PRIMASK, r3
}
 8008b40:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2280      	movs	r2, #128	@ 0x80
 8008b46:	2120      	movs	r1, #32
 8008b48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008b56:	46c0      	nop			@ (mov r8, r8)
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	b00e      	add	sp, #56	@ 0x38
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	46c0      	nop			@ (mov r8, r8)
 8008b60:	fffffedf 	.word	0xfffffedf

08008b64 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08a      	sub	sp, #40	@ 0x28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b70:	2b21      	cmp	r3, #33	@ 0x21
 8008b72:	d14c      	bne.n	8008c0e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2252      	movs	r2, #82	@ 0x52
 8008b78:	5a9b      	ldrh	r3, [r3, r2]
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d132      	bne.n	8008be6 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b80:	f3ef 8310 	mrs	r3, PRIMASK
 8008b84:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b86:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f383 8810 	msr	PRIMASK, r3
}
 8008b94:	46c0      	nop			@ (mov r8, r8)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2180      	movs	r1, #128	@ 0x80
 8008ba2:	438a      	bics	r2, r1
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f383 8810 	msr	PRIMASK, r3
}
 8008bb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb6:	617b      	str	r3, [r7, #20]
  return(result);
 8008bb8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bba:	623b      	str	r3, [r7, #32]
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f383 8810 	msr	PRIMASK, r3
}
 8008bc6:	46c0      	nop			@ (mov r8, r8)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2140      	movs	r1, #64	@ 0x40
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	f383 8810 	msr	PRIMASK, r3
}
 8008be2:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008be4:	e013      	b.n	8008c0e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bea:	781a      	ldrb	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2252      	movs	r2, #82	@ 0x52
 8008c00:	5a9b      	ldrh	r3, [r3, r2]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	3b01      	subs	r3, #1
 8008c06:	b299      	uxth	r1, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2252      	movs	r2, #82	@ 0x52
 8008c0c:	5299      	strh	r1, [r3, r2]
}
 8008c0e:	46c0      	nop			@ (mov r8, r8)
 8008c10:	46bd      	mov	sp, r7
 8008c12:	b00a      	add	sp, #40	@ 0x28
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b08c      	sub	sp, #48	@ 0x30
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c22:	2b21      	cmp	r3, #33	@ 0x21
 8008c24:	d151      	bne.n	8008cca <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2252      	movs	r2, #82	@ 0x52
 8008c2a:	5a9b      	ldrh	r3, [r3, r2]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d132      	bne.n	8008c98 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c32:	f3ef 8310 	mrs	r3, PRIMASK
 8008c36:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c38:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f383 8810 	msr	PRIMASK, r3
}
 8008c46:	46c0      	nop			@ (mov r8, r8)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2180      	movs	r1, #128	@ 0x80
 8008c54:	438a      	bics	r2, r1
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f383 8810 	msr	PRIMASK, r3
}
 8008c62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c64:	f3ef 8310 	mrs	r3, PRIMASK
 8008c68:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c6a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c6e:	2301      	movs	r3, #1
 8008c70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	f383 8810 	msr	PRIMASK, r3
}
 8008c78:	46c0      	nop			@ (mov r8, r8)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2140      	movs	r1, #64	@ 0x40
 8008c86:	430a      	orrs	r2, r1
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	f383 8810 	msr	PRIMASK, r3
}
 8008c94:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008c96:	e018      	b.n	8008cca <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca0:	881a      	ldrh	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	05d2      	lsls	r2, r2, #23
 8008ca8:	0dd2      	lsrs	r2, r2, #23
 8008caa:	b292      	uxth	r2, r2
 8008cac:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cb2:	1c9a      	adds	r2, r3, #2
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2252      	movs	r2, #82	@ 0x52
 8008cbc:	5a9b      	ldrh	r3, [r3, r2]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	b299      	uxth	r1, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2252      	movs	r2, #82	@ 0x52
 8008cc8:	5299      	strh	r1, [r3, r2]
}
 8008cca:	46c0      	nop			@ (mov r8, r8)
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	b00c      	add	sp, #48	@ 0x30
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2244      	movs	r2, #68	@ 0x44
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ce4:	4b05      	ldr	r3, [pc, #20]	@ (8008cfc <USB_EnableGlobalInt+0x28>)
 8008ce6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	b299      	uxth	r1, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2240      	movs	r2, #64	@ 0x40
 8008cf0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	0018      	movs	r0, r3
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	b004      	add	sp, #16
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	0000bf80 	.word	0x0000bf80

08008d00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008d08:	4b09      	ldr	r3, [pc, #36]	@ (8008d30 <USB_DisableGlobalInt+0x30>)
 8008d0a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2240      	movs	r2, #64	@ 0x40
 8008d10:	5a9b      	ldrh	r3, [r3, r2]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	b292      	uxth	r2, r2
 8008d18:	43d2      	mvns	r2, r2
 8008d1a:	b292      	uxth	r2, r2
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	b299      	uxth	r1, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2240      	movs	r2, #64	@ 0x40
 8008d24:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	0018      	movs	r0, r3
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	b004      	add	sp, #16
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	0000bf80 	.word	0x0000bf80

08008d34 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	1d3b      	adds	r3, r7, #4
 8008d3e:	6019      	str	r1, [r3, #0]
 8008d40:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2240      	movs	r2, #64	@ 0x40
 8008d46:	2101      	movs	r1, #1
 8008d48:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2240      	movs	r2, #64	@ 0x40
 8008d4e:	2100      	movs	r1, #0
 8008d50:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2244      	movs	r2, #68	@ 0x44
 8008d56:	2100      	movs	r1, #0
 8008d58:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2250      	movs	r2, #80	@ 0x50
 8008d5e:	2100      	movs	r1, #0
 8008d60:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	0018      	movs	r0, r3
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b004      	add	sp, #16
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b09c      	sub	sp, #112	@ 0x70
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d76:	236f      	movs	r3, #111	@ 0x6f
 8008d78:	18fb      	adds	r3, r7, r3
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	18d3      	adds	r3, r2, r3
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	236c      	movs	r3, #108	@ 0x6c
 8008d8e:	18fb      	adds	r3, r7, r3
 8008d90:	49a1      	ldr	r1, [pc, #644]	@ (8009018 <USB_ActivateEndpoint+0x2ac>)
 8008d92:	400a      	ands	r2, r1
 8008d94:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	78db      	ldrb	r3, [r3, #3]
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d017      	beq.n	8008dce <USB_ActivateEndpoint+0x62>
 8008d9e:	dc28      	bgt.n	8008df2 <USB_ActivateEndpoint+0x86>
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d00e      	beq.n	8008dc2 <USB_ActivateEndpoint+0x56>
 8008da4:	dc25      	bgt.n	8008df2 <USB_ActivateEndpoint+0x86>
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <USB_ActivateEndpoint+0x44>
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d018      	beq.n	8008de0 <USB_ActivateEndpoint+0x74>
 8008dae:	e020      	b.n	8008df2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008db0:	226c      	movs	r2, #108	@ 0x6c
 8008db2:	18bb      	adds	r3, r7, r2
 8008db4:	18ba      	adds	r2, r7, r2
 8008db6:	8812      	ldrh	r2, [r2, #0]
 8008db8:	2180      	movs	r1, #128	@ 0x80
 8008dba:	0089      	lsls	r1, r1, #2
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	801a      	strh	r2, [r3, #0]
      break;
 8008dc0:	e01c      	b.n	8008dfc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8008dc2:	226c      	movs	r2, #108	@ 0x6c
 8008dc4:	18bb      	adds	r3, r7, r2
 8008dc6:	18ba      	adds	r2, r7, r2
 8008dc8:	8812      	ldrh	r2, [r2, #0]
 8008dca:	801a      	strh	r2, [r3, #0]
      break;
 8008dcc:	e016      	b.n	8008dfc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008dce:	226c      	movs	r2, #108	@ 0x6c
 8008dd0:	18bb      	adds	r3, r7, r2
 8008dd2:	18ba      	adds	r2, r7, r2
 8008dd4:	8812      	ldrh	r2, [r2, #0]
 8008dd6:	21c0      	movs	r1, #192	@ 0xc0
 8008dd8:	00c9      	lsls	r1, r1, #3
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	801a      	strh	r2, [r3, #0]
      break;
 8008dde:	e00d      	b.n	8008dfc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008de0:	226c      	movs	r2, #108	@ 0x6c
 8008de2:	18bb      	adds	r3, r7, r2
 8008de4:	18ba      	adds	r2, r7, r2
 8008de6:	8812      	ldrh	r2, [r2, #0]
 8008de8:	2180      	movs	r1, #128	@ 0x80
 8008dea:	00c9      	lsls	r1, r1, #3
 8008dec:	430a      	orrs	r2, r1
 8008dee:	801a      	strh	r2, [r3, #0]
      break;
 8008df0:	e004      	b.n	8008dfc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8008df2:	236f      	movs	r3, #111	@ 0x6f
 8008df4:	18fb      	adds	r3, r7, r3
 8008df6:	2201      	movs	r2, #1
 8008df8:	701a      	strb	r2, [r3, #0]
      break;
 8008dfa:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	18d3      	adds	r3, r2, r3
 8008e06:	226c      	movs	r2, #108	@ 0x6c
 8008e08:	18ba      	adds	r2, r7, r2
 8008e0a:	8812      	ldrh	r2, [r2, #0]
 8008e0c:	4983      	ldr	r1, [pc, #524]	@ (800901c <USB_ActivateEndpoint+0x2b0>)
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	b292      	uxth	r2, r2
 8008e12:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	18d3      	adds	r3, r2, r3
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	b21b      	sxth	r3, r3
 8008e24:	4a7e      	ldr	r2, [pc, #504]	@ (8009020 <USB_ActivateEndpoint+0x2b4>)
 8008e26:	4013      	ands	r3, r2
 8008e28:	b21a      	sxth	r2, r3
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b21b      	sxth	r3, r3
 8008e30:	4313      	orrs	r3, r2
 8008e32:	b21a      	sxth	r2, r3
 8008e34:	2166      	movs	r1, #102	@ 0x66
 8008e36:	187b      	adds	r3, r7, r1
 8008e38:	801a      	strh	r2, [r3, #0]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	18d3      	adds	r3, r2, r3
 8008e44:	187a      	adds	r2, r7, r1
 8008e46:	8812      	ldrh	r2, [r2, #0]
 8008e48:	4974      	ldr	r1, [pc, #464]	@ (800901c <USB_ActivateEndpoint+0x2b0>)
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	b292      	uxth	r2, r2
 8008e4e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	7b1b      	ldrb	r3, [r3, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d000      	beq.n	8008e5a <USB_ActivateEndpoint+0xee>
 8008e58:	e177      	b.n	800914a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d100      	bne.n	8008e64 <USB_ActivateEndpoint+0xf8>
 8008e62:	e07a      	b.n	8008f5a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	61bb      	str	r3, [r7, #24]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2250      	movs	r2, #80	@ 0x50
 8008e6c:	5a9b      	ldrh	r3, [r3, r2]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	001a      	movs	r2, r3
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	189b      	adds	r3, r3, r2
 8008e76:	61bb      	str	r3, [r7, #24]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	00da      	lsls	r2, r3, #3
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	18d3      	adds	r3, r2, r3
 8008e82:	2280      	movs	r2, #128	@ 0x80
 8008e84:	00d2      	lsls	r2, r2, #3
 8008e86:	4694      	mov	ip, r2
 8008e88:	4463      	add	r3, ip
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	88db      	ldrh	r3, [r3, #6]
 8008e90:	085b      	lsrs	r3, r3, #1
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	18db      	adds	r3, r3, r3
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	18d2      	adds	r2, r2, r3
 8008ea6:	2112      	movs	r1, #18
 8008ea8:	187b      	adds	r3, r7, r1
 8008eaa:	8812      	ldrh	r2, [r2, #0]
 8008eac:	801a      	strh	r2, [r3, #0]
 8008eae:	187b      	adds	r3, r7, r1
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	2240      	movs	r2, #64	@ 0x40
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	d016      	beq.n	8008ee6 <USB_ActivateEndpoint+0x17a>
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	18d3      	adds	r3, r2, r3
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	2010      	movs	r0, #16
 8008ec8:	183b      	adds	r3, r7, r0
 8008eca:	4955      	ldr	r1, [pc, #340]	@ (8009020 <USB_ActivateEndpoint+0x2b4>)
 8008ecc:	400a      	ands	r2, r1
 8008ece:	801a      	strh	r2, [r3, #0]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	18d3      	adds	r3, r2, r3
 8008eda:	183a      	adds	r2, r7, r0
 8008edc:	8812      	ldrh	r2, [r2, #0]
 8008ede:	4951      	ldr	r1, [pc, #324]	@ (8009024 <USB_ActivateEndpoint+0x2b8>)
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	b292      	uxth	r2, r2
 8008ee4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	78db      	ldrb	r3, [r3, #3]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d01d      	beq.n	8008f2a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	18d3      	adds	r3, r2, r3
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	200c      	movs	r0, #12
 8008efe:	183b      	adds	r3, r7, r0
 8008f00:	4949      	ldr	r1, [pc, #292]	@ (8009028 <USB_ActivateEndpoint+0x2bc>)
 8008f02:	400a      	ands	r2, r1
 8008f04:	801a      	strh	r2, [r3, #0]
 8008f06:	183b      	adds	r3, r7, r0
 8008f08:	183a      	adds	r2, r7, r0
 8008f0a:	8812      	ldrh	r2, [r2, #0]
 8008f0c:	2120      	movs	r1, #32
 8008f0e:	404a      	eors	r2, r1
 8008f10:	801a      	strh	r2, [r3, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	18d3      	adds	r3, r2, r3
 8008f1c:	183a      	adds	r2, r7, r0
 8008f1e:	8812      	ldrh	r2, [r2, #0]
 8008f20:	493e      	ldr	r1, [pc, #248]	@ (800901c <USB_ActivateEndpoint+0x2b0>)
 8008f22:	430a      	orrs	r2, r1
 8008f24:	b292      	uxth	r2, r2
 8008f26:	801a      	strh	r2, [r3, #0]
 8008f28:	e2b5      	b.n	8009496 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	18d3      	adds	r3, r2, r3
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	200e      	movs	r0, #14
 8008f3a:	183b      	adds	r3, r7, r0
 8008f3c:	493a      	ldr	r1, [pc, #232]	@ (8009028 <USB_ActivateEndpoint+0x2bc>)
 8008f3e:	400a      	ands	r2, r1
 8008f40:	801a      	strh	r2, [r3, #0]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	18d3      	adds	r3, r2, r3
 8008f4c:	183a      	adds	r2, r7, r0
 8008f4e:	8812      	ldrh	r2, [r2, #0]
 8008f50:	4932      	ldr	r1, [pc, #200]	@ (800901c <USB_ActivateEndpoint+0x2b0>)
 8008f52:	430a      	orrs	r2, r1
 8008f54:	b292      	uxth	r2, r2
 8008f56:	801a      	strh	r2, [r3, #0]
 8008f58:	e29d      	b.n	8009496 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2250      	movs	r2, #80	@ 0x50
 8008f62:	5a9b      	ldrh	r3, [r3, r2]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	001a      	movs	r2, r3
 8008f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6a:	189b      	adds	r3, r3, r2
 8008f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	00da      	lsls	r2, r3, #3
 8008f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f76:	18d3      	adds	r3, r2, r3
 8008f78:	4a2c      	ldr	r2, [pc, #176]	@ (800902c <USB_ActivateEndpoint+0x2c0>)
 8008f7a:	4694      	mov	ip, r2
 8008f7c:	4463      	add	r3, ip
 8008f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	88db      	ldrh	r3, [r3, #6]
 8008f84:	085b      	lsrs	r3, r3, #1
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	18db      	adds	r3, r3, r3
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2250      	movs	r2, #80	@ 0x50
 8008f98:	5a9b      	ldrh	r3, [r3, r2]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	001a      	movs	r2, r3
 8008f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa0:	189b      	adds	r3, r3, r2
 8008fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	00da      	lsls	r2, r3, #3
 8008faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fac:	18d3      	adds	r3, r2, r3
 8008fae:	4a20      	ldr	r2, [pc, #128]	@ (8009030 <USB_ActivateEndpoint+0x2c4>)
 8008fb0:	4694      	mov	ip, r2
 8008fb2:	4463      	add	r3, ip
 8008fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	059b      	lsls	r3, r3, #22
 8008fbe:	0d9b      	lsrs	r3, r3, #22
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	801a      	strh	r2, [r3, #0]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d108      	bne.n	8008fe0 <USB_ActivateEndpoint+0x274>
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	4a17      	ldr	r2, [pc, #92]	@ (8009034 <USB_ActivateEndpoint+0x2c8>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	801a      	strh	r2, [r3, #0]
 8008fde:	e045      	b.n	800906c <USB_ActivateEndpoint+0x300>
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fe6:	d827      	bhi.n	8009038 <USB_ActivateEndpoint+0x2cc>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	085b      	lsrs	r3, r3, #1
 8008fee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	d002      	beq.n	8009000 <USB_ActivateEndpoint+0x294>
 8008ffa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	b29a      	uxth	r2, r3
 8009006:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009008:	b29b      	uxth	r3, r3
 800900a:	029b      	lsls	r3, r3, #10
 800900c:	b29b      	uxth	r3, r3
 800900e:	4313      	orrs	r3, r2
 8009010:	b29a      	uxth	r2, r3
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	801a      	strh	r2, [r3, #0]
 8009016:	e029      	b.n	800906c <USB_ActivateEndpoint+0x300>
 8009018:	ffff898f 	.word	0xffff898f
 800901c:	ffff8080 	.word	0xffff8080
 8009020:	ffff8f8f 	.word	0xffff8f8f
 8009024:	ffff80c0 	.word	0xffff80c0
 8009028:	ffff8fbf 	.word	0xffff8fbf
 800902c:	00000404 	.word	0x00000404
 8009030:	00000406 	.word	0x00000406
 8009034:	ffff8000 	.word	0xffff8000
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	095b      	lsrs	r3, r3, #5
 800903e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	221f      	movs	r2, #31
 8009046:	4013      	ands	r3, r2
 8009048:	d102      	bne.n	8009050 <USB_ActivateEndpoint+0x2e4>
 800904a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800904c:	3b01      	subs	r3, #1
 800904e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	b29a      	uxth	r2, r3
 8009056:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009058:	b29b      	uxth	r3, r3
 800905a:	029b      	lsls	r3, r3, #10
 800905c:	b29b      	uxth	r3, r3
 800905e:	4313      	orrs	r3, r2
 8009060:	b29b      	uxth	r3, r3
 8009062:	4ab5      	ldr	r2, [pc, #724]	@ (8009338 <USB_ActivateEndpoint+0x5cc>)
 8009064:	4313      	orrs	r3, r2
 8009066:	b29a      	uxth	r2, r3
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	18d2      	adds	r2, r2, r3
 8009076:	2122      	movs	r1, #34	@ 0x22
 8009078:	187b      	adds	r3, r7, r1
 800907a:	8812      	ldrh	r2, [r2, #0]
 800907c:	801a      	strh	r2, [r3, #0]
 800907e:	187b      	adds	r3, r7, r1
 8009080:	881a      	ldrh	r2, [r3, #0]
 8009082:	2380      	movs	r3, #128	@ 0x80
 8009084:	01db      	lsls	r3, r3, #7
 8009086:	4013      	ands	r3, r2
 8009088:	d016      	beq.n	80090b8 <USB_ActivateEndpoint+0x34c>
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	18d3      	adds	r3, r2, r3
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29a      	uxth	r2, r3
 8009098:	2020      	movs	r0, #32
 800909a:	183b      	adds	r3, r7, r0
 800909c:	49a7      	ldr	r1, [pc, #668]	@ (800933c <USB_ActivateEndpoint+0x5d0>)
 800909e:	400a      	ands	r2, r1
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	18d3      	adds	r3, r2, r3
 80090ac:	183a      	adds	r2, r7, r0
 80090ae:	8812      	ldrh	r2, [r2, #0]
 80090b0:	49a3      	ldr	r1, [pc, #652]	@ (8009340 <USB_ActivateEndpoint+0x5d4>)
 80090b2:	430a      	orrs	r2, r1
 80090b4:	b292      	uxth	r2, r2
 80090b6:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d125      	bne.n	800910c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	18d3      	adds	r3, r2, r3
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	201c      	movs	r0, #28
 80090d0:	183b      	adds	r3, r7, r0
 80090d2:	499c      	ldr	r1, [pc, #624]	@ (8009344 <USB_ActivateEndpoint+0x5d8>)
 80090d4:	400a      	ands	r2, r1
 80090d6:	801a      	strh	r2, [r3, #0]
 80090d8:	183b      	adds	r3, r7, r0
 80090da:	183a      	adds	r2, r7, r0
 80090dc:	8812      	ldrh	r2, [r2, #0]
 80090de:	2180      	movs	r1, #128	@ 0x80
 80090e0:	0149      	lsls	r1, r1, #5
 80090e2:	404a      	eors	r2, r1
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	183b      	adds	r3, r7, r0
 80090e8:	183a      	adds	r2, r7, r0
 80090ea:	8812      	ldrh	r2, [r2, #0]
 80090ec:	2180      	movs	r1, #128	@ 0x80
 80090ee:	0189      	lsls	r1, r1, #6
 80090f0:	404a      	eors	r2, r1
 80090f2:	801a      	strh	r2, [r3, #0]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	18d3      	adds	r3, r2, r3
 80090fe:	183a      	adds	r2, r7, r0
 8009100:	8812      	ldrh	r2, [r2, #0]
 8009102:	4991      	ldr	r1, [pc, #580]	@ (8009348 <USB_ActivateEndpoint+0x5dc>)
 8009104:	430a      	orrs	r2, r1
 8009106:	b292      	uxth	r2, r2
 8009108:	801a      	strh	r2, [r3, #0]
 800910a:	e1c4      	b.n	8009496 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	18d3      	adds	r3, r2, r3
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29a      	uxth	r2, r3
 800911a:	201e      	movs	r0, #30
 800911c:	183b      	adds	r3, r7, r0
 800911e:	4989      	ldr	r1, [pc, #548]	@ (8009344 <USB_ActivateEndpoint+0x5d8>)
 8009120:	400a      	ands	r2, r1
 8009122:	801a      	strh	r2, [r3, #0]
 8009124:	183b      	adds	r3, r7, r0
 8009126:	183a      	adds	r2, r7, r0
 8009128:	8812      	ldrh	r2, [r2, #0]
 800912a:	2180      	movs	r1, #128	@ 0x80
 800912c:	0189      	lsls	r1, r1, #6
 800912e:	404a      	eors	r2, r1
 8009130:	801a      	strh	r2, [r3, #0]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	18d3      	adds	r3, r2, r3
 800913c:	183a      	adds	r2, r7, r0
 800913e:	8812      	ldrh	r2, [r2, #0]
 8009140:	4981      	ldr	r1, [pc, #516]	@ (8009348 <USB_ActivateEndpoint+0x5dc>)
 8009142:	430a      	orrs	r2, r1
 8009144:	b292      	uxth	r2, r2
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	e1a5      	b.n	8009496 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	78db      	ldrb	r3, [r3, #3]
 800914e:	2b02      	cmp	r3, #2
 8009150:	d117      	bne.n	8009182 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	18d3      	adds	r3, r2, r3
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	b29a      	uxth	r2, r3
 8009160:	2062      	movs	r0, #98	@ 0x62
 8009162:	183b      	adds	r3, r7, r0
 8009164:	4975      	ldr	r1, [pc, #468]	@ (800933c <USB_ActivateEndpoint+0x5d0>)
 8009166:	400a      	ands	r2, r1
 8009168:	801a      	strh	r2, [r3, #0]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	18d3      	adds	r3, r2, r3
 8009174:	183a      	adds	r2, r7, r0
 8009176:	8812      	ldrh	r2, [r2, #0]
 8009178:	4974      	ldr	r1, [pc, #464]	@ (800934c <USB_ActivateEndpoint+0x5e0>)
 800917a:	430a      	orrs	r2, r1
 800917c:	b292      	uxth	r2, r2
 800917e:	801a      	strh	r2, [r3, #0]
 8009180:	e016      	b.n	80091b0 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	18d3      	adds	r3, r2, r3
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	b29a      	uxth	r2, r3
 8009190:	2064      	movs	r0, #100	@ 0x64
 8009192:	183b      	adds	r3, r7, r0
 8009194:	496e      	ldr	r1, [pc, #440]	@ (8009350 <USB_ActivateEndpoint+0x5e4>)
 8009196:	400a      	ands	r2, r1
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	18d3      	adds	r3, r2, r3
 80091a4:	183a      	adds	r2, r7, r0
 80091a6:	8812      	ldrh	r2, [r2, #0]
 80091a8:	4967      	ldr	r1, [pc, #412]	@ (8009348 <USB_ActivateEndpoint+0x5dc>)
 80091aa:	430a      	orrs	r2, r1
 80091ac:	b292      	uxth	r2, r2
 80091ae:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2250      	movs	r2, #80	@ 0x50
 80091b8:	5a9b      	ldrh	r3, [r3, r2]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	001a      	movs	r2, r3
 80091be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091c0:	189b      	adds	r3, r3, r2
 80091c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	00da      	lsls	r2, r3, #3
 80091ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091cc:	18d3      	adds	r3, r2, r3
 80091ce:	2280      	movs	r2, #128	@ 0x80
 80091d0:	00d2      	lsls	r2, r2, #3
 80091d2:	4694      	mov	ip, r2
 80091d4:	4463      	add	r3, ip
 80091d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	891b      	ldrh	r3, [r3, #8]
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	b29b      	uxth	r3, r3
 80091e0:	18db      	adds	r3, r3, r3
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80091e6:	801a      	strh	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2250      	movs	r2, #80	@ 0x50
 80091f0:	5a9b      	ldrh	r3, [r3, r2]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	001a      	movs	r2, r3
 80091f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091f8:	189b      	adds	r3, r3, r2
 80091fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	00da      	lsls	r2, r3, #3
 8009202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009204:	18d3      	adds	r3, r2, r3
 8009206:	4a53      	ldr	r2, [pc, #332]	@ (8009354 <USB_ActivateEndpoint+0x5e8>)
 8009208:	4694      	mov	ip, r2
 800920a:	4463      	add	r3, ip
 800920c:	653b      	str	r3, [r7, #80]	@ 0x50
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	895b      	ldrh	r3, [r3, #10]
 8009212:	085b      	lsrs	r3, r3, #1
 8009214:	b29b      	uxth	r3, r3
 8009216:	18db      	adds	r3, r3, r3
 8009218:	b29a      	uxth	r2, r3
 800921a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800921c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	785b      	ldrb	r3, [r3, #1]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d000      	beq.n	8009228 <USB_ActivateEndpoint+0x4bc>
 8009226:	e09b      	b.n	8009360 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	18d2      	adds	r2, r2, r3
 8009232:	2140      	movs	r1, #64	@ 0x40
 8009234:	187b      	adds	r3, r7, r1
 8009236:	8812      	ldrh	r2, [r2, #0]
 8009238:	801a      	strh	r2, [r3, #0]
 800923a:	187b      	adds	r3, r7, r1
 800923c:	881a      	ldrh	r2, [r3, #0]
 800923e:	2380      	movs	r3, #128	@ 0x80
 8009240:	01db      	lsls	r3, r3, #7
 8009242:	4013      	ands	r3, r2
 8009244:	d016      	beq.n	8009274 <USB_ActivateEndpoint+0x508>
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	18d3      	adds	r3, r2, r3
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	b29a      	uxth	r2, r3
 8009254:	203e      	movs	r0, #62	@ 0x3e
 8009256:	183b      	adds	r3, r7, r0
 8009258:	4938      	ldr	r1, [pc, #224]	@ (800933c <USB_ActivateEndpoint+0x5d0>)
 800925a:	400a      	ands	r2, r1
 800925c:	801a      	strh	r2, [r3, #0]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	18d3      	adds	r3, r2, r3
 8009268:	183a      	adds	r2, r7, r0
 800926a:	8812      	ldrh	r2, [r2, #0]
 800926c:	4934      	ldr	r1, [pc, #208]	@ (8009340 <USB_ActivateEndpoint+0x5d4>)
 800926e:	430a      	orrs	r2, r1
 8009270:	b292      	uxth	r2, r2
 8009272:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	18d2      	adds	r2, r2, r3
 800927e:	213c      	movs	r1, #60	@ 0x3c
 8009280:	187b      	adds	r3, r7, r1
 8009282:	8812      	ldrh	r2, [r2, #0]
 8009284:	801a      	strh	r2, [r3, #0]
 8009286:	187b      	adds	r3, r7, r1
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	2240      	movs	r2, #64	@ 0x40
 800928c:	4013      	ands	r3, r2
 800928e:	d016      	beq.n	80092be <USB_ActivateEndpoint+0x552>
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	18d3      	adds	r3, r2, r3
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	b29a      	uxth	r2, r3
 800929e:	203a      	movs	r0, #58	@ 0x3a
 80092a0:	183b      	adds	r3, r7, r0
 80092a2:	4926      	ldr	r1, [pc, #152]	@ (800933c <USB_ActivateEndpoint+0x5d0>)
 80092a4:	400a      	ands	r2, r1
 80092a6:	801a      	strh	r2, [r3, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	18d3      	adds	r3, r2, r3
 80092b2:	183a      	adds	r2, r7, r0
 80092b4:	8812      	ldrh	r2, [r2, #0]
 80092b6:	4928      	ldr	r1, [pc, #160]	@ (8009358 <USB_ActivateEndpoint+0x5ec>)
 80092b8:	430a      	orrs	r2, r1
 80092ba:	b292      	uxth	r2, r2
 80092bc:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	18d3      	adds	r3, r2, r3
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	2038      	movs	r0, #56	@ 0x38
 80092ce:	183b      	adds	r3, r7, r0
 80092d0:	491c      	ldr	r1, [pc, #112]	@ (8009344 <USB_ActivateEndpoint+0x5d8>)
 80092d2:	400a      	ands	r2, r1
 80092d4:	801a      	strh	r2, [r3, #0]
 80092d6:	183b      	adds	r3, r7, r0
 80092d8:	183a      	adds	r2, r7, r0
 80092da:	8812      	ldrh	r2, [r2, #0]
 80092dc:	2180      	movs	r1, #128	@ 0x80
 80092de:	0149      	lsls	r1, r1, #5
 80092e0:	404a      	eors	r2, r1
 80092e2:	801a      	strh	r2, [r3, #0]
 80092e4:	183b      	adds	r3, r7, r0
 80092e6:	183a      	adds	r2, r7, r0
 80092e8:	8812      	ldrh	r2, [r2, #0]
 80092ea:	2180      	movs	r1, #128	@ 0x80
 80092ec:	0189      	lsls	r1, r1, #6
 80092ee:	404a      	eors	r2, r1
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	18d3      	adds	r3, r2, r3
 80092fc:	183a      	adds	r2, r7, r0
 80092fe:	8812      	ldrh	r2, [r2, #0]
 8009300:	4911      	ldr	r1, [pc, #68]	@ (8009348 <USB_ActivateEndpoint+0x5dc>)
 8009302:	430a      	orrs	r2, r1
 8009304:	b292      	uxth	r2, r2
 8009306:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	18d3      	adds	r3, r2, r3
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	b29a      	uxth	r2, r3
 8009316:	2036      	movs	r0, #54	@ 0x36
 8009318:	183b      	adds	r3, r7, r0
 800931a:	4910      	ldr	r1, [pc, #64]	@ (800935c <USB_ActivateEndpoint+0x5f0>)
 800931c:	400a      	ands	r2, r1
 800931e:	801a      	strh	r2, [r3, #0]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	18d3      	adds	r3, r2, r3
 800932a:	183a      	adds	r2, r7, r0
 800932c:	8812      	ldrh	r2, [r2, #0]
 800932e:	4906      	ldr	r1, [pc, #24]	@ (8009348 <USB_ActivateEndpoint+0x5dc>)
 8009330:	430a      	orrs	r2, r1
 8009332:	b292      	uxth	r2, r2
 8009334:	801a      	strh	r2, [r3, #0]
 8009336:	e0ae      	b.n	8009496 <USB_ActivateEndpoint+0x72a>
 8009338:	ffff8000 	.word	0xffff8000
 800933c:	ffff8f8f 	.word	0xffff8f8f
 8009340:	ffffc080 	.word	0xffffc080
 8009344:	ffffbf8f 	.word	0xffffbf8f
 8009348:	ffff8080 	.word	0xffff8080
 800934c:	ffff8180 	.word	0xffff8180
 8009350:	ffff8e8f 	.word	0xffff8e8f
 8009354:	00000404 	.word	0x00000404
 8009358:	ffff80c0 	.word	0xffff80c0
 800935c:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	18d2      	adds	r2, r2, r3
 800936a:	214e      	movs	r1, #78	@ 0x4e
 800936c:	187b      	adds	r3, r7, r1
 800936e:	8812      	ldrh	r2, [r2, #0]
 8009370:	801a      	strh	r2, [r3, #0]
 8009372:	187b      	adds	r3, r7, r1
 8009374:	881a      	ldrh	r2, [r3, #0]
 8009376:	2380      	movs	r3, #128	@ 0x80
 8009378:	01db      	lsls	r3, r3, #7
 800937a:	4013      	ands	r3, r2
 800937c:	d016      	beq.n	80093ac <USB_ActivateEndpoint+0x640>
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	18d3      	adds	r3, r2, r3
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	b29a      	uxth	r2, r3
 800938c:	204c      	movs	r0, #76	@ 0x4c
 800938e:	183b      	adds	r3, r7, r0
 8009390:	4944      	ldr	r1, [pc, #272]	@ (80094a4 <USB_ActivateEndpoint+0x738>)
 8009392:	400a      	ands	r2, r1
 8009394:	801a      	strh	r2, [r3, #0]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	18d3      	adds	r3, r2, r3
 80093a0:	183a      	adds	r2, r7, r0
 80093a2:	8812      	ldrh	r2, [r2, #0]
 80093a4:	4940      	ldr	r1, [pc, #256]	@ (80094a8 <USB_ActivateEndpoint+0x73c>)
 80093a6:	430a      	orrs	r2, r1
 80093a8:	b292      	uxth	r2, r2
 80093aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	18d2      	adds	r2, r2, r3
 80093b6:	214a      	movs	r1, #74	@ 0x4a
 80093b8:	187b      	adds	r3, r7, r1
 80093ba:	8812      	ldrh	r2, [r2, #0]
 80093bc:	801a      	strh	r2, [r3, #0]
 80093be:	187b      	adds	r3, r7, r1
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	2240      	movs	r2, #64	@ 0x40
 80093c4:	4013      	ands	r3, r2
 80093c6:	d016      	beq.n	80093f6 <USB_ActivateEndpoint+0x68a>
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	18d3      	adds	r3, r2, r3
 80093d2:	881b      	ldrh	r3, [r3, #0]
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	2048      	movs	r0, #72	@ 0x48
 80093d8:	183b      	adds	r3, r7, r0
 80093da:	4932      	ldr	r1, [pc, #200]	@ (80094a4 <USB_ActivateEndpoint+0x738>)
 80093dc:	400a      	ands	r2, r1
 80093de:	801a      	strh	r2, [r3, #0]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	18d3      	adds	r3, r2, r3
 80093ea:	183a      	adds	r2, r7, r0
 80093ec:	8812      	ldrh	r2, [r2, #0]
 80093ee:	492f      	ldr	r1, [pc, #188]	@ (80094ac <USB_ActivateEndpoint+0x740>)
 80093f0:	430a      	orrs	r2, r1
 80093f2:	b292      	uxth	r2, r2
 80093f4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	78db      	ldrb	r3, [r3, #3]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d01d      	beq.n	800943a <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	18d3      	adds	r3, r2, r3
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	b29a      	uxth	r2, r3
 800940c:	2044      	movs	r0, #68	@ 0x44
 800940e:	183b      	adds	r3, r7, r0
 8009410:	4927      	ldr	r1, [pc, #156]	@ (80094b0 <USB_ActivateEndpoint+0x744>)
 8009412:	400a      	ands	r2, r1
 8009414:	801a      	strh	r2, [r3, #0]
 8009416:	183b      	adds	r3, r7, r0
 8009418:	183a      	adds	r2, r7, r0
 800941a:	8812      	ldrh	r2, [r2, #0]
 800941c:	2120      	movs	r1, #32
 800941e:	404a      	eors	r2, r1
 8009420:	801a      	strh	r2, [r3, #0]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	18d3      	adds	r3, r2, r3
 800942c:	183a      	adds	r2, r7, r0
 800942e:	8812      	ldrh	r2, [r2, #0]
 8009430:	4920      	ldr	r1, [pc, #128]	@ (80094b4 <USB_ActivateEndpoint+0x748>)
 8009432:	430a      	orrs	r2, r1
 8009434:	b292      	uxth	r2, r2
 8009436:	801a      	strh	r2, [r3, #0]
 8009438:	e016      	b.n	8009468 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	18d3      	adds	r3, r2, r3
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	b29a      	uxth	r2, r3
 8009448:	2046      	movs	r0, #70	@ 0x46
 800944a:	183b      	adds	r3, r7, r0
 800944c:	4918      	ldr	r1, [pc, #96]	@ (80094b0 <USB_ActivateEndpoint+0x744>)
 800944e:	400a      	ands	r2, r1
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	18d3      	adds	r3, r2, r3
 800945c:	183a      	adds	r2, r7, r0
 800945e:	8812      	ldrh	r2, [r2, #0]
 8009460:	4914      	ldr	r1, [pc, #80]	@ (80094b4 <USB_ActivateEndpoint+0x748>)
 8009462:	430a      	orrs	r2, r1
 8009464:	b292      	uxth	r2, r2
 8009466:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	18d3      	adds	r3, r2, r3
 8009472:	881b      	ldrh	r3, [r3, #0]
 8009474:	b29a      	uxth	r2, r3
 8009476:	2042      	movs	r0, #66	@ 0x42
 8009478:	183b      	adds	r3, r7, r0
 800947a:	490f      	ldr	r1, [pc, #60]	@ (80094b8 <USB_ActivateEndpoint+0x74c>)
 800947c:	400a      	ands	r2, r1
 800947e:	801a      	strh	r2, [r3, #0]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	18d3      	adds	r3, r2, r3
 800948a:	183a      	adds	r2, r7, r0
 800948c:	8812      	ldrh	r2, [r2, #0]
 800948e:	4909      	ldr	r1, [pc, #36]	@ (80094b4 <USB_ActivateEndpoint+0x748>)
 8009490:	430a      	orrs	r2, r1
 8009492:	b292      	uxth	r2, r2
 8009494:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009496:	236f      	movs	r3, #111	@ 0x6f
 8009498:	18fb      	adds	r3, r7, r3
 800949a:	781b      	ldrb	r3, [r3, #0]
}
 800949c:	0018      	movs	r0, r3
 800949e:	46bd      	mov	sp, r7
 80094a0:	b01c      	add	sp, #112	@ 0x70
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	ffff8f8f 	.word	0xffff8f8f
 80094a8:	ffffc080 	.word	0xffffc080
 80094ac:	ffff80c0 	.word	0xffff80c0
 80094b0:	ffff8fbf 	.word	0xffff8fbf
 80094b4:	ffff8080 	.word	0xffff8080
 80094b8:	ffffbf8f 	.word	0xffffbf8f

080094bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08c      	sub	sp, #48	@ 0x30
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	7b1b      	ldrb	r3, [r3, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d000      	beq.n	80094d0 <USB_DeactivateEndpoint+0x14>
 80094ce:	e07e      	b.n	80095ce <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d03c      	beq.n	8009552 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	18d2      	adds	r2, r2, r3
 80094e2:	210c      	movs	r1, #12
 80094e4:	187b      	adds	r3, r7, r1
 80094e6:	8812      	ldrh	r2, [r2, #0]
 80094e8:	801a      	strh	r2, [r3, #0]
 80094ea:	187b      	adds	r3, r7, r1
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	2240      	movs	r2, #64	@ 0x40
 80094f0:	4013      	ands	r3, r2
 80094f2:	d016      	beq.n	8009522 <USB_DeactivateEndpoint+0x66>
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	18d3      	adds	r3, r2, r3
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29a      	uxth	r2, r3
 8009502:	200a      	movs	r0, #10
 8009504:	183b      	adds	r3, r7, r0
 8009506:	49c7      	ldr	r1, [pc, #796]	@ (8009824 <USB_DeactivateEndpoint+0x368>)
 8009508:	400a      	ands	r2, r1
 800950a:	801a      	strh	r2, [r3, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	18d3      	adds	r3, r2, r3
 8009516:	183a      	adds	r2, r7, r0
 8009518:	8812      	ldrh	r2, [r2, #0]
 800951a:	49c3      	ldr	r1, [pc, #780]	@ (8009828 <USB_DeactivateEndpoint+0x36c>)
 800951c:	430a      	orrs	r2, r1
 800951e:	b292      	uxth	r2, r2
 8009520:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	18d3      	adds	r3, r2, r3
 800952c:	881b      	ldrh	r3, [r3, #0]
 800952e:	b29a      	uxth	r2, r3
 8009530:	2008      	movs	r0, #8
 8009532:	183b      	adds	r3, r7, r0
 8009534:	49bd      	ldr	r1, [pc, #756]	@ (800982c <USB_DeactivateEndpoint+0x370>)
 8009536:	400a      	ands	r2, r1
 8009538:	801a      	strh	r2, [r3, #0]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	18d3      	adds	r3, r2, r3
 8009544:	183a      	adds	r2, r7, r0
 8009546:	8812      	ldrh	r2, [r2, #0]
 8009548:	49b9      	ldr	r1, [pc, #740]	@ (8009830 <USB_DeactivateEndpoint+0x374>)
 800954a:	430a      	orrs	r2, r1
 800954c:	b292      	uxth	r2, r2
 800954e:	801a      	strh	r2, [r3, #0]
 8009550:	e163      	b.n	800981a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	18d2      	adds	r2, r2, r3
 800955c:	2112      	movs	r1, #18
 800955e:	187b      	adds	r3, r7, r1
 8009560:	8812      	ldrh	r2, [r2, #0]
 8009562:	801a      	strh	r2, [r3, #0]
 8009564:	187b      	adds	r3, r7, r1
 8009566:	881a      	ldrh	r2, [r3, #0]
 8009568:	2380      	movs	r3, #128	@ 0x80
 800956a:	01db      	lsls	r3, r3, #7
 800956c:	4013      	ands	r3, r2
 800956e:	d016      	beq.n	800959e <USB_DeactivateEndpoint+0xe2>
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	18d3      	adds	r3, r2, r3
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	b29a      	uxth	r2, r3
 800957e:	2010      	movs	r0, #16
 8009580:	183b      	adds	r3, r7, r0
 8009582:	49a8      	ldr	r1, [pc, #672]	@ (8009824 <USB_DeactivateEndpoint+0x368>)
 8009584:	400a      	ands	r2, r1
 8009586:	801a      	strh	r2, [r3, #0]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	18d3      	adds	r3, r2, r3
 8009592:	183a      	adds	r2, r7, r0
 8009594:	8812      	ldrh	r2, [r2, #0]
 8009596:	49a7      	ldr	r1, [pc, #668]	@ (8009834 <USB_DeactivateEndpoint+0x378>)
 8009598:	430a      	orrs	r2, r1
 800959a:	b292      	uxth	r2, r2
 800959c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	18d3      	adds	r3, r2, r3
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	200e      	movs	r0, #14
 80095ae:	183b      	adds	r3, r7, r0
 80095b0:	49a1      	ldr	r1, [pc, #644]	@ (8009838 <USB_DeactivateEndpoint+0x37c>)
 80095b2:	400a      	ands	r2, r1
 80095b4:	801a      	strh	r2, [r3, #0]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	18d3      	adds	r3, r2, r3
 80095c0:	183a      	adds	r2, r7, r0
 80095c2:	8812      	ldrh	r2, [r2, #0]
 80095c4:	499a      	ldr	r1, [pc, #616]	@ (8009830 <USB_DeactivateEndpoint+0x374>)
 80095c6:	430a      	orrs	r2, r1
 80095c8:	b292      	uxth	r2, r2
 80095ca:	801a      	strh	r2, [r3, #0]
 80095cc:	e125      	b.n	800981a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	785b      	ldrb	r3, [r3, #1]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d000      	beq.n	80095d8 <USB_DeactivateEndpoint+0x11c>
 80095d6:	e090      	b.n	80096fa <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	18d2      	adds	r2, r2, r3
 80095e2:	2120      	movs	r1, #32
 80095e4:	187b      	adds	r3, r7, r1
 80095e6:	8812      	ldrh	r2, [r2, #0]
 80095e8:	801a      	strh	r2, [r3, #0]
 80095ea:	187b      	adds	r3, r7, r1
 80095ec:	881a      	ldrh	r2, [r3, #0]
 80095ee:	2380      	movs	r3, #128	@ 0x80
 80095f0:	01db      	lsls	r3, r3, #7
 80095f2:	4013      	ands	r3, r2
 80095f4:	d016      	beq.n	8009624 <USB_DeactivateEndpoint+0x168>
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	18d3      	adds	r3, r2, r3
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	b29a      	uxth	r2, r3
 8009604:	201e      	movs	r0, #30
 8009606:	183b      	adds	r3, r7, r0
 8009608:	4986      	ldr	r1, [pc, #536]	@ (8009824 <USB_DeactivateEndpoint+0x368>)
 800960a:	400a      	ands	r2, r1
 800960c:	801a      	strh	r2, [r3, #0]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	18d3      	adds	r3, r2, r3
 8009618:	183a      	adds	r2, r7, r0
 800961a:	8812      	ldrh	r2, [r2, #0]
 800961c:	4985      	ldr	r1, [pc, #532]	@ (8009834 <USB_DeactivateEndpoint+0x378>)
 800961e:	430a      	orrs	r2, r1
 8009620:	b292      	uxth	r2, r2
 8009622:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	18d2      	adds	r2, r2, r3
 800962e:	211c      	movs	r1, #28
 8009630:	187b      	adds	r3, r7, r1
 8009632:	8812      	ldrh	r2, [r2, #0]
 8009634:	801a      	strh	r2, [r3, #0]
 8009636:	187b      	adds	r3, r7, r1
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	2240      	movs	r2, #64	@ 0x40
 800963c:	4013      	ands	r3, r2
 800963e:	d016      	beq.n	800966e <USB_DeactivateEndpoint+0x1b2>
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	18d3      	adds	r3, r2, r3
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	b29a      	uxth	r2, r3
 800964e:	201a      	movs	r0, #26
 8009650:	183b      	adds	r3, r7, r0
 8009652:	4974      	ldr	r1, [pc, #464]	@ (8009824 <USB_DeactivateEndpoint+0x368>)
 8009654:	400a      	ands	r2, r1
 8009656:	801a      	strh	r2, [r3, #0]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	18d3      	adds	r3, r2, r3
 8009662:	183a      	adds	r2, r7, r0
 8009664:	8812      	ldrh	r2, [r2, #0]
 8009666:	4970      	ldr	r1, [pc, #448]	@ (8009828 <USB_DeactivateEndpoint+0x36c>)
 8009668:	430a      	orrs	r2, r1
 800966a:	b292      	uxth	r2, r2
 800966c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	18d3      	adds	r3, r2, r3
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	b29a      	uxth	r2, r3
 800967c:	2018      	movs	r0, #24
 800967e:	183b      	adds	r3, r7, r0
 8009680:	4968      	ldr	r1, [pc, #416]	@ (8009824 <USB_DeactivateEndpoint+0x368>)
 8009682:	400a      	ands	r2, r1
 8009684:	801a      	strh	r2, [r3, #0]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	18d3      	adds	r3, r2, r3
 8009690:	183a      	adds	r2, r7, r0
 8009692:	8812      	ldrh	r2, [r2, #0]
 8009694:	4964      	ldr	r1, [pc, #400]	@ (8009828 <USB_DeactivateEndpoint+0x36c>)
 8009696:	430a      	orrs	r2, r1
 8009698:	b292      	uxth	r2, r2
 800969a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	18d3      	adds	r3, r2, r3
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	2016      	movs	r0, #22
 80096ac:	183b      	adds	r3, r7, r0
 80096ae:	4962      	ldr	r1, [pc, #392]	@ (8009838 <USB_DeactivateEndpoint+0x37c>)
 80096b0:	400a      	ands	r2, r1
 80096b2:	801a      	strh	r2, [r3, #0]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	18d3      	adds	r3, r2, r3
 80096be:	183a      	adds	r2, r7, r0
 80096c0:	8812      	ldrh	r2, [r2, #0]
 80096c2:	495b      	ldr	r1, [pc, #364]	@ (8009830 <USB_DeactivateEndpoint+0x374>)
 80096c4:	430a      	orrs	r2, r1
 80096c6:	b292      	uxth	r2, r2
 80096c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	18d3      	adds	r3, r2, r3
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	2014      	movs	r0, #20
 80096da:	183b      	adds	r3, r7, r0
 80096dc:	4953      	ldr	r1, [pc, #332]	@ (800982c <USB_DeactivateEndpoint+0x370>)
 80096de:	400a      	ands	r2, r1
 80096e0:	801a      	strh	r2, [r3, #0]
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	18d3      	adds	r3, r2, r3
 80096ec:	183a      	adds	r2, r7, r0
 80096ee:	8812      	ldrh	r2, [r2, #0]
 80096f0:	494f      	ldr	r1, [pc, #316]	@ (8009830 <USB_DeactivateEndpoint+0x374>)
 80096f2:	430a      	orrs	r2, r1
 80096f4:	b292      	uxth	r2, r2
 80096f6:	801a      	strh	r2, [r3, #0]
 80096f8:	e08f      	b.n	800981a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	18d2      	adds	r2, r2, r3
 8009704:	212e      	movs	r1, #46	@ 0x2e
 8009706:	187b      	adds	r3, r7, r1
 8009708:	8812      	ldrh	r2, [r2, #0]
 800970a:	801a      	strh	r2, [r3, #0]
 800970c:	187b      	adds	r3, r7, r1
 800970e:	881a      	ldrh	r2, [r3, #0]
 8009710:	2380      	movs	r3, #128	@ 0x80
 8009712:	01db      	lsls	r3, r3, #7
 8009714:	4013      	ands	r3, r2
 8009716:	d016      	beq.n	8009746 <USB_DeactivateEndpoint+0x28a>
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	18d3      	adds	r3, r2, r3
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	b29a      	uxth	r2, r3
 8009726:	202c      	movs	r0, #44	@ 0x2c
 8009728:	183b      	adds	r3, r7, r0
 800972a:	493e      	ldr	r1, [pc, #248]	@ (8009824 <USB_DeactivateEndpoint+0x368>)
 800972c:	400a      	ands	r2, r1
 800972e:	801a      	strh	r2, [r3, #0]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	18d3      	adds	r3, r2, r3
 800973a:	183a      	adds	r2, r7, r0
 800973c:	8812      	ldrh	r2, [r2, #0]
 800973e:	493d      	ldr	r1, [pc, #244]	@ (8009834 <USB_DeactivateEndpoint+0x378>)
 8009740:	430a      	orrs	r2, r1
 8009742:	b292      	uxth	r2, r2
 8009744:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	18d2      	adds	r2, r2, r3
 8009750:	212a      	movs	r1, #42	@ 0x2a
 8009752:	187b      	adds	r3, r7, r1
 8009754:	8812      	ldrh	r2, [r2, #0]
 8009756:	801a      	strh	r2, [r3, #0]
 8009758:	187b      	adds	r3, r7, r1
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	2240      	movs	r2, #64	@ 0x40
 800975e:	4013      	ands	r3, r2
 8009760:	d016      	beq.n	8009790 <USB_DeactivateEndpoint+0x2d4>
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	18d3      	adds	r3, r2, r3
 800976c:	881b      	ldrh	r3, [r3, #0]
 800976e:	b29a      	uxth	r2, r3
 8009770:	2028      	movs	r0, #40	@ 0x28
 8009772:	183b      	adds	r3, r7, r0
 8009774:	492b      	ldr	r1, [pc, #172]	@ (8009824 <USB_DeactivateEndpoint+0x368>)
 8009776:	400a      	ands	r2, r1
 8009778:	801a      	strh	r2, [r3, #0]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	18d3      	adds	r3, r2, r3
 8009784:	183a      	adds	r2, r7, r0
 8009786:	8812      	ldrh	r2, [r2, #0]
 8009788:	4927      	ldr	r1, [pc, #156]	@ (8009828 <USB_DeactivateEndpoint+0x36c>)
 800978a:	430a      	orrs	r2, r1
 800978c:	b292      	uxth	r2, r2
 800978e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	18d3      	adds	r3, r2, r3
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29a      	uxth	r2, r3
 800979e:	2026      	movs	r0, #38	@ 0x26
 80097a0:	183b      	adds	r3, r7, r0
 80097a2:	4920      	ldr	r1, [pc, #128]	@ (8009824 <USB_DeactivateEndpoint+0x368>)
 80097a4:	400a      	ands	r2, r1
 80097a6:	801a      	strh	r2, [r3, #0]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	18d3      	adds	r3, r2, r3
 80097b2:	183a      	adds	r2, r7, r0
 80097b4:	8812      	ldrh	r2, [r2, #0]
 80097b6:	491f      	ldr	r1, [pc, #124]	@ (8009834 <USB_DeactivateEndpoint+0x378>)
 80097b8:	430a      	orrs	r2, r1
 80097ba:	b292      	uxth	r2, r2
 80097bc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	18d3      	adds	r3, r2, r3
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	2024      	movs	r0, #36	@ 0x24
 80097ce:	183b      	adds	r3, r7, r0
 80097d0:	4916      	ldr	r1, [pc, #88]	@ (800982c <USB_DeactivateEndpoint+0x370>)
 80097d2:	400a      	ands	r2, r1
 80097d4:	801a      	strh	r2, [r3, #0]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	18d3      	adds	r3, r2, r3
 80097e0:	183a      	adds	r2, r7, r0
 80097e2:	8812      	ldrh	r2, [r2, #0]
 80097e4:	4912      	ldr	r1, [pc, #72]	@ (8009830 <USB_DeactivateEndpoint+0x374>)
 80097e6:	430a      	orrs	r2, r1
 80097e8:	b292      	uxth	r2, r2
 80097ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	18d3      	adds	r3, r2, r3
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	2022      	movs	r0, #34	@ 0x22
 80097fc:	183b      	adds	r3, r7, r0
 80097fe:	490e      	ldr	r1, [pc, #56]	@ (8009838 <USB_DeactivateEndpoint+0x37c>)
 8009800:	400a      	ands	r2, r1
 8009802:	801a      	strh	r2, [r3, #0]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	18d3      	adds	r3, r2, r3
 800980e:	183a      	adds	r2, r7, r0
 8009810:	8812      	ldrh	r2, [r2, #0]
 8009812:	4907      	ldr	r1, [pc, #28]	@ (8009830 <USB_DeactivateEndpoint+0x374>)
 8009814:	430a      	orrs	r2, r1
 8009816:	b292      	uxth	r2, r2
 8009818:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	0018      	movs	r0, r3
 800981e:	46bd      	mov	sp, r7
 8009820:	b00c      	add	sp, #48	@ 0x30
 8009822:	bd80      	pop	{r7, pc}
 8009824:	ffff8f8f 	.word	0xffff8f8f
 8009828:	ffff80c0 	.word	0xffff80c0
 800982c:	ffff8fbf 	.word	0xffff8fbf
 8009830:	ffff8080 	.word	0xffff8080
 8009834:	ffffc080 	.word	0xffffc080
 8009838:	ffffbf8f 	.word	0xffffbf8f

0800983c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800983c:	b590      	push	{r4, r7, lr}
 800983e:	b0c3      	sub	sp, #268	@ 0x10c
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	785b      	ldrb	r3, [r3, #1]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d001      	beq.n	8009852 <USB_EPStartXfer+0x16>
 800984e:	f000 fd2d 	bl	800a2ac <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	699a      	ldr	r2, [r3, #24]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	429a      	cmp	r2, r3
 800985c:	d905      	bls.n	800986a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	1d7a      	adds	r2, r7, #5
 8009864:	32ff      	adds	r2, #255	@ 0xff
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	e004      	b.n	8009874 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	1d7a      	adds	r2, r7, #5
 8009870:	32ff      	adds	r2, #255	@ 0xff
 8009872:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	7b1b      	ldrb	r3, [r3, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d125      	bne.n	80098c8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	6959      	ldr	r1, [r3, #20]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	88da      	ldrh	r2, [r3, #6]
 8009884:	1d7b      	adds	r3, r7, #5
 8009886:	33ff      	adds	r3, #255	@ 0xff
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	b29b      	uxth	r3, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f001 fa3f 	bl	800ad10 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	613b      	str	r3, [r7, #16]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2250      	movs	r2, #80	@ 0x50
 800989a:	5a9b      	ldrh	r3, [r3, r2]
 800989c:	b29b      	uxth	r3, r3
 800989e:	001a      	movs	r2, r3
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	189b      	adds	r3, r3, r2
 80098a4:	613b      	str	r3, [r7, #16]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	00da      	lsls	r2, r3, #3
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	18d3      	adds	r3, r2, r3
 80098b0:	4ad7      	ldr	r2, [pc, #860]	@ (8009c10 <USB_EPStartXfer+0x3d4>)
 80098b2:	4694      	mov	ip, r2
 80098b4:	4463      	add	r3, ip
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	1d7b      	adds	r3, r7, #5
 80098ba:	33ff      	adds	r3, #255	@ 0xff
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	b29a      	uxth	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	801a      	strh	r2, [r3, #0]
 80098c4:	f000 fccd 	bl	800a262 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	78db      	ldrb	r3, [r3, #3]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d000      	beq.n	80098d2 <USB_EPStartXfer+0x96>
 80098d0:	e362      	b.n	8009f98 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	6a1a      	ldr	r2, [r3, #32]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d800      	bhi.n	80098e0 <USB_EPStartXfer+0xa4>
 80098de:	e309      	b.n	8009ef4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	18d3      	adds	r3, r2, r3
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	2056      	movs	r0, #86	@ 0x56
 80098f0:	183b      	adds	r3, r7, r0
 80098f2:	49c8      	ldr	r1, [pc, #800]	@ (8009c14 <USB_EPStartXfer+0x3d8>)
 80098f4:	400a      	ands	r2, r1
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	18d3      	adds	r3, r2, r3
 8009902:	183a      	adds	r2, r7, r0
 8009904:	8812      	ldrh	r2, [r2, #0]
 8009906:	49c4      	ldr	r1, [pc, #784]	@ (8009c18 <USB_EPStartXfer+0x3dc>)
 8009908:	430a      	orrs	r2, r1
 800990a:	b292      	uxth	r2, r2
 800990c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	6a1a      	ldr	r2, [r3, #32]
 8009912:	1d7b      	adds	r3, r7, #5
 8009914:	33ff      	adds	r3, #255	@ 0xff
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	1ad2      	subs	r2, r2, r3
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	18d3      	adds	r3, r2, r3
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	b29b      	uxth	r3, r3
 800992c:	001a      	movs	r2, r3
 800992e:	2340      	movs	r3, #64	@ 0x40
 8009930:	4013      	ands	r3, r2
 8009932:	d100      	bne.n	8009936 <USB_EPStartXfer+0xfa>
 8009934:	e176      	b.n	8009c24 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	633b      	str	r3, [r7, #48]	@ 0x30
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d000      	beq.n	8009944 <USB_EPStartXfer+0x108>
 8009942:	e074      	b.n	8009a2e <USB_EPStartXfer+0x1f2>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2250      	movs	r2, #80	@ 0x50
 800994c:	5a9b      	ldrh	r3, [r3, r2]
 800994e:	b29b      	uxth	r3, r3
 8009950:	001a      	movs	r2, r3
 8009952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009954:	189b      	adds	r3, r3, r2
 8009956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	00da      	lsls	r2, r3, #3
 800995e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009960:	18d3      	adds	r3, r2, r3
 8009962:	4aae      	ldr	r2, [pc, #696]	@ (8009c1c <USB_EPStartXfer+0x3e0>)
 8009964:	4694      	mov	ip, r2
 8009966:	4463      	add	r3, ip
 8009968:	627b      	str	r3, [r7, #36]	@ 0x24
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	b29b      	uxth	r3, r3
 8009970:	059b      	lsls	r3, r3, #22
 8009972:	0d9b      	lsrs	r3, r3, #22
 8009974:	b29a      	uxth	r2, r3
 8009976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009978:	801a      	strh	r2, [r3, #0]
 800997a:	1d7b      	adds	r3, r7, #5
 800997c:	33ff      	adds	r3, #255	@ 0xff
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d108      	bne.n	8009996 <USB_EPStartXfer+0x15a>
 8009984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	b29b      	uxth	r3, r3
 800998a:	4aa5      	ldr	r2, [pc, #660]	@ (8009c20 <USB_EPStartXfer+0x3e4>)
 800998c:	4313      	orrs	r3, r2
 800998e:	b29a      	uxth	r2, r3
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	801a      	strh	r2, [r3, #0]
 8009994:	e066      	b.n	8009a64 <USB_EPStartXfer+0x228>
 8009996:	1d7b      	adds	r3, r7, #5
 8009998:	33ff      	adds	r3, #255	@ 0xff
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b3e      	cmp	r3, #62	@ 0x3e
 800999e:	d821      	bhi.n	80099e4 <USB_EPStartXfer+0x1a8>
 80099a0:	1d7b      	adds	r3, r7, #5
 80099a2:	33ff      	adds	r3, #255	@ 0xff
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	085b      	lsrs	r3, r3, #1
 80099a8:	1c7a      	adds	r2, r7, #1
 80099aa:	32ff      	adds	r2, #255	@ 0xff
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	1d7b      	adds	r3, r7, #5
 80099b0:	33ff      	adds	r3, #255	@ 0xff
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2201      	movs	r2, #1
 80099b6:	4013      	ands	r3, r2
 80099b8:	d006      	beq.n	80099c8 <USB_EPStartXfer+0x18c>
 80099ba:	1c7b      	adds	r3, r7, #1
 80099bc:	33ff      	adds	r3, #255	@ 0xff
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	1c7a      	adds	r2, r7, #1
 80099c4:	32ff      	adds	r2, #255	@ 0xff
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	1c7b      	adds	r3, r7, #1
 80099d0:	33ff      	adds	r3, #255	@ 0xff
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	029b      	lsls	r3, r3, #10
 80099d8:	b29b      	uxth	r3, r3
 80099da:	4313      	orrs	r3, r2
 80099dc:	b29a      	uxth	r2, r3
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	801a      	strh	r2, [r3, #0]
 80099e2:	e03f      	b.n	8009a64 <USB_EPStartXfer+0x228>
 80099e4:	1d7b      	adds	r3, r7, #5
 80099e6:	33ff      	adds	r3, #255	@ 0xff
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	095b      	lsrs	r3, r3, #5
 80099ec:	1c7a      	adds	r2, r7, #1
 80099ee:	32ff      	adds	r2, #255	@ 0xff
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	1d7b      	adds	r3, r7, #5
 80099f4:	33ff      	adds	r3, #255	@ 0xff
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	221f      	movs	r2, #31
 80099fa:	4013      	ands	r3, r2
 80099fc:	d106      	bne.n	8009a0c <USB_EPStartXfer+0x1d0>
 80099fe:	1c7b      	adds	r3, r7, #1
 8009a00:	33ff      	adds	r3, #255	@ 0xff
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	1c7a      	adds	r2, r7, #1
 8009a08:	32ff      	adds	r2, #255	@ 0xff
 8009a0a:	6013      	str	r3, [r2, #0]
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	1c7b      	adds	r3, r7, #1
 8009a14:	33ff      	adds	r3, #255	@ 0xff
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	029b      	lsls	r3, r3, #10
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	4a7f      	ldr	r2, [pc, #508]	@ (8009c20 <USB_EPStartXfer+0x3e4>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2a:	801a      	strh	r2, [r3, #0]
 8009a2c:	e01a      	b.n	8009a64 <USB_EPStartXfer+0x228>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d116      	bne.n	8009a64 <USB_EPStartXfer+0x228>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2250      	movs	r2, #80	@ 0x50
 8009a3a:	5a9b      	ldrh	r3, [r3, r2]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	001a      	movs	r2, r3
 8009a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a42:	189b      	adds	r3, r3, r2
 8009a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	00da      	lsls	r2, r3, #3
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4e:	18d3      	adds	r3, r2, r3
 8009a50:	4a72      	ldr	r2, [pc, #456]	@ (8009c1c <USB_EPStartXfer+0x3e0>)
 8009a52:	4694      	mov	ip, r2
 8009a54:	4463      	add	r3, ip
 8009a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a58:	1d7b      	adds	r3, r7, #5
 8009a5a:	33ff      	adds	r3, #255	@ 0xff
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a64:	2076      	movs	r0, #118	@ 0x76
 8009a66:	183b      	adds	r3, r7, r0
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	8952      	ldrh	r2, [r2, #10]
 8009a6c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	6959      	ldr	r1, [r3, #20]
 8009a72:	1d7b      	adds	r3, r7, #5
 8009a74:	33ff      	adds	r3, #255	@ 0xff
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	b29c      	uxth	r4, r3
 8009a7a:	183b      	adds	r3, r7, r0
 8009a7c:	881a      	ldrh	r2, [r3, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	0023      	movs	r3, r4
 8009a82:	f001 f945 	bl	800ad10 <USB_WritePMA>
            ep->xfer_buff += len;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	695a      	ldr	r2, [r3, #20]
 8009a8a:	1d7b      	adds	r3, r7, #5
 8009a8c:	33ff      	adds	r3, #255	@ 0xff
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	18d2      	adds	r2, r2, r3
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	6a1a      	ldr	r2, [r3, #32]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d908      	bls.n	8009ab4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	6a1a      	ldr	r2, [r3, #32]
 8009aa6:	1d7b      	adds	r3, r7, #5
 8009aa8:	33ff      	adds	r3, #255	@ 0xff
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	1ad2      	subs	r2, r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	621a      	str	r2, [r3, #32]
 8009ab2:	e007      	b.n	8009ac4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	6a1b      	ldr	r3, [r3, #32]
 8009ab8:	1d7a      	adds	r2, r7, #5
 8009aba:	32ff      	adds	r2, #255	@ 0xff
 8009abc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	785b      	ldrb	r3, [r3, #1]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d000      	beq.n	8009ace <USB_EPStartXfer+0x292>
 8009acc:	e070      	b.n	8009bb0 <USB_EPStartXfer+0x374>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	61bb      	str	r3, [r7, #24]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2250      	movs	r2, #80	@ 0x50
 8009ad6:	5a9b      	ldrh	r3, [r3, r2]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	001a      	movs	r2, r3
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	189b      	adds	r3, r3, r2
 8009ae0:	61bb      	str	r3, [r7, #24]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	00da      	lsls	r2, r3, #3
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	18d3      	adds	r3, r2, r3
 8009aec:	4a48      	ldr	r2, [pc, #288]	@ (8009c10 <USB_EPStartXfer+0x3d4>)
 8009aee:	4694      	mov	ip, r2
 8009af0:	4463      	add	r3, ip
 8009af2:	617b      	str	r3, [r7, #20]
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	059b      	lsls	r3, r3, #22
 8009afc:	0d9b      	lsrs	r3, r3, #22
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	801a      	strh	r2, [r3, #0]
 8009b04:	1d7b      	adds	r3, r7, #5
 8009b06:	33ff      	adds	r3, #255	@ 0xff
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d108      	bne.n	8009b20 <USB_EPStartXfer+0x2e4>
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	4a42      	ldr	r2, [pc, #264]	@ (8009c20 <USB_EPStartXfer+0x3e4>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	801a      	strh	r2, [r3, #0]
 8009b1e:	e064      	b.n	8009bea <USB_EPStartXfer+0x3ae>
 8009b20:	1d7b      	adds	r3, r7, #5
 8009b22:	33ff      	adds	r3, #255	@ 0xff
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b28:	d81f      	bhi.n	8009b6a <USB_EPStartXfer+0x32e>
 8009b2a:	1d7b      	adds	r3, r7, #5
 8009b2c:	33ff      	adds	r3, #255	@ 0xff
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	085b      	lsrs	r3, r3, #1
 8009b32:	21fc      	movs	r1, #252	@ 0xfc
 8009b34:	187a      	adds	r2, r7, r1
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	1d7b      	adds	r3, r7, #5
 8009b3a:	33ff      	adds	r3, #255	@ 0xff
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4013      	ands	r3, r2
 8009b42:	d004      	beq.n	8009b4e <USB_EPStartXfer+0x312>
 8009b44:	187b      	adds	r3, r7, r1
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	187a      	adds	r2, r7, r1
 8009b4c:	6013      	str	r3, [r2, #0]
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	23fc      	movs	r3, #252	@ 0xfc
 8009b56:	18fb      	adds	r3, r7, r3
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	029b      	lsls	r3, r3, #10
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	4313      	orrs	r3, r2
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	801a      	strh	r2, [r3, #0]
 8009b68:	e03f      	b.n	8009bea <USB_EPStartXfer+0x3ae>
 8009b6a:	1d7b      	adds	r3, r7, #5
 8009b6c:	33ff      	adds	r3, #255	@ 0xff
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	095b      	lsrs	r3, r3, #5
 8009b72:	21fc      	movs	r1, #252	@ 0xfc
 8009b74:	187a      	adds	r2, r7, r1
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	1d7b      	adds	r3, r7, #5
 8009b7a:	33ff      	adds	r3, #255	@ 0xff
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	221f      	movs	r2, #31
 8009b80:	4013      	ands	r3, r2
 8009b82:	d104      	bne.n	8009b8e <USB_EPStartXfer+0x352>
 8009b84:	187b      	adds	r3, r7, r1
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	187a      	adds	r2, r7, r1
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	23fc      	movs	r3, #252	@ 0xfc
 8009b96:	18fb      	adds	r3, r7, r3
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	029b      	lsls	r3, r3, #10
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8009c20 <USB_EPStartXfer+0x3e4>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	801a      	strh	r2, [r3, #0]
 8009bae:	e01c      	b.n	8009bea <USB_EPStartXfer+0x3ae>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d118      	bne.n	8009bea <USB_EPStartXfer+0x3ae>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	623b      	str	r3, [r7, #32]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2250      	movs	r2, #80	@ 0x50
 8009bc0:	5a9b      	ldrh	r3, [r3, r2]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	001a      	movs	r2, r3
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	189b      	adds	r3, r3, r2
 8009bca:	623b      	str	r3, [r7, #32]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	00da      	lsls	r2, r3, #3
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	18d3      	adds	r3, r2, r3
 8009bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8009c10 <USB_EPStartXfer+0x3d4>)
 8009bd8:	4694      	mov	ip, r2
 8009bda:	4463      	add	r3, ip
 8009bdc:	61fb      	str	r3, [r7, #28]
 8009bde:	1d7b      	adds	r3, r7, #5
 8009be0:	33ff      	adds	r3, #255	@ 0xff
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009bea:	2076      	movs	r0, #118	@ 0x76
 8009bec:	183b      	adds	r3, r7, r0
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	8912      	ldrh	r2, [r2, #8]
 8009bf2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	6959      	ldr	r1, [r3, #20]
 8009bf8:	1d7b      	adds	r3, r7, #5
 8009bfa:	33ff      	adds	r3, #255	@ 0xff
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	b29c      	uxth	r4, r3
 8009c00:	183b      	adds	r3, r7, r0
 8009c02:	881a      	ldrh	r2, [r3, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	0023      	movs	r3, r4
 8009c08:	f001 f882 	bl	800ad10 <USB_WritePMA>
 8009c0c:	e329      	b.n	800a262 <USB_EPStartXfer+0xa26>
 8009c0e:	46c0      	nop			@ (mov r8, r8)
 8009c10:	00000402 	.word	0x00000402
 8009c14:	ffff8f8f 	.word	0xffff8f8f
 8009c18:	ffff8180 	.word	0xffff8180
 8009c1c:	00000406 	.word	0x00000406
 8009c20:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	785b      	ldrb	r3, [r3, #1]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d000      	beq.n	8009c2e <USB_EPStartXfer+0x3f2>
 8009c2c:	e070      	b.n	8009d10 <USB_EPStartXfer+0x4d4>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2250      	movs	r2, #80	@ 0x50
 8009c36:	5a9b      	ldrh	r3, [r3, r2]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	001a      	movs	r2, r3
 8009c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c3e:	189b      	adds	r3, r3, r2
 8009c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	00da      	lsls	r2, r3, #3
 8009c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c4a:	18d3      	adds	r3, r2, r3
 8009c4c:	4acd      	ldr	r2, [pc, #820]	@ (8009f84 <USB_EPStartXfer+0x748>)
 8009c4e:	4694      	mov	ip, r2
 8009c50:	4463      	add	r3, ip
 8009c52:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	059b      	lsls	r3, r3, #22
 8009c5c:	0d9b      	lsrs	r3, r3, #22
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c62:	801a      	strh	r2, [r3, #0]
 8009c64:	1d7b      	adds	r3, r7, #5
 8009c66:	33ff      	adds	r3, #255	@ 0xff
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d108      	bne.n	8009c80 <USB_EPStartXfer+0x444>
 8009c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	4ac4      	ldr	r2, [pc, #784]	@ (8009f88 <USB_EPStartXfer+0x74c>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c7c:	801a      	strh	r2, [r3, #0]
 8009c7e:	e064      	b.n	8009d4a <USB_EPStartXfer+0x50e>
 8009c80:	1d7b      	adds	r3, r7, #5
 8009c82:	33ff      	adds	r3, #255	@ 0xff
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c88:	d81f      	bhi.n	8009cca <USB_EPStartXfer+0x48e>
 8009c8a:	1d7b      	adds	r3, r7, #5
 8009c8c:	33ff      	adds	r3, #255	@ 0xff
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	085b      	lsrs	r3, r3, #1
 8009c92:	21f8      	movs	r1, #248	@ 0xf8
 8009c94:	187a      	adds	r2, r7, r1
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	1d7b      	adds	r3, r7, #5
 8009c9a:	33ff      	adds	r3, #255	@ 0xff
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	d004      	beq.n	8009cae <USB_EPStartXfer+0x472>
 8009ca4:	187b      	adds	r3, r7, r1
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	187a      	adds	r2, r7, r1
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	23f8      	movs	r3, #248	@ 0xf8
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	029b      	lsls	r3, r3, #10
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cc6:	801a      	strh	r2, [r3, #0]
 8009cc8:	e03f      	b.n	8009d4a <USB_EPStartXfer+0x50e>
 8009cca:	1d7b      	adds	r3, r7, #5
 8009ccc:	33ff      	adds	r3, #255	@ 0xff
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	095b      	lsrs	r3, r3, #5
 8009cd2:	21f8      	movs	r1, #248	@ 0xf8
 8009cd4:	187a      	adds	r2, r7, r1
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	1d7b      	adds	r3, r7, #5
 8009cda:	33ff      	adds	r3, #255	@ 0xff
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	221f      	movs	r2, #31
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	d104      	bne.n	8009cee <USB_EPStartXfer+0x4b2>
 8009ce4:	187b      	adds	r3, r7, r1
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	187a      	adds	r2, r7, r1
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	23f8      	movs	r3, #248	@ 0xf8
 8009cf6:	18fb      	adds	r3, r7, r3
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	029b      	lsls	r3, r3, #10
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	4313      	orrs	r3, r2
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	4aa0      	ldr	r2, [pc, #640]	@ (8009f88 <USB_EPStartXfer+0x74c>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d0c:	801a      	strh	r2, [r3, #0]
 8009d0e:	e01c      	b.n	8009d4a <USB_EPStartXfer+0x50e>
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	785b      	ldrb	r3, [r3, #1]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d118      	bne.n	8009d4a <USB_EPStartXfer+0x50e>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2250      	movs	r2, #80	@ 0x50
 8009d20:	5a9b      	ldrh	r3, [r3, r2]
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	001a      	movs	r2, r3
 8009d26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d28:	189b      	adds	r3, r3, r2
 8009d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	00da      	lsls	r2, r3, #3
 8009d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d34:	18d3      	adds	r3, r2, r3
 8009d36:	4a93      	ldr	r2, [pc, #588]	@ (8009f84 <USB_EPStartXfer+0x748>)
 8009d38:	4694      	mov	ip, r2
 8009d3a:	4463      	add	r3, ip
 8009d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d3e:	1d7b      	adds	r3, r7, #5
 8009d40:	33ff      	adds	r3, #255	@ 0xff
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d4a:	2076      	movs	r0, #118	@ 0x76
 8009d4c:	183b      	adds	r3, r7, r0
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	8912      	ldrh	r2, [r2, #8]
 8009d52:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	6959      	ldr	r1, [r3, #20]
 8009d58:	1d7b      	adds	r3, r7, #5
 8009d5a:	33ff      	adds	r3, #255	@ 0xff
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	b29c      	uxth	r4, r3
 8009d60:	183b      	adds	r3, r7, r0
 8009d62:	881a      	ldrh	r2, [r3, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	0023      	movs	r3, r4
 8009d68:	f000 ffd2 	bl	800ad10 <USB_WritePMA>
            ep->xfer_buff += len;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	695a      	ldr	r2, [r3, #20]
 8009d70:	1d7b      	adds	r3, r7, #5
 8009d72:	33ff      	adds	r3, #255	@ 0xff
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	18d2      	adds	r2, r2, r3
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	6a1a      	ldr	r2, [r3, #32]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d908      	bls.n	8009d9a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	6a1a      	ldr	r2, [r3, #32]
 8009d8c:	1d7b      	adds	r3, r7, #5
 8009d8e:	33ff      	adds	r3, #255	@ 0xff
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	1ad2      	subs	r2, r2, r3
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	621a      	str	r2, [r3, #32]
 8009d98:	e007      	b.n	8009daa <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	1d7a      	adds	r2, r7, #5
 8009da0:	32ff      	adds	r2, #255	@ 0xff
 8009da2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2200      	movs	r2, #0
 8009da8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	785b      	ldrb	r3, [r3, #1]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d000      	beq.n	8009db8 <USB_EPStartXfer+0x57c>
 8009db6:	e070      	b.n	8009e9a <USB_EPStartXfer+0x65e>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2250      	movs	r2, #80	@ 0x50
 8009dc0:	5a9b      	ldrh	r3, [r3, r2]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	001a      	movs	r2, r3
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc8:	189b      	adds	r3, r3, r2
 8009dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	00da      	lsls	r2, r3, #3
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd4:	18d3      	adds	r3, r2, r3
 8009dd6:	4a6d      	ldr	r2, [pc, #436]	@ (8009f8c <USB_EPStartXfer+0x750>)
 8009dd8:	4694      	mov	ip, r2
 8009dda:	4463      	add	r3, ip
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	059b      	lsls	r3, r3, #22
 8009de6:	0d9b      	lsrs	r3, r3, #22
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dec:	801a      	strh	r2, [r3, #0]
 8009dee:	1d7b      	adds	r3, r7, #5
 8009df0:	33ff      	adds	r3, #255	@ 0xff
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d108      	bne.n	8009e0a <USB_EPStartXfer+0x5ce>
 8009df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dfa:	881b      	ldrh	r3, [r3, #0]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	4a62      	ldr	r2, [pc, #392]	@ (8009f88 <USB_EPStartXfer+0x74c>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e06:	801a      	strh	r2, [r3, #0]
 8009e08:	e062      	b.n	8009ed0 <USB_EPStartXfer+0x694>
 8009e0a:	1d7b      	adds	r3, r7, #5
 8009e0c:	33ff      	adds	r3, #255	@ 0xff
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e12:	d81f      	bhi.n	8009e54 <USB_EPStartXfer+0x618>
 8009e14:	1d7b      	adds	r3, r7, #5
 8009e16:	33ff      	adds	r3, #255	@ 0xff
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	085b      	lsrs	r3, r3, #1
 8009e1c:	21f4      	movs	r1, #244	@ 0xf4
 8009e1e:	187a      	adds	r2, r7, r1
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	1d7b      	adds	r3, r7, #5
 8009e24:	33ff      	adds	r3, #255	@ 0xff
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	d004      	beq.n	8009e38 <USB_EPStartXfer+0x5fc>
 8009e2e:	187b      	adds	r3, r7, r1
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3301      	adds	r3, #1
 8009e34:	187a      	adds	r2, r7, r1
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	23f4      	movs	r3, #244	@ 0xf4
 8009e40:	18fb      	adds	r3, r7, r3
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	029b      	lsls	r3, r3, #10
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e50:	801a      	strh	r2, [r3, #0]
 8009e52:	e03d      	b.n	8009ed0 <USB_EPStartXfer+0x694>
 8009e54:	1d7b      	adds	r3, r7, #5
 8009e56:	33ff      	adds	r3, #255	@ 0xff
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	095b      	lsrs	r3, r3, #5
 8009e5c:	21f4      	movs	r1, #244	@ 0xf4
 8009e5e:	187a      	adds	r2, r7, r1
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	1d7b      	adds	r3, r7, #5
 8009e64:	33ff      	adds	r3, #255	@ 0xff
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	221f      	movs	r2, #31
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	d104      	bne.n	8009e78 <USB_EPStartXfer+0x63c>
 8009e6e:	187b      	adds	r3, r7, r1
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	187a      	adds	r2, r7, r1
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	23f4      	movs	r3, #244	@ 0xf4
 8009e80:	18fb      	adds	r3, r7, r3
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	029b      	lsls	r3, r3, #10
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8009f88 <USB_EPStartXfer+0x74c>)
 8009e90:	4313      	orrs	r3, r2
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e96:	801a      	strh	r2, [r3, #0]
 8009e98:	e01a      	b.n	8009ed0 <USB_EPStartXfer+0x694>
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	785b      	ldrb	r3, [r3, #1]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d116      	bne.n	8009ed0 <USB_EPStartXfer+0x694>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2250      	movs	r2, #80	@ 0x50
 8009ea6:	5a9b      	ldrh	r3, [r3, r2]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	001a      	movs	r2, r3
 8009eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eae:	189b      	adds	r3, r3, r2
 8009eb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	00da      	lsls	r2, r3, #3
 8009eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eba:	18d3      	adds	r3, r2, r3
 8009ebc:	4a33      	ldr	r2, [pc, #204]	@ (8009f8c <USB_EPStartXfer+0x750>)
 8009ebe:	4694      	mov	ip, r2
 8009ec0:	4463      	add	r3, ip
 8009ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ec4:	1d7b      	adds	r3, r7, #5
 8009ec6:	33ff      	adds	r3, #255	@ 0xff
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ece:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009ed0:	2076      	movs	r0, #118	@ 0x76
 8009ed2:	183b      	adds	r3, r7, r0
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	8952      	ldrh	r2, [r2, #10]
 8009ed8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	6959      	ldr	r1, [r3, #20]
 8009ede:	1d7b      	adds	r3, r7, #5
 8009ee0:	33ff      	adds	r3, #255	@ 0xff
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	b29c      	uxth	r4, r3
 8009ee6:	183b      	adds	r3, r7, r0
 8009ee8:	881a      	ldrh	r2, [r3, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	0023      	movs	r3, r4
 8009eee:	f000 ff0f 	bl	800ad10 <USB_WritePMA>
 8009ef2:	e1b6      	b.n	800a262 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	1d7a      	adds	r2, r7, #5
 8009efa:	32ff      	adds	r2, #255	@ 0xff
 8009efc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	18d3      	adds	r3, r2, r3
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	2062      	movs	r0, #98	@ 0x62
 8009f0e:	183b      	adds	r3, r7, r0
 8009f10:	491f      	ldr	r1, [pc, #124]	@ (8009f90 <USB_EPStartXfer+0x754>)
 8009f12:	400a      	ands	r2, r1
 8009f14:	801a      	strh	r2, [r3, #0]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	18d3      	adds	r3, r2, r3
 8009f20:	183a      	adds	r2, r7, r0
 8009f22:	8812      	ldrh	r2, [r2, #0]
 8009f24:	491b      	ldr	r1, [pc, #108]	@ (8009f94 <USB_EPStartXfer+0x758>)
 8009f26:	430a      	orrs	r2, r1
 8009f28:	b292      	uxth	r2, r2
 8009f2a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2250      	movs	r2, #80	@ 0x50
 8009f34:	5a9b      	ldrh	r3, [r3, r2]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	001a      	movs	r2, r3
 8009f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f3c:	189b      	adds	r3, r3, r2
 8009f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	00da      	lsls	r2, r3, #3
 8009f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f48:	18d3      	adds	r3, r2, r3
 8009f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8009f84 <USB_EPStartXfer+0x748>)
 8009f4c:	4694      	mov	ip, r2
 8009f4e:	4463      	add	r3, ip
 8009f50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f52:	1d7b      	adds	r3, r7, #5
 8009f54:	33ff      	adds	r3, #255	@ 0xff
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009f5e:	2076      	movs	r0, #118	@ 0x76
 8009f60:	183b      	adds	r3, r7, r0
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	8912      	ldrh	r2, [r2, #8]
 8009f66:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	6959      	ldr	r1, [r3, #20]
 8009f6c:	1d7b      	adds	r3, r7, #5
 8009f6e:	33ff      	adds	r3, #255	@ 0xff
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	b29c      	uxth	r4, r3
 8009f74:	183b      	adds	r3, r7, r0
 8009f76:	881a      	ldrh	r2, [r3, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	0023      	movs	r3, r4
 8009f7c:	f000 fec8 	bl	800ad10 <USB_WritePMA>
 8009f80:	e16f      	b.n	800a262 <USB_EPStartXfer+0xa26>
 8009f82:	46c0      	nop			@ (mov r8, r8)
 8009f84:	00000402 	.word	0x00000402
 8009f88:	ffff8000 	.word	0xffff8000
 8009f8c:	00000406 	.word	0x00000406
 8009f90:	ffff8e8f 	.word	0xffff8e8f
 8009f94:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	6a1a      	ldr	r2, [r3, #32]
 8009f9c:	1d7b      	adds	r3, r7, #5
 8009f9e:	33ff      	adds	r3, #255	@ 0xff
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	1ad2      	subs	r2, r2, r3
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	18d3      	adds	r3, r2, r3
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	001a      	movs	r2, r3
 8009fb8:	2340      	movs	r3, #64	@ 0x40
 8009fba:	4013      	ands	r3, r2
 8009fbc:	d100      	bne.n	8009fc0 <USB_EPStartXfer+0x784>
 8009fbe:	e0a4      	b.n	800a10a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d000      	beq.n	8009fce <USB_EPStartXfer+0x792>
 8009fcc:	e070      	b.n	800a0b0 <USB_EPStartXfer+0x874>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2250      	movs	r2, #80	@ 0x50
 8009fd6:	5a9b      	ldrh	r3, [r3, r2]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	001a      	movs	r2, r3
 8009fdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fde:	189b      	adds	r3, r3, r2
 8009fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	00da      	lsls	r2, r3, #3
 8009fe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fea:	18d3      	adds	r3, r2, r3
 8009fec:	4ada      	ldr	r2, [pc, #872]	@ (800a358 <USB_EPStartXfer+0xb1c>)
 8009fee:	4694      	mov	ip, r2
 8009ff0:	4463      	add	r3, ip
 8009ff2:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	059b      	lsls	r3, r3, #22
 8009ffc:	0d9b      	lsrs	r3, r3, #22
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a002:	801a      	strh	r2, [r3, #0]
 800a004:	1d7b      	adds	r3, r7, #5
 800a006:	33ff      	adds	r3, #255	@ 0xff
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d108      	bne.n	800a020 <USB_EPStartXfer+0x7e4>
 800a00e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	b29b      	uxth	r3, r3
 800a014:	4ad1      	ldr	r2, [pc, #836]	@ (800a35c <USB_EPStartXfer+0xb20>)
 800a016:	4313      	orrs	r3, r2
 800a018:	b29a      	uxth	r2, r3
 800a01a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a01c:	801a      	strh	r2, [r3, #0]
 800a01e:	e062      	b.n	800a0e6 <USB_EPStartXfer+0x8aa>
 800a020:	1d7b      	adds	r3, r7, #5
 800a022:	33ff      	adds	r3, #255	@ 0xff
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b3e      	cmp	r3, #62	@ 0x3e
 800a028:	d81f      	bhi.n	800a06a <USB_EPStartXfer+0x82e>
 800a02a:	1d7b      	adds	r3, r7, #5
 800a02c:	33ff      	adds	r3, #255	@ 0xff
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	085b      	lsrs	r3, r3, #1
 800a032:	21f0      	movs	r1, #240	@ 0xf0
 800a034:	187a      	adds	r2, r7, r1
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	1d7b      	adds	r3, r7, #5
 800a03a:	33ff      	adds	r3, #255	@ 0xff
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2201      	movs	r2, #1
 800a040:	4013      	ands	r3, r2
 800a042:	d004      	beq.n	800a04e <USB_EPStartXfer+0x812>
 800a044:	187b      	adds	r3, r7, r1
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3301      	adds	r3, #1
 800a04a:	187a      	adds	r2, r7, r1
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	b29a      	uxth	r2, r3
 800a054:	23f0      	movs	r3, #240	@ 0xf0
 800a056:	18fb      	adds	r3, r7, r3
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	029b      	lsls	r3, r3, #10
 800a05e:	b29b      	uxth	r3, r3
 800a060:	4313      	orrs	r3, r2
 800a062:	b29a      	uxth	r2, r3
 800a064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a066:	801a      	strh	r2, [r3, #0]
 800a068:	e03d      	b.n	800a0e6 <USB_EPStartXfer+0x8aa>
 800a06a:	1d7b      	adds	r3, r7, #5
 800a06c:	33ff      	adds	r3, #255	@ 0xff
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	095b      	lsrs	r3, r3, #5
 800a072:	21f0      	movs	r1, #240	@ 0xf0
 800a074:	187a      	adds	r2, r7, r1
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	1d7b      	adds	r3, r7, #5
 800a07a:	33ff      	adds	r3, #255	@ 0xff
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	221f      	movs	r2, #31
 800a080:	4013      	ands	r3, r2
 800a082:	d104      	bne.n	800a08e <USB_EPStartXfer+0x852>
 800a084:	187b      	adds	r3, r7, r1
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3b01      	subs	r3, #1
 800a08a:	187a      	adds	r2, r7, r1
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	b29a      	uxth	r2, r3
 800a094:	23f0      	movs	r3, #240	@ 0xf0
 800a096:	18fb      	adds	r3, r7, r3
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	029b      	lsls	r3, r3, #10
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4aad      	ldr	r2, [pc, #692]	@ (800a35c <USB_EPStartXfer+0xb20>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0ac:	801a      	strh	r2, [r3, #0]
 800a0ae:	e01a      	b.n	800a0e6 <USB_EPStartXfer+0x8aa>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	785b      	ldrb	r3, [r3, #1]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d116      	bne.n	800a0e6 <USB_EPStartXfer+0x8aa>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2250      	movs	r2, #80	@ 0x50
 800a0bc:	5a9b      	ldrh	r3, [r3, r2]
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	001a      	movs	r2, r3
 800a0c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0c4:	189b      	adds	r3, r3, r2
 800a0c6:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	00da      	lsls	r2, r3, #3
 800a0ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0d0:	18d3      	adds	r3, r2, r3
 800a0d2:	4aa1      	ldr	r2, [pc, #644]	@ (800a358 <USB_EPStartXfer+0xb1c>)
 800a0d4:	4694      	mov	ip, r2
 800a0d6:	4463      	add	r3, ip
 800a0d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0da:	1d7b      	adds	r3, r7, #5
 800a0dc:	33ff      	adds	r3, #255	@ 0xff
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a0e6:	2076      	movs	r0, #118	@ 0x76
 800a0e8:	183b      	adds	r3, r7, r0
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	8952      	ldrh	r2, [r2, #10]
 800a0ee:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	6959      	ldr	r1, [r3, #20]
 800a0f4:	1d7b      	adds	r3, r7, #5
 800a0f6:	33ff      	adds	r3, #255	@ 0xff
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	b29c      	uxth	r4, r3
 800a0fc:	183b      	adds	r3, r7, r0
 800a0fe:	881a      	ldrh	r2, [r3, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	0023      	movs	r3, r4
 800a104:	f000 fe04 	bl	800ad10 <USB_WritePMA>
 800a108:	e0ab      	b.n	800a262 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	785b      	ldrb	r3, [r3, #1]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d000      	beq.n	800a114 <USB_EPStartXfer+0x8d8>
 800a112:	e070      	b.n	800a1f6 <USB_EPStartXfer+0x9ba>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2250      	movs	r2, #80	@ 0x50
 800a11c:	5a9b      	ldrh	r3, [r3, r2]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	001a      	movs	r2, r3
 800a122:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a124:	189b      	adds	r3, r3, r2
 800a126:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	00da      	lsls	r2, r3, #3
 800a12e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a130:	18d3      	adds	r3, r2, r3
 800a132:	4a8b      	ldr	r2, [pc, #556]	@ (800a360 <USB_EPStartXfer+0xb24>)
 800a134:	4694      	mov	ip, r2
 800a136:	4463      	add	r3, ip
 800a138:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a13a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	059b      	lsls	r3, r3, #22
 800a142:	0d9b      	lsrs	r3, r3, #22
 800a144:	b29a      	uxth	r2, r3
 800a146:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a148:	801a      	strh	r2, [r3, #0]
 800a14a:	1d7b      	adds	r3, r7, #5
 800a14c:	33ff      	adds	r3, #255	@ 0xff
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d108      	bne.n	800a166 <USB_EPStartXfer+0x92a>
 800a154:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a156:	881b      	ldrh	r3, [r3, #0]
 800a158:	b29b      	uxth	r3, r3
 800a15a:	4a80      	ldr	r2, [pc, #512]	@ (800a35c <USB_EPStartXfer+0xb20>)
 800a15c:	4313      	orrs	r3, r2
 800a15e:	b29a      	uxth	r2, r3
 800a160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a162:	801a      	strh	r2, [r3, #0]
 800a164:	e06c      	b.n	800a240 <USB_EPStartXfer+0xa04>
 800a166:	1d7b      	adds	r3, r7, #5
 800a168:	33ff      	adds	r3, #255	@ 0xff
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a16e:	d81f      	bhi.n	800a1b0 <USB_EPStartXfer+0x974>
 800a170:	1d7b      	adds	r3, r7, #5
 800a172:	33ff      	adds	r3, #255	@ 0xff
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	085b      	lsrs	r3, r3, #1
 800a178:	21ec      	movs	r1, #236	@ 0xec
 800a17a:	187a      	adds	r2, r7, r1
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	1d7b      	adds	r3, r7, #5
 800a180:	33ff      	adds	r3, #255	@ 0xff
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2201      	movs	r2, #1
 800a186:	4013      	ands	r3, r2
 800a188:	d004      	beq.n	800a194 <USB_EPStartXfer+0x958>
 800a18a:	187b      	adds	r3, r7, r1
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	3301      	adds	r3, #1
 800a190:	187a      	adds	r2, r7, r1
 800a192:	6013      	str	r3, [r2, #0]
 800a194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	b29a      	uxth	r2, r3
 800a19a:	23ec      	movs	r3, #236	@ 0xec
 800a19c:	18fb      	adds	r3, r7, r3
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	029b      	lsls	r3, r3, #10
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1ac:	801a      	strh	r2, [r3, #0]
 800a1ae:	e047      	b.n	800a240 <USB_EPStartXfer+0xa04>
 800a1b0:	1d7b      	adds	r3, r7, #5
 800a1b2:	33ff      	adds	r3, #255	@ 0xff
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	095b      	lsrs	r3, r3, #5
 800a1b8:	21ec      	movs	r1, #236	@ 0xec
 800a1ba:	187a      	adds	r2, r7, r1
 800a1bc:	6013      	str	r3, [r2, #0]
 800a1be:	1d7b      	adds	r3, r7, #5
 800a1c0:	33ff      	adds	r3, #255	@ 0xff
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	221f      	movs	r2, #31
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	d104      	bne.n	800a1d4 <USB_EPStartXfer+0x998>
 800a1ca:	187b      	adds	r3, r7, r1
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	187a      	adds	r2, r7, r1
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	23ec      	movs	r3, #236	@ 0xec
 800a1dc:	18fb      	adds	r3, r7, r3
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	029b      	lsls	r3, r3, #10
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	4a5c      	ldr	r2, [pc, #368]	@ (800a35c <USB_EPStartXfer+0xb20>)
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1f2:	801a      	strh	r2, [r3, #0]
 800a1f4:	e024      	b.n	800a240 <USB_EPStartXfer+0xa04>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d120      	bne.n	800a240 <USB_EPStartXfer+0xa04>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2184      	movs	r1, #132	@ 0x84
 800a202:	187a      	adds	r2, r7, r1
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2250      	movs	r2, #80	@ 0x50
 800a20a:	5a9b      	ldrh	r3, [r3, r2]
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	001a      	movs	r2, r3
 800a210:	187b      	adds	r3, r7, r1
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	189b      	adds	r3, r3, r2
 800a216:	187a      	adds	r2, r7, r1
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	00da      	lsls	r2, r3, #3
 800a220:	187b      	adds	r3, r7, r1
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	18d3      	adds	r3, r2, r3
 800a226:	4a4e      	ldr	r2, [pc, #312]	@ (800a360 <USB_EPStartXfer+0xb24>)
 800a228:	4694      	mov	ip, r2
 800a22a:	4463      	add	r3, ip
 800a22c:	2180      	movs	r1, #128	@ 0x80
 800a22e:	187a      	adds	r2, r7, r1
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	1d7b      	adds	r3, r7, #5
 800a234:	33ff      	adds	r3, #255	@ 0xff
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	b29a      	uxth	r2, r3
 800a23a:	187b      	adds	r3, r7, r1
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a240:	2076      	movs	r0, #118	@ 0x76
 800a242:	183b      	adds	r3, r7, r0
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	8912      	ldrh	r2, [r2, #8]
 800a248:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	6959      	ldr	r1, [r3, #20]
 800a24e:	1d7b      	adds	r3, r7, #5
 800a250:	33ff      	adds	r3, #255	@ 0xff
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	b29c      	uxth	r4, r3
 800a256:	183b      	adds	r3, r7, r0
 800a258:	881a      	ldrh	r2, [r3, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	0023      	movs	r3, r4
 800a25e:	f000 fd57 	bl	800ad10 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	18d3      	adds	r3, r2, r3
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	b29a      	uxth	r2, r3
 800a270:	200a      	movs	r0, #10
 800a272:	183b      	adds	r3, r7, r0
 800a274:	493b      	ldr	r1, [pc, #236]	@ (800a364 <USB_EPStartXfer+0xb28>)
 800a276:	400a      	ands	r2, r1
 800a278:	801a      	strh	r2, [r3, #0]
 800a27a:	183b      	adds	r3, r7, r0
 800a27c:	183a      	adds	r2, r7, r0
 800a27e:	8812      	ldrh	r2, [r2, #0]
 800a280:	2110      	movs	r1, #16
 800a282:	404a      	eors	r2, r1
 800a284:	801a      	strh	r2, [r3, #0]
 800a286:	183b      	adds	r3, r7, r0
 800a288:	183a      	adds	r2, r7, r0
 800a28a:	8812      	ldrh	r2, [r2, #0]
 800a28c:	2120      	movs	r1, #32
 800a28e:	404a      	eors	r2, r1
 800a290:	801a      	strh	r2, [r3, #0]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	18d3      	adds	r3, r2, r3
 800a29c:	183a      	adds	r2, r7, r0
 800a29e:	8812      	ldrh	r2, [r2, #0]
 800a2a0:	4931      	ldr	r1, [pc, #196]	@ (800a368 <USB_EPStartXfer+0xb2c>)
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	b292      	uxth	r2, r2
 800a2a6:	801a      	strh	r2, [r3, #0]
 800a2a8:	f000 fbe9 	bl	800aa7e <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	7b1b      	ldrb	r3, [r3, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d000      	beq.n	800a2b6 <USB_EPStartXfer+0xa7a>
 800a2b4:	e0a8      	b.n	800a408 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	699a      	ldr	r2, [r3, #24]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d90d      	bls.n	800a2de <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	1d7a      	adds	r2, r7, #5
 800a2c8:	32ff      	adds	r2, #255	@ 0xff
 800a2ca:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	699a      	ldr	r2, [r3, #24]
 800a2d0:	1d7b      	adds	r3, r7, #5
 800a2d2:	33ff      	adds	r3, #255	@ 0xff
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	1ad2      	subs	r2, r2, r3
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	619a      	str	r2, [r3, #24]
 800a2dc:	e007      	b.n	800a2ee <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	1d7a      	adds	r2, r7, #5
 800a2e4:	32ff      	adds	r2, #255	@ 0xff
 800a2e6:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2190      	movs	r1, #144	@ 0x90
 800a2f2:	187a      	adds	r2, r7, r1
 800a2f4:	6013      	str	r3, [r2, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2250      	movs	r2, #80	@ 0x50
 800a2fa:	5a9b      	ldrh	r3, [r3, r2]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	001a      	movs	r2, r3
 800a300:	187b      	adds	r3, r7, r1
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	189b      	adds	r3, r3, r2
 800a306:	187a      	adds	r2, r7, r1
 800a308:	6013      	str	r3, [r2, #0]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	00da      	lsls	r2, r3, #3
 800a310:	187b      	adds	r3, r7, r1
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	18d3      	adds	r3, r2, r3
 800a316:	4a10      	ldr	r2, [pc, #64]	@ (800a358 <USB_EPStartXfer+0xb1c>)
 800a318:	4694      	mov	ip, r2
 800a31a:	4463      	add	r3, ip
 800a31c:	218c      	movs	r1, #140	@ 0x8c
 800a31e:	187a      	adds	r2, r7, r1
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	187b      	adds	r3, r7, r1
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	059b      	lsls	r3, r3, #22
 800a32c:	0d9b      	lsrs	r3, r3, #22
 800a32e:	b29a      	uxth	r2, r3
 800a330:	187b      	adds	r3, r7, r1
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	801a      	strh	r2, [r3, #0]
 800a336:	1d7b      	adds	r3, r7, #5
 800a338:	33ff      	adds	r3, #255	@ 0xff
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d115      	bne.n	800a36c <USB_EPStartXfer+0xb30>
 800a340:	187b      	adds	r3, r7, r1
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	881b      	ldrh	r3, [r3, #0]
 800a346:	b29b      	uxth	r3, r3
 800a348:	4a04      	ldr	r2, [pc, #16]	@ (800a35c <USB_EPStartXfer+0xb20>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	187b      	adds	r3, r7, r1
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	801a      	strh	r2, [r3, #0]
 800a354:	e36e      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
 800a356:	46c0      	nop			@ (mov r8, r8)
 800a358:	00000406 	.word	0x00000406
 800a35c:	ffff8000 	.word	0xffff8000
 800a360:	00000402 	.word	0x00000402
 800a364:	ffff8fbf 	.word	0xffff8fbf
 800a368:	ffff8080 	.word	0xffff8080
 800a36c:	1d7b      	adds	r3, r7, #5
 800a36e:	33ff      	adds	r3, #255	@ 0xff
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b3e      	cmp	r3, #62	@ 0x3e
 800a374:	d822      	bhi.n	800a3bc <USB_EPStartXfer+0xb80>
 800a376:	1d7b      	adds	r3, r7, #5
 800a378:	33ff      	adds	r3, #255	@ 0xff
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	085b      	lsrs	r3, r3, #1
 800a37e:	21e8      	movs	r1, #232	@ 0xe8
 800a380:	187a      	adds	r2, r7, r1
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	1d7b      	adds	r3, r7, #5
 800a386:	33ff      	adds	r3, #255	@ 0xff
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2201      	movs	r2, #1
 800a38c:	4013      	ands	r3, r2
 800a38e:	d004      	beq.n	800a39a <USB_EPStartXfer+0xb5e>
 800a390:	187b      	adds	r3, r7, r1
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3301      	adds	r3, #1
 800a396:	187a      	adds	r2, r7, r1
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	218c      	movs	r1, #140	@ 0x8c
 800a39c:	187b      	adds	r3, r7, r1
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	23e8      	movs	r3, #232	@ 0xe8
 800a3a6:	18fb      	adds	r3, r7, r3
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	029b      	lsls	r3, r3, #10
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	187b      	adds	r3, r7, r1
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	801a      	strh	r2, [r3, #0]
 800a3ba:	e33b      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
 800a3bc:	1d7b      	adds	r3, r7, #5
 800a3be:	33ff      	adds	r3, #255	@ 0xff
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	095b      	lsrs	r3, r3, #5
 800a3c4:	21e8      	movs	r1, #232	@ 0xe8
 800a3c6:	187a      	adds	r2, r7, r1
 800a3c8:	6013      	str	r3, [r2, #0]
 800a3ca:	1d7b      	adds	r3, r7, #5
 800a3cc:	33ff      	adds	r3, #255	@ 0xff
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	221f      	movs	r2, #31
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	d104      	bne.n	800a3e0 <USB_EPStartXfer+0xba4>
 800a3d6:	187b      	adds	r3, r7, r1
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	187a      	adds	r2, r7, r1
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	218c      	movs	r1, #140	@ 0x8c
 800a3e2:	187b      	adds	r3, r7, r1
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	23e8      	movs	r3, #232	@ 0xe8
 800a3ec:	18fb      	adds	r3, r7, r3
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	029b      	lsls	r3, r3, #10
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	4ad7      	ldr	r2, [pc, #860]	@ (800a758 <USB_EPStartXfer+0xf1c>)
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	187b      	adds	r3, r7, r1
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	801a      	strh	r2, [r3, #0]
 800a406:	e315      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	78db      	ldrb	r3, [r3, #3]
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d000      	beq.n	800a412 <USB_EPStartXfer+0xbd6>
 800a410:	e189      	b.n	800a726 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	785b      	ldrb	r3, [r3, #1]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d000      	beq.n	800a41c <USB_EPStartXfer+0xbe0>
 800a41a:	e07b      	b.n	800a514 <USB_EPStartXfer+0xcd8>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	21ac      	movs	r1, #172	@ 0xac
 800a420:	187a      	adds	r2, r7, r1
 800a422:	6013      	str	r3, [r2, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2250      	movs	r2, #80	@ 0x50
 800a428:	5a9b      	ldrh	r3, [r3, r2]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	001a      	movs	r2, r3
 800a42e:	187b      	adds	r3, r7, r1
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	189b      	adds	r3, r3, r2
 800a434:	187a      	adds	r2, r7, r1
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	00da      	lsls	r2, r3, #3
 800a43e:	187b      	adds	r3, r7, r1
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	18d3      	adds	r3, r2, r3
 800a444:	4ac5      	ldr	r2, [pc, #788]	@ (800a75c <USB_EPStartXfer+0xf20>)
 800a446:	4694      	mov	ip, r2
 800a448:	4463      	add	r3, ip
 800a44a:	21a8      	movs	r1, #168	@ 0xa8
 800a44c:	187a      	adds	r2, r7, r1
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	187b      	adds	r3, r7, r1
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	b29b      	uxth	r3, r3
 800a458:	059b      	lsls	r3, r3, #22
 800a45a:	0d9b      	lsrs	r3, r3, #22
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	187b      	adds	r3, r7, r1
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	801a      	strh	r2, [r3, #0]
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10a      	bne.n	800a482 <USB_EPStartXfer+0xc46>
 800a46c:	187b      	adds	r3, r7, r1
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	b29b      	uxth	r3, r3
 800a474:	4ab8      	ldr	r2, [pc, #736]	@ (800a758 <USB_EPStartXfer+0xf1c>)
 800a476:	4313      	orrs	r3, r2
 800a478:	b29a      	uxth	r2, r3
 800a47a:	187b      	adds	r3, r7, r1
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	801a      	strh	r2, [r3, #0]
 800a480:	e06c      	b.n	800a55c <USB_EPStartXfer+0xd20>
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	2b3e      	cmp	r3, #62	@ 0x3e
 800a488:	d820      	bhi.n	800a4cc <USB_EPStartXfer+0xc90>
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	085b      	lsrs	r3, r3, #1
 800a490:	21e4      	movs	r1, #228	@ 0xe4
 800a492:	187a      	adds	r2, r7, r1
 800a494:	6013      	str	r3, [r2, #0]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2201      	movs	r2, #1
 800a49c:	4013      	ands	r3, r2
 800a49e:	d004      	beq.n	800a4aa <USB_EPStartXfer+0xc6e>
 800a4a0:	187b      	adds	r3, r7, r1
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	187a      	adds	r2, r7, r1
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	21a8      	movs	r1, #168	@ 0xa8
 800a4ac:	187b      	adds	r3, r7, r1
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	23e4      	movs	r3, #228	@ 0xe4
 800a4b6:	18fb      	adds	r3, r7, r3
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	029b      	lsls	r3, r3, #10
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	187b      	adds	r3, r7, r1
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	e047      	b.n	800a55c <USB_EPStartXfer+0xd20>
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	095b      	lsrs	r3, r3, #5
 800a4d2:	21e4      	movs	r1, #228	@ 0xe4
 800a4d4:	187a      	adds	r2, r7, r1
 800a4d6:	6013      	str	r3, [r2, #0]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	221f      	movs	r2, #31
 800a4de:	4013      	ands	r3, r2
 800a4e0:	d104      	bne.n	800a4ec <USB_EPStartXfer+0xcb0>
 800a4e2:	187b      	adds	r3, r7, r1
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	187a      	adds	r2, r7, r1
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	21a8      	movs	r1, #168	@ 0xa8
 800a4ee:	187b      	adds	r3, r7, r1
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	881b      	ldrh	r3, [r3, #0]
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	23e4      	movs	r3, #228	@ 0xe4
 800a4f8:	18fb      	adds	r3, r7, r3
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	029b      	lsls	r3, r3, #10
 800a500:	b29b      	uxth	r3, r3
 800a502:	4313      	orrs	r3, r2
 800a504:	b29b      	uxth	r3, r3
 800a506:	4a94      	ldr	r2, [pc, #592]	@ (800a758 <USB_EPStartXfer+0xf1c>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	187b      	adds	r3, r7, r1
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	801a      	strh	r2, [r3, #0]
 800a512:	e023      	b.n	800a55c <USB_EPStartXfer+0xd20>
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	785b      	ldrb	r3, [r3, #1]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d11f      	bne.n	800a55c <USB_EPStartXfer+0xd20>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	21b4      	movs	r1, #180	@ 0xb4
 800a520:	187a      	adds	r2, r7, r1
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2250      	movs	r2, #80	@ 0x50
 800a528:	5a9b      	ldrh	r3, [r3, r2]
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	001a      	movs	r2, r3
 800a52e:	187b      	adds	r3, r7, r1
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	189b      	adds	r3, r3, r2
 800a534:	187a      	adds	r2, r7, r1
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	00da      	lsls	r2, r3, #3
 800a53e:	187b      	adds	r3, r7, r1
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	18d3      	adds	r3, r2, r3
 800a544:	4a85      	ldr	r2, [pc, #532]	@ (800a75c <USB_EPStartXfer+0xf20>)
 800a546:	4694      	mov	ip, r2
 800a548:	4463      	add	r3, ip
 800a54a:	21b0      	movs	r1, #176	@ 0xb0
 800a54c:	187a      	adds	r2, r7, r1
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	b29a      	uxth	r2, r3
 800a556:	187b      	adds	r3, r7, r1
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	801a      	strh	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	22a4      	movs	r2, #164	@ 0xa4
 800a560:	18ba      	adds	r2, r7, r2
 800a562:	6013      	str	r3, [r2, #0]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	785b      	ldrb	r3, [r3, #1]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d000      	beq.n	800a56e <USB_EPStartXfer+0xd32>
 800a56c:	e07b      	b.n	800a666 <USB_EPStartXfer+0xe2a>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	219c      	movs	r1, #156	@ 0x9c
 800a572:	187a      	adds	r2, r7, r1
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2250      	movs	r2, #80	@ 0x50
 800a57a:	5a9b      	ldrh	r3, [r3, r2]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	001a      	movs	r2, r3
 800a580:	187b      	adds	r3, r7, r1
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	189b      	adds	r3, r3, r2
 800a586:	187a      	adds	r2, r7, r1
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	00da      	lsls	r2, r3, #3
 800a590:	187b      	adds	r3, r7, r1
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	18d3      	adds	r3, r2, r3
 800a596:	4a72      	ldr	r2, [pc, #456]	@ (800a760 <USB_EPStartXfer+0xf24>)
 800a598:	4694      	mov	ip, r2
 800a59a:	4463      	add	r3, ip
 800a59c:	2198      	movs	r1, #152	@ 0x98
 800a59e:	187a      	adds	r2, r7, r1
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	187b      	adds	r3, r7, r1
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	881b      	ldrh	r3, [r3, #0]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	059b      	lsls	r3, r3, #22
 800a5ac:	0d9b      	lsrs	r3, r3, #22
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	187b      	adds	r3, r7, r1
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	801a      	strh	r2, [r3, #0]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <USB_EPStartXfer+0xd98>
 800a5be:	187b      	adds	r3, r7, r1
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	4a64      	ldr	r2, [pc, #400]	@ (800a758 <USB_EPStartXfer+0xf1c>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	187b      	adds	r3, r7, r1
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	801a      	strh	r2, [r3, #0]
 800a5d2:	e069      	b.n	800a6a8 <USB_EPStartXfer+0xe6c>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5da:	d820      	bhi.n	800a61e <USB_EPStartXfer+0xde2>
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	085b      	lsrs	r3, r3, #1
 800a5e2:	21e0      	movs	r1, #224	@ 0xe0
 800a5e4:	187a      	adds	r2, r7, r1
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	d004      	beq.n	800a5fc <USB_EPStartXfer+0xdc0>
 800a5f2:	187b      	adds	r3, r7, r1
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	187a      	adds	r2, r7, r1
 800a5fa:	6013      	str	r3, [r2, #0]
 800a5fc:	2198      	movs	r1, #152	@ 0x98
 800a5fe:	187b      	adds	r3, r7, r1
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	b29a      	uxth	r2, r3
 800a606:	23e0      	movs	r3, #224	@ 0xe0
 800a608:	18fb      	adds	r3, r7, r3
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	029b      	lsls	r3, r3, #10
 800a610:	b29b      	uxth	r3, r3
 800a612:	4313      	orrs	r3, r2
 800a614:	b29a      	uxth	r2, r3
 800a616:	187b      	adds	r3, r7, r1
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	801a      	strh	r2, [r3, #0]
 800a61c:	e044      	b.n	800a6a8 <USB_EPStartXfer+0xe6c>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	095b      	lsrs	r3, r3, #5
 800a624:	21e0      	movs	r1, #224	@ 0xe0
 800a626:	187a      	adds	r2, r7, r1
 800a628:	6013      	str	r3, [r2, #0]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	221f      	movs	r2, #31
 800a630:	4013      	ands	r3, r2
 800a632:	d104      	bne.n	800a63e <USB_EPStartXfer+0xe02>
 800a634:	187b      	adds	r3, r7, r1
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3b01      	subs	r3, #1
 800a63a:	187a      	adds	r2, r7, r1
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	2198      	movs	r1, #152	@ 0x98
 800a640:	187b      	adds	r3, r7, r1
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	b29a      	uxth	r2, r3
 800a648:	23e0      	movs	r3, #224	@ 0xe0
 800a64a:	18fb      	adds	r3, r7, r3
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	029b      	lsls	r3, r3, #10
 800a652:	b29b      	uxth	r3, r3
 800a654:	4313      	orrs	r3, r2
 800a656:	b29b      	uxth	r3, r3
 800a658:	4a3f      	ldr	r2, [pc, #252]	@ (800a758 <USB_EPStartXfer+0xf1c>)
 800a65a:	4313      	orrs	r3, r2
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	187b      	adds	r3, r7, r1
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	801a      	strh	r2, [r3, #0]
 800a664:	e020      	b.n	800a6a8 <USB_EPStartXfer+0xe6c>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	785b      	ldrb	r3, [r3, #1]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d11c      	bne.n	800a6a8 <USB_EPStartXfer+0xe6c>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2250      	movs	r2, #80	@ 0x50
 800a672:	5a9b      	ldrh	r3, [r3, r2]
 800a674:	b29b      	uxth	r3, r3
 800a676:	001a      	movs	r2, r3
 800a678:	21a4      	movs	r1, #164	@ 0xa4
 800a67a:	187b      	adds	r3, r7, r1
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	189b      	adds	r3, r3, r2
 800a680:	187a      	adds	r2, r7, r1
 800a682:	6013      	str	r3, [r2, #0]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	00da      	lsls	r2, r3, #3
 800a68a:	187b      	adds	r3, r7, r1
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	18d3      	adds	r3, r2, r3
 800a690:	4a33      	ldr	r2, [pc, #204]	@ (800a760 <USB_EPStartXfer+0xf24>)
 800a692:	4694      	mov	ip, r2
 800a694:	4463      	add	r3, ip
 800a696:	21a0      	movs	r1, #160	@ 0xa0
 800a698:	187a      	adds	r2, r7, r1
 800a69a:	6013      	str	r3, [r2, #0]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	187b      	adds	r3, r7, r1
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	69db      	ldr	r3, [r3, #28]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d100      	bne.n	800a6b2 <USB_EPStartXfer+0xe76>
 800a6b0:	e1c0      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	18d2      	adds	r2, r2, r3
 800a6bc:	2196      	movs	r1, #150	@ 0x96
 800a6be:	187b      	adds	r3, r7, r1
 800a6c0:	8812      	ldrh	r2, [r2, #0]
 800a6c2:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a6c4:	187b      	adds	r3, r7, r1
 800a6c6:	881a      	ldrh	r2, [r3, #0]
 800a6c8:	2380      	movs	r3, #128	@ 0x80
 800a6ca:	01db      	lsls	r3, r3, #7
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	d004      	beq.n	800a6da <USB_EPStartXfer+0xe9e>
 800a6d0:	187b      	adds	r3, r7, r1
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	2240      	movs	r2, #64	@ 0x40
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	d10d      	bne.n	800a6f6 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a6da:	2196      	movs	r1, #150	@ 0x96
 800a6dc:	187b      	adds	r3, r7, r1
 800a6de:	881a      	ldrh	r2, [r3, #0]
 800a6e0:	2380      	movs	r3, #128	@ 0x80
 800a6e2:	01db      	lsls	r3, r3, #7
 800a6e4:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a6e6:	d000      	beq.n	800a6ea <USB_EPStartXfer+0xeae>
 800a6e8:	e1a4      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a6ea:	187b      	adds	r3, r7, r1
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	2240      	movs	r2, #64	@ 0x40
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	d000      	beq.n	800a6f6 <USB_EPStartXfer+0xeba>
 800a6f4:	e19e      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	18d3      	adds	r3, r2, r3
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	b29a      	uxth	r2, r3
 800a704:	2094      	movs	r0, #148	@ 0x94
 800a706:	183b      	adds	r3, r7, r0
 800a708:	4916      	ldr	r1, [pc, #88]	@ (800a764 <USB_EPStartXfer+0xf28>)
 800a70a:	400a      	ands	r2, r1
 800a70c:	801a      	strh	r2, [r3, #0]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	18d3      	adds	r3, r2, r3
 800a718:	183a      	adds	r2, r7, r0
 800a71a:	8812      	ldrh	r2, [r2, #0]
 800a71c:	4912      	ldr	r1, [pc, #72]	@ (800a768 <USB_EPStartXfer+0xf2c>)
 800a71e:	430a      	orrs	r2, r1
 800a720:	b292      	uxth	r2, r2
 800a722:	801a      	strh	r2, [r3, #0]
 800a724:	e186      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	78db      	ldrb	r3, [r3, #3]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d000      	beq.n	800a730 <USB_EPStartXfer+0xef4>
 800a72e:	e17f      	b.n	800aa30 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	699a      	ldr	r2, [r3, #24]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d917      	bls.n	800a76c <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	1d7a      	adds	r2, r7, #5
 800a742:	32ff      	adds	r2, #255	@ 0xff
 800a744:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	699a      	ldr	r2, [r3, #24]
 800a74a:	1d7b      	adds	r3, r7, #5
 800a74c:	33ff      	adds	r3, #255	@ 0xff
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	1ad2      	subs	r2, r2, r3
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	619a      	str	r2, [r3, #24]
 800a756:	e011      	b.n	800a77c <USB_EPStartXfer+0xf40>
 800a758:	ffff8000 	.word	0xffff8000
 800a75c:	00000402 	.word	0x00000402
 800a760:	00000406 	.word	0x00000406
 800a764:	ffff8f8f 	.word	0xffff8f8f
 800a768:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	1d7a      	adds	r2, r7, #5
 800a772:	32ff      	adds	r2, #255	@ 0xff
 800a774:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2200      	movs	r2, #0
 800a77a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	785b      	ldrb	r3, [r3, #1]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d000      	beq.n	800a786 <USB_EPStartXfer+0xf4a>
 800a784:	e081      	b.n	800a88a <USB_EPStartXfer+0x104e>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	21cc      	movs	r1, #204	@ 0xcc
 800a78a:	187a      	adds	r2, r7, r1
 800a78c:	6013      	str	r3, [r2, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2250      	movs	r2, #80	@ 0x50
 800a792:	5a9b      	ldrh	r3, [r3, r2]
 800a794:	b29b      	uxth	r3, r3
 800a796:	001a      	movs	r2, r3
 800a798:	187b      	adds	r3, r7, r1
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	189b      	adds	r3, r3, r2
 800a79e:	187a      	adds	r2, r7, r1
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	00da      	lsls	r2, r3, #3
 800a7a8:	187b      	adds	r3, r7, r1
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	18d3      	adds	r3, r2, r3
 800a7ae:	4ab6      	ldr	r2, [pc, #728]	@ (800aa88 <USB_EPStartXfer+0x124c>)
 800a7b0:	4694      	mov	ip, r2
 800a7b2:	4463      	add	r3, ip
 800a7b4:	21c8      	movs	r1, #200	@ 0xc8
 800a7b6:	187a      	adds	r2, r7, r1
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	187b      	adds	r3, r7, r1
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	059b      	lsls	r3, r3, #22
 800a7c4:	0d9b      	lsrs	r3, r3, #22
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	187b      	adds	r3, r7, r1
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	801a      	strh	r2, [r3, #0]
 800a7ce:	1d7b      	adds	r3, r7, #5
 800a7d0:	33ff      	adds	r3, #255	@ 0xff
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <USB_EPStartXfer+0xfb2>
 800a7d8:	187b      	adds	r3, r7, r1
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	4aaa      	ldr	r2, [pc, #680]	@ (800aa8c <USB_EPStartXfer+0x1250>)
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	187b      	adds	r3, r7, r1
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	801a      	strh	r2, [r3, #0]
 800a7ec:	e072      	b.n	800a8d4 <USB_EPStartXfer+0x1098>
 800a7ee:	1d7b      	adds	r3, r7, #5
 800a7f0:	33ff      	adds	r3, #255	@ 0xff
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7f6:	d822      	bhi.n	800a83e <USB_EPStartXfer+0x1002>
 800a7f8:	1d7b      	adds	r3, r7, #5
 800a7fa:	33ff      	adds	r3, #255	@ 0xff
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	085b      	lsrs	r3, r3, #1
 800a800:	21dc      	movs	r1, #220	@ 0xdc
 800a802:	187a      	adds	r2, r7, r1
 800a804:	6013      	str	r3, [r2, #0]
 800a806:	1d7b      	adds	r3, r7, #5
 800a808:	33ff      	adds	r3, #255	@ 0xff
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2201      	movs	r2, #1
 800a80e:	4013      	ands	r3, r2
 800a810:	d004      	beq.n	800a81c <USB_EPStartXfer+0xfe0>
 800a812:	187b      	adds	r3, r7, r1
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3301      	adds	r3, #1
 800a818:	187a      	adds	r2, r7, r1
 800a81a:	6013      	str	r3, [r2, #0]
 800a81c:	21c8      	movs	r1, #200	@ 0xc8
 800a81e:	187b      	adds	r3, r7, r1
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	b29a      	uxth	r2, r3
 800a826:	23dc      	movs	r3, #220	@ 0xdc
 800a828:	18fb      	adds	r3, r7, r3
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	029b      	lsls	r3, r3, #10
 800a830:	b29b      	uxth	r3, r3
 800a832:	4313      	orrs	r3, r2
 800a834:	b29a      	uxth	r2, r3
 800a836:	187b      	adds	r3, r7, r1
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	801a      	strh	r2, [r3, #0]
 800a83c:	e04a      	b.n	800a8d4 <USB_EPStartXfer+0x1098>
 800a83e:	1d7b      	adds	r3, r7, #5
 800a840:	33ff      	adds	r3, #255	@ 0xff
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	095b      	lsrs	r3, r3, #5
 800a846:	21dc      	movs	r1, #220	@ 0xdc
 800a848:	187a      	adds	r2, r7, r1
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	1d7b      	adds	r3, r7, #5
 800a84e:	33ff      	adds	r3, #255	@ 0xff
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	221f      	movs	r2, #31
 800a854:	4013      	ands	r3, r2
 800a856:	d104      	bne.n	800a862 <USB_EPStartXfer+0x1026>
 800a858:	187b      	adds	r3, r7, r1
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	187a      	adds	r2, r7, r1
 800a860:	6013      	str	r3, [r2, #0]
 800a862:	21c8      	movs	r1, #200	@ 0xc8
 800a864:	187b      	adds	r3, r7, r1
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	881b      	ldrh	r3, [r3, #0]
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	23dc      	movs	r3, #220	@ 0xdc
 800a86e:	18fb      	adds	r3, r7, r3
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	b29b      	uxth	r3, r3
 800a874:	029b      	lsls	r3, r3, #10
 800a876:	b29b      	uxth	r3, r3
 800a878:	4313      	orrs	r3, r2
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	4a83      	ldr	r2, [pc, #524]	@ (800aa8c <USB_EPStartXfer+0x1250>)
 800a87e:	4313      	orrs	r3, r2
 800a880:	b29a      	uxth	r2, r3
 800a882:	187b      	adds	r3, r7, r1
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	801a      	strh	r2, [r3, #0]
 800a888:	e024      	b.n	800a8d4 <USB_EPStartXfer+0x1098>
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	785b      	ldrb	r3, [r3, #1]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d120      	bne.n	800a8d4 <USB_EPStartXfer+0x1098>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	21d4      	movs	r1, #212	@ 0xd4
 800a896:	187a      	adds	r2, r7, r1
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2250      	movs	r2, #80	@ 0x50
 800a89e:	5a9b      	ldrh	r3, [r3, r2]
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	001a      	movs	r2, r3
 800a8a4:	187b      	adds	r3, r7, r1
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	189b      	adds	r3, r3, r2
 800a8aa:	187a      	adds	r2, r7, r1
 800a8ac:	6013      	str	r3, [r2, #0]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	00da      	lsls	r2, r3, #3
 800a8b4:	187b      	adds	r3, r7, r1
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	18d3      	adds	r3, r2, r3
 800a8ba:	4a73      	ldr	r2, [pc, #460]	@ (800aa88 <USB_EPStartXfer+0x124c>)
 800a8bc:	4694      	mov	ip, r2
 800a8be:	4463      	add	r3, ip
 800a8c0:	21d0      	movs	r1, #208	@ 0xd0
 800a8c2:	187a      	adds	r2, r7, r1
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	1d7b      	adds	r3, r7, #5
 800a8c8:	33ff      	adds	r3, #255	@ 0xff
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	187b      	adds	r3, r7, r1
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	801a      	strh	r2, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	22c4      	movs	r2, #196	@ 0xc4
 800a8d8:	18ba      	adds	r2, r7, r2
 800a8da:	6013      	str	r3, [r2, #0]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	785b      	ldrb	r3, [r3, #1]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d000      	beq.n	800a8e6 <USB_EPStartXfer+0x10aa>
 800a8e4:	e081      	b.n	800a9ea <USB_EPStartXfer+0x11ae>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	21bc      	movs	r1, #188	@ 0xbc
 800a8ea:	187a      	adds	r2, r7, r1
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2250      	movs	r2, #80	@ 0x50
 800a8f2:	5a9b      	ldrh	r3, [r3, r2]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	001a      	movs	r2, r3
 800a8f8:	187b      	adds	r3, r7, r1
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	189b      	adds	r3, r3, r2
 800a8fe:	187a      	adds	r2, r7, r1
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	00da      	lsls	r2, r3, #3
 800a908:	187b      	adds	r3, r7, r1
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	18d3      	adds	r3, r2, r3
 800a90e:	4a60      	ldr	r2, [pc, #384]	@ (800aa90 <USB_EPStartXfer+0x1254>)
 800a910:	4694      	mov	ip, r2
 800a912:	4463      	add	r3, ip
 800a914:	21b8      	movs	r1, #184	@ 0xb8
 800a916:	187a      	adds	r2, r7, r1
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	187b      	adds	r3, r7, r1
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	b29b      	uxth	r3, r3
 800a922:	059b      	lsls	r3, r3, #22
 800a924:	0d9b      	lsrs	r3, r3, #22
 800a926:	b29a      	uxth	r2, r3
 800a928:	187b      	adds	r3, r7, r1
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	801a      	strh	r2, [r3, #0]
 800a92e:	1d7b      	adds	r3, r7, #5
 800a930:	33ff      	adds	r3, #255	@ 0xff
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <USB_EPStartXfer+0x1112>
 800a938:	187b      	adds	r3, r7, r1
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	881b      	ldrh	r3, [r3, #0]
 800a93e:	b29b      	uxth	r3, r3
 800a940:	4a52      	ldr	r2, [pc, #328]	@ (800aa8c <USB_EPStartXfer+0x1250>)
 800a942:	4313      	orrs	r3, r2
 800a944:	b29a      	uxth	r2, r3
 800a946:	187b      	adds	r3, r7, r1
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	801a      	strh	r2, [r3, #0]
 800a94c:	e072      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
 800a94e:	1d7b      	adds	r3, r7, #5
 800a950:	33ff      	adds	r3, #255	@ 0xff
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b3e      	cmp	r3, #62	@ 0x3e
 800a956:	d822      	bhi.n	800a99e <USB_EPStartXfer+0x1162>
 800a958:	1d7b      	adds	r3, r7, #5
 800a95a:	33ff      	adds	r3, #255	@ 0xff
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	085b      	lsrs	r3, r3, #1
 800a960:	21d8      	movs	r1, #216	@ 0xd8
 800a962:	187a      	adds	r2, r7, r1
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	1d7b      	adds	r3, r7, #5
 800a968:	33ff      	adds	r3, #255	@ 0xff
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2201      	movs	r2, #1
 800a96e:	4013      	ands	r3, r2
 800a970:	d004      	beq.n	800a97c <USB_EPStartXfer+0x1140>
 800a972:	187b      	adds	r3, r7, r1
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3301      	adds	r3, #1
 800a978:	187a      	adds	r2, r7, r1
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	21b8      	movs	r1, #184	@ 0xb8
 800a97e:	187b      	adds	r3, r7, r1
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	b29a      	uxth	r2, r3
 800a986:	23d8      	movs	r3, #216	@ 0xd8
 800a988:	18fb      	adds	r3, r7, r3
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	029b      	lsls	r3, r3, #10
 800a990:	b29b      	uxth	r3, r3
 800a992:	4313      	orrs	r3, r2
 800a994:	b29a      	uxth	r2, r3
 800a996:	187b      	adds	r3, r7, r1
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	801a      	strh	r2, [r3, #0]
 800a99c:	e04a      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
 800a99e:	1d7b      	adds	r3, r7, #5
 800a9a0:	33ff      	adds	r3, #255	@ 0xff
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	095b      	lsrs	r3, r3, #5
 800a9a6:	21d8      	movs	r1, #216	@ 0xd8
 800a9a8:	187a      	adds	r2, r7, r1
 800a9aa:	6013      	str	r3, [r2, #0]
 800a9ac:	1d7b      	adds	r3, r7, #5
 800a9ae:	33ff      	adds	r3, #255	@ 0xff
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	221f      	movs	r2, #31
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	d104      	bne.n	800a9c2 <USB_EPStartXfer+0x1186>
 800a9b8:	187b      	adds	r3, r7, r1
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	187a      	adds	r2, r7, r1
 800a9c0:	6013      	str	r3, [r2, #0]
 800a9c2:	21b8      	movs	r1, #184	@ 0xb8
 800a9c4:	187b      	adds	r3, r7, r1
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	881b      	ldrh	r3, [r3, #0]
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	23d8      	movs	r3, #216	@ 0xd8
 800a9ce:	18fb      	adds	r3, r7, r3
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	029b      	lsls	r3, r3, #10
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	4a2b      	ldr	r2, [pc, #172]	@ (800aa8c <USB_EPStartXfer+0x1250>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	187b      	adds	r3, r7, r1
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	801a      	strh	r2, [r3, #0]
 800a9e8:	e024      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	785b      	ldrb	r3, [r3, #1]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d120      	bne.n	800aa34 <USB_EPStartXfer+0x11f8>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2250      	movs	r2, #80	@ 0x50
 800a9f6:	5a9b      	ldrh	r3, [r3, r2]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	001a      	movs	r2, r3
 800a9fc:	21c4      	movs	r1, #196	@ 0xc4
 800a9fe:	187b      	adds	r3, r7, r1
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	189b      	adds	r3, r3, r2
 800aa04:	187a      	adds	r2, r7, r1
 800aa06:	6013      	str	r3, [r2, #0]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	00da      	lsls	r2, r3, #3
 800aa0e:	187b      	adds	r3, r7, r1
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	18d3      	adds	r3, r2, r3
 800aa14:	4a1e      	ldr	r2, [pc, #120]	@ (800aa90 <USB_EPStartXfer+0x1254>)
 800aa16:	4694      	mov	ip, r2
 800aa18:	4463      	add	r3, ip
 800aa1a:	21c0      	movs	r1, #192	@ 0xc0
 800aa1c:	187a      	adds	r2, r7, r1
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	1d7b      	adds	r3, r7, #5
 800aa22:	33ff      	adds	r3, #255	@ 0xff
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	187b      	adds	r3, r7, r1
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	801a      	strh	r2, [r3, #0]
 800aa2e:	e001      	b.n	800aa34 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e025      	b.n	800aa80 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	18d3      	adds	r3, r2, r3
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	208a      	movs	r0, #138	@ 0x8a
 800aa44:	183b      	adds	r3, r7, r0
 800aa46:	4913      	ldr	r1, [pc, #76]	@ (800aa94 <USB_EPStartXfer+0x1258>)
 800aa48:	400a      	ands	r2, r1
 800aa4a:	801a      	strh	r2, [r3, #0]
 800aa4c:	183b      	adds	r3, r7, r0
 800aa4e:	183a      	adds	r2, r7, r0
 800aa50:	8812      	ldrh	r2, [r2, #0]
 800aa52:	2180      	movs	r1, #128	@ 0x80
 800aa54:	0149      	lsls	r1, r1, #5
 800aa56:	404a      	eors	r2, r1
 800aa58:	801a      	strh	r2, [r3, #0]
 800aa5a:	183b      	adds	r3, r7, r0
 800aa5c:	183a      	adds	r2, r7, r0
 800aa5e:	8812      	ldrh	r2, [r2, #0]
 800aa60:	2180      	movs	r1, #128	@ 0x80
 800aa62:	0189      	lsls	r1, r1, #6
 800aa64:	404a      	eors	r2, r1
 800aa66:	801a      	strh	r2, [r3, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	18d3      	adds	r3, r2, r3
 800aa72:	183a      	adds	r2, r7, r0
 800aa74:	8812      	ldrh	r2, [r2, #0]
 800aa76:	4908      	ldr	r1, [pc, #32]	@ (800aa98 <USB_EPStartXfer+0x125c>)
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	b292      	uxth	r2, r2
 800aa7c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	0018      	movs	r0, r3
 800aa82:	46bd      	mov	sp, r7
 800aa84:	b043      	add	sp, #268	@ 0x10c
 800aa86:	bd90      	pop	{r4, r7, pc}
 800aa88:	00000402 	.word	0x00000402
 800aa8c:	ffff8000 	.word	0xffff8000
 800aa90:	00000406 	.word	0x00000406
 800aa94:	ffffbf8f 	.word	0xffffbf8f
 800aa98:	ffff8080 	.word	0xffff8080

0800aa9c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	785b      	ldrb	r3, [r3, #1]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d01d      	beq.n	800aaea <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	18d3      	adds	r3, r2, r3
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	200c      	movs	r0, #12
 800aabe:	183b      	adds	r3, r7, r0
 800aac0:	491b      	ldr	r1, [pc, #108]	@ (800ab30 <USB_EPSetStall+0x94>)
 800aac2:	400a      	ands	r2, r1
 800aac4:	801a      	strh	r2, [r3, #0]
 800aac6:	183b      	adds	r3, r7, r0
 800aac8:	183a      	adds	r2, r7, r0
 800aaca:	8812      	ldrh	r2, [r2, #0]
 800aacc:	2110      	movs	r1, #16
 800aace:	404a      	eors	r2, r1
 800aad0:	801a      	strh	r2, [r3, #0]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	18d3      	adds	r3, r2, r3
 800aadc:	183a      	adds	r2, r7, r0
 800aade:	8812      	ldrh	r2, [r2, #0]
 800aae0:	4914      	ldr	r1, [pc, #80]	@ (800ab34 <USB_EPSetStall+0x98>)
 800aae2:	430a      	orrs	r2, r1
 800aae4:	b292      	uxth	r2, r2
 800aae6:	801a      	strh	r2, [r3, #0]
 800aae8:	e01d      	b.n	800ab26 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	18d3      	adds	r3, r2, r3
 800aaf4:	881b      	ldrh	r3, [r3, #0]
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	200e      	movs	r0, #14
 800aafa:	183b      	adds	r3, r7, r0
 800aafc:	490e      	ldr	r1, [pc, #56]	@ (800ab38 <USB_EPSetStall+0x9c>)
 800aafe:	400a      	ands	r2, r1
 800ab00:	801a      	strh	r2, [r3, #0]
 800ab02:	183b      	adds	r3, r7, r0
 800ab04:	183a      	adds	r2, r7, r0
 800ab06:	8812      	ldrh	r2, [r2, #0]
 800ab08:	2180      	movs	r1, #128	@ 0x80
 800ab0a:	0149      	lsls	r1, r1, #5
 800ab0c:	404a      	eors	r2, r1
 800ab0e:	801a      	strh	r2, [r3, #0]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	18d3      	adds	r3, r2, r3
 800ab1a:	183a      	adds	r2, r7, r0
 800ab1c:	8812      	ldrh	r2, [r2, #0]
 800ab1e:	4905      	ldr	r1, [pc, #20]	@ (800ab34 <USB_EPSetStall+0x98>)
 800ab20:	430a      	orrs	r2, r1
 800ab22:	b292      	uxth	r2, r2
 800ab24:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	0018      	movs	r0, r3
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	b004      	add	sp, #16
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	ffff8fbf 	.word	0xffff8fbf
 800ab34:	ffff8080 	.word	0xffff8080
 800ab38:	ffffbf8f 	.word	0xffffbf8f

0800ab3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	7b1b      	ldrb	r3, [r3, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d000      	beq.n	800ab50 <USB_EPClearStall+0x14>
 800ab4e:	e095      	b.n	800ac7c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	785b      	ldrb	r3, [r3, #1]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d046      	beq.n	800abe6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	18d2      	adds	r2, r2, r3
 800ab62:	2110      	movs	r1, #16
 800ab64:	187b      	adds	r3, r7, r1
 800ab66:	8812      	ldrh	r2, [r2, #0]
 800ab68:	801a      	strh	r2, [r3, #0]
 800ab6a:	187b      	adds	r3, r7, r1
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	2240      	movs	r2, #64	@ 0x40
 800ab70:	4013      	ands	r3, r2
 800ab72:	d016      	beq.n	800aba2 <USB_EPClearStall+0x66>
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	18d3      	adds	r3, r2, r3
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	200e      	movs	r0, #14
 800ab84:	183b      	adds	r3, r7, r0
 800ab86:	4940      	ldr	r1, [pc, #256]	@ (800ac88 <USB_EPClearStall+0x14c>)
 800ab88:	400a      	ands	r2, r1
 800ab8a:	801a      	strh	r2, [r3, #0]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	18d3      	adds	r3, r2, r3
 800ab96:	183a      	adds	r2, r7, r0
 800ab98:	8812      	ldrh	r2, [r2, #0]
 800ab9a:	493c      	ldr	r1, [pc, #240]	@ (800ac8c <USB_EPClearStall+0x150>)
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	b292      	uxth	r2, r2
 800aba0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	78db      	ldrb	r3, [r3, #3]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d068      	beq.n	800ac7c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	18d3      	adds	r3, r2, r3
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	200c      	movs	r0, #12
 800abba:	183b      	adds	r3, r7, r0
 800abbc:	4934      	ldr	r1, [pc, #208]	@ (800ac90 <USB_EPClearStall+0x154>)
 800abbe:	400a      	ands	r2, r1
 800abc0:	801a      	strh	r2, [r3, #0]
 800abc2:	183b      	adds	r3, r7, r0
 800abc4:	183a      	adds	r2, r7, r0
 800abc6:	8812      	ldrh	r2, [r2, #0]
 800abc8:	2120      	movs	r1, #32
 800abca:	404a      	eors	r2, r1
 800abcc:	801a      	strh	r2, [r3, #0]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	18d3      	adds	r3, r2, r3
 800abd8:	183a      	adds	r2, r7, r0
 800abda:	8812      	ldrh	r2, [r2, #0]
 800abdc:	492d      	ldr	r1, [pc, #180]	@ (800ac94 <USB_EPClearStall+0x158>)
 800abde:	430a      	orrs	r2, r1
 800abe0:	b292      	uxth	r2, r2
 800abe2:	801a      	strh	r2, [r3, #0]
 800abe4:	e04a      	b.n	800ac7c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	18d2      	adds	r2, r2, r3
 800abf0:	2116      	movs	r1, #22
 800abf2:	187b      	adds	r3, r7, r1
 800abf4:	8812      	ldrh	r2, [r2, #0]
 800abf6:	801a      	strh	r2, [r3, #0]
 800abf8:	187b      	adds	r3, r7, r1
 800abfa:	881a      	ldrh	r2, [r3, #0]
 800abfc:	2380      	movs	r3, #128	@ 0x80
 800abfe:	01db      	lsls	r3, r3, #7
 800ac00:	4013      	ands	r3, r2
 800ac02:	d016      	beq.n	800ac32 <USB_EPClearStall+0xf6>
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	18d3      	adds	r3, r2, r3
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	2014      	movs	r0, #20
 800ac14:	183b      	adds	r3, r7, r0
 800ac16:	491c      	ldr	r1, [pc, #112]	@ (800ac88 <USB_EPClearStall+0x14c>)
 800ac18:	400a      	ands	r2, r1
 800ac1a:	801a      	strh	r2, [r3, #0]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	18d3      	adds	r3, r2, r3
 800ac26:	183a      	adds	r2, r7, r0
 800ac28:	8812      	ldrh	r2, [r2, #0]
 800ac2a:	491b      	ldr	r1, [pc, #108]	@ (800ac98 <USB_EPClearStall+0x15c>)
 800ac2c:	430a      	orrs	r2, r1
 800ac2e:	b292      	uxth	r2, r2
 800ac30:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	18d3      	adds	r3, r2, r3
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	2012      	movs	r0, #18
 800ac42:	183b      	adds	r3, r7, r0
 800ac44:	4915      	ldr	r1, [pc, #84]	@ (800ac9c <USB_EPClearStall+0x160>)
 800ac46:	400a      	ands	r2, r1
 800ac48:	801a      	strh	r2, [r3, #0]
 800ac4a:	183b      	adds	r3, r7, r0
 800ac4c:	183a      	adds	r2, r7, r0
 800ac4e:	8812      	ldrh	r2, [r2, #0]
 800ac50:	2180      	movs	r1, #128	@ 0x80
 800ac52:	0149      	lsls	r1, r1, #5
 800ac54:	404a      	eors	r2, r1
 800ac56:	801a      	strh	r2, [r3, #0]
 800ac58:	183b      	adds	r3, r7, r0
 800ac5a:	183a      	adds	r2, r7, r0
 800ac5c:	8812      	ldrh	r2, [r2, #0]
 800ac5e:	2180      	movs	r1, #128	@ 0x80
 800ac60:	0189      	lsls	r1, r1, #6
 800ac62:	404a      	eors	r2, r1
 800ac64:	801a      	strh	r2, [r3, #0]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	18d3      	adds	r3, r2, r3
 800ac70:	183a      	adds	r2, r7, r0
 800ac72:	8812      	ldrh	r2, [r2, #0]
 800ac74:	4907      	ldr	r1, [pc, #28]	@ (800ac94 <USB_EPClearStall+0x158>)
 800ac76:	430a      	orrs	r2, r1
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	0018      	movs	r0, r3
 800ac80:	46bd      	mov	sp, r7
 800ac82:	b006      	add	sp, #24
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	46c0      	nop			@ (mov r8, r8)
 800ac88:	ffff8f8f 	.word	0xffff8f8f
 800ac8c:	ffff80c0 	.word	0xffff80c0
 800ac90:	ffff8fbf 	.word	0xffff8fbf
 800ac94:	ffff8080 	.word	0xffff8080
 800ac98:	ffffc080 	.word	0xffffc080
 800ac9c:	ffffbf8f 	.word	0xffffbf8f

0800aca0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	000a      	movs	r2, r1
 800acaa:	1cfb      	adds	r3, r7, #3
 800acac:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800acae:	1cfb      	adds	r3, r7, #3
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d103      	bne.n	800acbe <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	224c      	movs	r2, #76	@ 0x4c
 800acba:	2180      	movs	r1, #128	@ 0x80
 800acbc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	0018      	movs	r0, r3
 800acc2:	46bd      	mov	sp, r7
 800acc4:	b002      	add	sp, #8
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2258      	movs	r2, #88	@ 0x58
 800acd4:	5a9b      	ldrh	r3, [r3, r2]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	4a05      	ldr	r2, [pc, #20]	@ (800acf0 <USB_DevConnect+0x28>)
 800acda:	4313      	orrs	r3, r2
 800acdc:	b299      	uxth	r1, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2258      	movs	r2, #88	@ 0x58
 800ace2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	0018      	movs	r0, r3
 800ace8:	46bd      	mov	sp, r7
 800acea:	b002      	add	sp, #8
 800acec:	bd80      	pop	{r7, pc}
 800acee:	46c0      	nop			@ (mov r8, r8)
 800acf0:	ffff8000 	.word	0xffff8000

0800acf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2244      	movs	r2, #68	@ 0x44
 800ad00:	5a9b      	ldrh	r3, [r3, r2]
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ad06:	68fb      	ldr	r3, [r7, #12]
}
 800ad08:	0018      	movs	r0, r3
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	b004      	add	sp, #16
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08a      	sub	sp, #40	@ 0x28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	0019      	movs	r1, r3
 800ad1c:	1dbb      	adds	r3, r7, #6
 800ad1e:	801a      	strh	r2, [r3, #0]
 800ad20:	1d3b      	adds	r3, r7, #4
 800ad22:	1c0a      	adds	r2, r1, #0
 800ad24:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad26:	1d3b      	adds	r3, r7, #4
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	085b      	lsrs	r3, r3, #1
 800ad2e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad38:	1dbb      	adds	r3, r7, #6
 800ad3a:	881a      	ldrh	r2, [r3, #0]
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	18d3      	adds	r3, r2, r3
 800ad40:	2280      	movs	r2, #128	@ 0x80
 800ad42:	00d2      	lsls	r2, r2, #3
 800ad44:	4694      	mov	ip, r2
 800ad46:	4463      	add	r3, ip
 800ad48:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad4e:	e021      	b.n	800ad94 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	781a      	ldrb	r2, [r3, #0]
 800ad54:	2112      	movs	r1, #18
 800ad56:	187b      	adds	r3, r7, r1
 800ad58:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	b21b      	sxth	r3, r3
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	b21a      	sxth	r2, r3
 800ad66:	187b      	adds	r3, r7, r1
 800ad68:	2000      	movs	r0, #0
 800ad6a:	5e1b      	ldrsh	r3, [r3, r0]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	b21a      	sxth	r2, r3
 800ad70:	187b      	adds	r3, r7, r1
 800ad72:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800ad74:	6a3b      	ldr	r3, [r7, #32]
 800ad76:	187a      	adds	r2, r7, r1
 800ad78:	8812      	ldrh	r2, [r2, #0]
 800ad7a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	3302      	adds	r3, #2
 800ad80:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	3301      	adds	r3, #1
 800ad86:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad90:	3b01      	subs	r3, #1
 800ad92:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1da      	bne.n	800ad50 <USB_WritePMA+0x40>
  }
}
 800ad9a:	46c0      	nop			@ (mov r8, r8)
 800ad9c:	46c0      	nop			@ (mov r8, r8)
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	b00a      	add	sp, #40	@ 0x28
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b08a      	sub	sp, #40	@ 0x28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	0019      	movs	r1, r3
 800adb0:	1dbb      	adds	r3, r7, #6
 800adb2:	801a      	strh	r2, [r3, #0]
 800adb4:	1d3b      	adds	r3, r7, #4
 800adb6:	1c0a      	adds	r2, r1, #0
 800adb8:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800adba:	1d3b      	adds	r3, r7, #4
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	085b      	lsrs	r3, r3, #1
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800adcc:	1dbb      	adds	r3, r7, #6
 800adce:	881a      	ldrh	r2, [r3, #0]
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	18d3      	adds	r3, r2, r3
 800add4:	2280      	movs	r2, #128	@ 0x80
 800add6:	00d2      	lsls	r2, r2, #3
 800add8:	4694      	mov	ip, r2
 800adda:	4463      	add	r3, ip
 800addc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ade2:	e018      	b.n	800ae16 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	b29b      	uxth	r3, r3
 800adea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	3302      	adds	r3, #2
 800adf0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	3301      	adds	r3, #1
 800adfe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	0a1b      	lsrs	r3, r3, #8
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ae10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae12:	3b01      	subs	r3, #1
 800ae14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e3      	bne.n	800ade4 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ae1c:	1d3b      	adds	r3, r7, #4
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	2201      	movs	r2, #1
 800ae22:	4013      	ands	r3, r2
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d007      	beq.n	800ae3a <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800ae2a:	6a3b      	ldr	r3, [r7, #32]
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	701a      	strb	r2, [r3, #0]
  }
}
 800ae3a:	46c0      	nop			@ (mov r8, r8)
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	b00a      	add	sp, #40	@ 0x28
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800ae42:	b590      	push	{r4, r7, lr}
 800ae44:	b085      	sub	sp, #20
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	000a      	movs	r2, r1
 800ae4c:	1cfb      	adds	r3, r7, #3
 800ae4e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800ae50:	240f      	movs	r4, #15
 800ae52:	193b      	adds	r3, r7, r4
 800ae54:	2200      	movs	r2, #0
 800ae56:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	2203      	movs	r2, #3
 800ae5e:	2181      	movs	r1, #129	@ 0x81
 800ae60:	f001 ff75 	bl	800cd4e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	2203      	movs	r2, #3
 800ae70:	2101      	movs	r1, #1
 800ae72:	f001 ff6c 	bl	800cd4e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	23b6      	movs	r3, #182	@ 0xb6
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800ae80:	2054      	movs	r0, #84	@ 0x54
 800ae82:	f002 f8e5 	bl	800d050 <USBD_static_malloc>
 800ae86:	0001      	movs	r1, r0
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	23ae      	movs	r3, #174	@ 0xae
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	23ae      	movs	r3, #174	@ 0xae
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	58d3      	ldr	r3, [r2, r3]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <USBD_CUSTOM_HID_Init+0x62>
  {
    ret = 1U;
 800ae9c:	193b      	adds	r3, r7, r4
 800ae9e:	2201      	movs	r2, #1
 800aea0:	701a      	strb	r2, [r3, #0]
 800aea2:	e014      	b.n	800aece <USBD_CUSTOM_HID_Init+0x8c>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	23ae      	movs	r3, #174	@ 0xae
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	58d3      	ldr	r3, [r2, r3]
 800aeac:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	2250      	movs	r2, #80	@ 0x50
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	5499      	strb	r1, [r3, r2]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	23af      	movs	r3, #175	@ 0xaf
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	58d3      	ldr	r3, [r2, r3]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	2340      	movs	r3, #64	@ 0x40
 800aec8:	2101      	movs	r1, #1
 800aeca:	f002 f88a 	bl	800cfe2 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800aece:	230f      	movs	r3, #15
 800aed0:	18fb      	adds	r3, r7, r3
 800aed2:	781b      	ldrb	r3, [r3, #0]
}
 800aed4:	0018      	movs	r0, r3
 800aed6:	46bd      	mov	sp, r7
 800aed8:	b005      	add	sp, #20
 800aeda:	bd90      	pop	{r4, r7, pc}

0800aedc <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	000a      	movs	r2, r1
 800aee6:	1cfb      	adds	r3, r7, #3
 800aee8:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2181      	movs	r1, #129	@ 0x81
 800aeee:	0018      	movs	r0, r3
 800aef0:	f001 ff64 	bl	800cdbc <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2101      	movs	r1, #1
 800aefe:	0018      	movs	r0, r3
 800af00:	f001 ff5c 	bl	800cdbc <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	23b6      	movs	r3, #182	@ 0xb6
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	2100      	movs	r1, #0
 800af0c:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	23ae      	movs	r3, #174	@ 0xae
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	58d3      	ldr	r3, [r2, r3]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d011      	beq.n	800af3e <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	23af      	movs	r3, #175	@ 0xaf
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	58d3      	ldr	r3, [r2, r3]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	23ae      	movs	r3, #174	@ 0xae
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	58d3      	ldr	r3, [r2, r3]
 800af2e:	0018      	movs	r0, r3
 800af30:	f002 f89a 	bl	800d068 <USBD_static_free>
    pdev->pClassData = NULL;
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	23ae      	movs	r3, #174	@ 0xae
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	2100      	movs	r1, #0
 800af3c:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	0018      	movs	r0, r3
 800af42:	46bd      	mov	sp, r7
 800af44:	b002      	add	sp, #8
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	23ae      	movs	r3, #174	@ 0xae
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	58d3      	ldr	r3, [r2, r3]
 800af5a:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800af5c:	231e      	movs	r3, #30
 800af5e:	18fb      	adds	r3, r7, r3
 800af60:	2200      	movs	r2, #0
 800af62:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 800af64:	2300      	movs	r3, #0
 800af66:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800af68:	230e      	movs	r3, #14
 800af6a:	18fb      	adds	r3, r7, r3
 800af6c:	2200      	movs	r2, #0
 800af6e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800af70:	2317      	movs	r3, #23
 800af72:	18fb      	adds	r3, r7, r3
 800af74:	2200      	movs	r2, #0
 800af76:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	001a      	movs	r2, r3
 800af7e:	2360      	movs	r3, #96	@ 0x60
 800af80:	4013      	ands	r3, r2
 800af82:	d044      	beq.n	800b00e <USBD_CUSTOM_HID_Setup+0xc6>
 800af84:	2b20      	cmp	r3, #32
 800af86:	d000      	beq.n	800af8a <USBD_CUSTOM_HID_Setup+0x42>
 800af88:	e0d8      	b.n	800b13c <USBD_CUSTOM_HID_Setup+0x1f4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	2b0b      	cmp	r3, #11
 800af90:	d831      	bhi.n	800aff6 <USBD_CUSTOM_HID_Setup+0xae>
 800af92:	009a      	lsls	r2, r3, #2
 800af94:	4b72      	ldr	r3, [pc, #456]	@ (800b160 <USBD_CUSTOM_HID_Setup+0x218>)
 800af96:	18d3      	adds	r3, r2, r3
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	885b      	ldrh	r3, [r3, #2]
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	001a      	movs	r2, r3
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 800afa8:	e030      	b.n	800b00c <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	3340      	adds	r3, #64	@ 0x40
 800afae:	0019      	movs	r1, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	0018      	movs	r0, r3
 800afb6:	f001 fb24 	bl	800c602 <USBD_CtlSendData>
          break;
 800afba:	e027      	b.n	800b00c <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	885b      	ldrh	r3, [r3, #2]
 800afc0:	0a1b      	lsrs	r3, r3, #8
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	001a      	movs	r2, r3
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 800afcc:	e01e      	b.n	800b00c <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	3344      	adds	r3, #68	@ 0x44
 800afd2:	0019      	movs	r1, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	0018      	movs	r0, r3
 800afda:	f001 fb12 	bl	800c602 <USBD_CtlSendData>
          break;
 800afde:	e015      	b.n	800b00c <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	2201      	movs	r2, #1
 800afe4:	64da      	str	r2, [r3, #76]	@ 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800afe6:	6939      	ldr	r1, [r7, #16]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	88da      	ldrh	r2, [r3, #6]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	0018      	movs	r0, r3
 800aff0:	f001 fb3a 	bl	800c668 <USBD_CtlPrepareRx>
          break;
 800aff4:	e00a      	b.n	800b00c <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	0011      	movs	r1, r2
 800affc:	0018      	movs	r0, r3
 800affe:	f001 fa82 	bl	800c506 <USBD_CtlError>
          ret = USBD_FAIL;
 800b002:	2317      	movs	r3, #23
 800b004:	18fb      	adds	r3, r7, r3
 800b006:	2202      	movs	r2, #2
 800b008:	701a      	strb	r2, [r3, #0]
          break;
 800b00a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800b00c:	e0a1      	b.n	800b152 <USBD_CUSTOM_HID_Setup+0x20a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	785b      	ldrb	r3, [r3, #1]
 800b012:	2b0b      	cmp	r3, #11
 800b014:	d100      	bne.n	800b018 <USBD_CUSTOM_HID_Setup+0xd0>
 800b016:	e06d      	b.n	800b0f4 <USBD_CUSTOM_HID_Setup+0x1ac>
 800b018:	dd00      	ble.n	800b01c <USBD_CUSTOM_HID_Setup+0xd4>
 800b01a:	e083      	b.n	800b124 <USBD_CUSTOM_HID_Setup+0x1dc>
 800b01c:	2b0a      	cmp	r3, #10
 800b01e:	d04f      	beq.n	800b0c0 <USBD_CUSTOM_HID_Setup+0x178>
 800b020:	dd00      	ble.n	800b024 <USBD_CUSTOM_HID_Setup+0xdc>
 800b022:	e07f      	b.n	800b124 <USBD_CUSTOM_HID_Setup+0x1dc>
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <USBD_CUSTOM_HID_Setup+0xe6>
 800b028:	2b06      	cmp	r3, #6
 800b02a:	d019      	beq.n	800b060 <USBD_CUSTOM_HID_Setup+0x118>
 800b02c:	e07a      	b.n	800b124 <USBD_CUSTOM_HID_Setup+0x1dc>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	23a7      	movs	r3, #167	@ 0xa7
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	5cd3      	ldrb	r3, [r2, r3]
 800b036:	2b03      	cmp	r3, #3
 800b038:	d107      	bne.n	800b04a <USBD_CUSTOM_HID_Setup+0x102>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b03a:	230e      	movs	r3, #14
 800b03c:	18f9      	adds	r1, r7, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2202      	movs	r2, #2
 800b042:	0018      	movs	r0, r3
 800b044:	f001 fadd 	bl	800c602 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b048:	e077      	b.n	800b13a <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	0011      	movs	r1, r2
 800b050:	0018      	movs	r0, r3
 800b052:	f001 fa58 	bl	800c506 <USBD_CtlError>
            ret = USBD_FAIL;
 800b056:	2317      	movs	r3, #23
 800b058:	18fb      	adds	r3, r7, r3
 800b05a:	2202      	movs	r2, #2
 800b05c:	701a      	strb	r2, [r3, #0]
          break;
 800b05e:	e06c      	b.n	800b13a <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	885b      	ldrh	r3, [r3, #2]
 800b064:	0a1b      	lsrs	r3, r3, #8
 800b066:	b29b      	uxth	r3, r3
 800b068:	2b22      	cmp	r3, #34	@ 0x22
 800b06a:	d10f      	bne.n	800b08c <USBD_CUSTOM_HID_Setup+0x144>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	88db      	ldrh	r3, [r3, #6]
 800b070:	221e      	movs	r2, #30
 800b072:	18ba      	adds	r2, r7, r2
 800b074:	b299      	uxth	r1, r3
 800b076:	2950      	cmp	r1, #80	@ 0x50
 800b078:	d900      	bls.n	800b07c <USBD_CUSTOM_HID_Setup+0x134>
 800b07a:	2350      	movs	r3, #80	@ 0x50
 800b07c:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	23af      	movs	r3, #175	@ 0xaf
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	58d3      	ldr	r3, [r2, r3]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	61bb      	str	r3, [r7, #24]
 800b08a:	e010      	b.n	800b0ae <USBD_CUSTOM_HID_Setup+0x166>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	885b      	ldrh	r3, [r3, #2]
 800b090:	0a1b      	lsrs	r3, r3, #8
 800b092:	b29b      	uxth	r3, r3
 800b094:	2b21      	cmp	r3, #33	@ 0x21
 800b096:	d10a      	bne.n	800b0ae <USBD_CUSTOM_HID_Setup+0x166>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800b098:	4b32      	ldr	r3, [pc, #200]	@ (800b164 <USBD_CUSTOM_HID_Setup+0x21c>)
 800b09a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	88db      	ldrh	r3, [r3, #6]
 800b0a0:	221e      	movs	r2, #30
 800b0a2:	18ba      	adds	r2, r7, r2
 800b0a4:	b299      	uxth	r1, r3
 800b0a6:	2909      	cmp	r1, #9
 800b0a8:	d900      	bls.n	800b0ac <USBD_CUSTOM_HID_Setup+0x164>
 800b0aa:	2309      	movs	r3, #9
 800b0ac:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800b0ae:	231e      	movs	r3, #30
 800b0b0:	18fb      	adds	r3, r7, r3
 800b0b2:	881a      	ldrh	r2, [r3, #0]
 800b0b4:	69b9      	ldr	r1, [r7, #24]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	0018      	movs	r0, r3
 800b0ba:	f001 faa2 	bl	800c602 <USBD_CtlSendData>
          break;
 800b0be:	e03c      	b.n	800b13a <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	23a7      	movs	r3, #167	@ 0xa7
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	5cd3      	ldrb	r3, [r2, r3]
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	d108      	bne.n	800b0de <USBD_CUSTOM_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	3348      	adds	r3, #72	@ 0x48
 800b0d0:	0019      	movs	r1, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	0018      	movs	r0, r3
 800b0d8:	f001 fa93 	bl	800c602 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0dc:	e02d      	b.n	800b13a <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	0011      	movs	r1, r2
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	f001 fa0e 	bl	800c506 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0ea:	2317      	movs	r3, #23
 800b0ec:	18fb      	adds	r3, r7, r3
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	701a      	strb	r2, [r3, #0]
          break;
 800b0f2:	e022      	b.n	800b13a <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	23a7      	movs	r3, #167	@ 0xa7
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	5cd3      	ldrb	r3, [r2, r3]
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d106      	bne.n	800b10e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	885b      	ldrh	r3, [r3, #2]
 800b104:	b2db      	uxtb	r3, r3
 800b106:	001a      	movs	r2, r3
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b10c:	e015      	b.n	800b13a <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	0011      	movs	r1, r2
 800b114:	0018      	movs	r0, r3
 800b116:	f001 f9f6 	bl	800c506 <USBD_CtlError>
            ret = USBD_FAIL;
 800b11a:	2317      	movs	r3, #23
 800b11c:	18fb      	adds	r3, r7, r3
 800b11e:	2202      	movs	r2, #2
 800b120:	701a      	strb	r2, [r3, #0]
          break;
 800b122:	e00a      	b.n	800b13a <USBD_CUSTOM_HID_Setup+0x1f2>

        default:
          USBD_CtlError(pdev, req);
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	0011      	movs	r1, r2
 800b12a:	0018      	movs	r0, r3
 800b12c:	f001 f9eb 	bl	800c506 <USBD_CtlError>
          ret = USBD_FAIL;
 800b130:	2317      	movs	r3, #23
 800b132:	18fb      	adds	r3, r7, r3
 800b134:	2202      	movs	r2, #2
 800b136:	701a      	strb	r2, [r3, #0]
          break;
 800b138:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800b13a:	e00a      	b.n	800b152 <USBD_CUSTOM_HID_Setup+0x20a>

    default:
      USBD_CtlError(pdev, req);
 800b13c:	683a      	ldr	r2, [r7, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	0011      	movs	r1, r2
 800b142:	0018      	movs	r0, r3
 800b144:	f001 f9df 	bl	800c506 <USBD_CtlError>
      ret = USBD_FAIL;
 800b148:	2317      	movs	r3, #23
 800b14a:	18fb      	adds	r3, r7, r3
 800b14c:	2202      	movs	r2, #2
 800b14e:	701a      	strb	r2, [r3, #0]
      break;
 800b150:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 800b152:	2317      	movs	r3, #23
 800b154:	18fb      	adds	r3, r7, r3
 800b156:	781b      	ldrb	r3, [r3, #0]
}
 800b158:	0018      	movs	r0, r3
 800b15a:	46bd      	mov	sp, r7
 800b15c:	b008      	add	sp, #32
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	08010e00 	.word	0x08010e00
 800b164:	200000c8 	.word	0x200000c8

0800b168 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	1dbb      	adds	r3, r7, #6
 800b174:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	23ae      	movs	r3, #174	@ 0xae
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	58d3      	ldr	r3, [r2, r3]
 800b17e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	23a7      	movs	r3, #167	@ 0xa7
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	5cd3      	ldrb	r3, [r2, r3]
 800b188:	2b03      	cmp	r3, #3
 800b18a:	d112      	bne.n	800b1b2 <USBD_CUSTOM_HID_SendReport+0x4a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	2250      	movs	r2, #80	@ 0x50
 800b190:	5c9b      	ldrb	r3, [r3, r2]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10b      	bne.n	800b1ae <USBD_CUSTOM_HID_SendReport+0x46>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2250      	movs	r2, #80	@ 0x50
 800b19a:	2101      	movs	r1, #1
 800b19c:	5499      	strb	r1, [r3, r2]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800b19e:	1dbb      	adds	r3, r7, #6
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	2181      	movs	r1, #129	@ 0x81
 800b1a8:	f001 fee4 	bl	800cf74 <USBD_LL_Transmit>
 800b1ac:	e001      	b.n	800b1b2 <USBD_CUSTOM_HID_SendReport+0x4a>
    }
    else
    {
      return USBD_BUSY;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e000      	b.n	800b1b4 <USBD_CUSTOM_HID_SendReport+0x4c>
    }
  }
  return USBD_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	0018      	movs	r0, r3
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	b006      	add	sp, #24
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2229      	movs	r2, #41	@ 0x29
 800b1c8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800b1ca:	4b02      	ldr	r3, [pc, #8]	@ (800b1d4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	b002      	add	sp, #8
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	20000044 	.word	0x20000044

0800b1d8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2229      	movs	r2, #41	@ 0x29
 800b1e4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800b1e6:	4b02      	ldr	r3, [pc, #8]	@ (800b1f0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 800b1e8:	0018      	movs	r0, r3
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	b002      	add	sp, #8
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	20000070 	.word	0x20000070

0800b1f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2229      	movs	r2, #41	@ 0x29
 800b200:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800b202:	4b02      	ldr	r3, [pc, #8]	@ (800b20c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 800b204:	0018      	movs	r0, r3
 800b206:	46bd      	mov	sp, r7
 800b208:	b002      	add	sp, #8
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	2000009c 	.word	0x2000009c

0800b210 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	000a      	movs	r2, r1
 800b21a:	1cfb      	adds	r3, r7, #3
 800b21c:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	23ae      	movs	r3, #174	@ 0xae
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	58d3      	ldr	r3, [r2, r3]
 800b226:	2250      	movs	r2, #80	@ 0x50
 800b228:	2100      	movs	r1, #0
 800b22a:	5499      	strb	r1, [r3, r2]

  return USBD_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	0018      	movs	r0, r3
 800b230:	46bd      	mov	sp, r7
 800b232:	b002      	add	sp, #8
 800b234:	bd80      	pop	{r7, pc}

0800b236 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b084      	sub	sp, #16
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	000a      	movs	r2, r1
 800b240:	1cfb      	adds	r3, r7, #3
 800b242:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	23ae      	movs	r3, #174	@ 0xae
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	58d3      	ldr	r3, [r2, r3]
 800b24c:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	23af      	movs	r3, #175	@ 0xaf
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	58d3      	ldr	r3, [r2, r3]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	7810      	ldrb	r0, [r2, #0]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	7852      	ldrb	r2, [r2, #1]
 800b260:	0011      	movs	r1, r2
 800b262:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	2340      	movs	r3, #64	@ 0x40
 800b26a:	2101      	movs	r1, #1
 800b26c:	f001 feb9 	bl	800cfe2 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	0018      	movs	r0, r3
 800b274:	46bd      	mov	sp, r7
 800b276:	b004      	add	sp, #16
 800b278:	bd80      	pop	{r7, pc}

0800b27a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	23ae      	movs	r3, #174	@ 0xae
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	58d3      	ldr	r3, [r2, r3]
 800b28a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b290:	2b01      	cmp	r3, #1
 800b292:	d10d      	bne.n	800b2b0 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	23af      	movs	r3, #175	@ 0xaf
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	58d3      	ldr	r3, [r2, r3]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	7810      	ldrb	r0, [r2, #0]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	7852      	ldrb	r2, [r2, #1]
 800b2a6:	0011      	movs	r1, r2
 800b2a8:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	0018      	movs	r0, r3
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	b004      	add	sp, #16
 800b2b8:	bd80      	pop	{r7, pc}
	...

0800b2bc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	220a      	movs	r2, #10
 800b2c8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800b2ca:	4b02      	ldr	r3, [pc, #8]	@ (800b2d4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 800b2cc:	0018      	movs	r0, r3
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	b002      	add	sp, #8
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	200000d4 	.word	0x200000d4

0800b2d8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b2e2:	200f      	movs	r0, #15
 800b2e4:	183b      	adds	r3, r7, r0
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d007      	beq.n	800b300 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	23af      	movs	r3, #175	@ 0xaf
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800b2fa:	183b      	adds	r3, r7, r0
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b300:	230f      	movs	r3, #15
 800b302:	18fb      	adds	r3, r7, r3
 800b304:	781b      	ldrb	r3, [r3, #0]
}
 800b306:	0018      	movs	r0, r3
 800b308:	46bd      	mov	sp, r7
 800b30a:	b004      	add	sp, #16
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	1dfb      	adds	r3, r7, #7
 800b31a:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b322:	2302      	movs	r3, #2
 800b324:	e020      	b.n	800b368 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	23ad      	movs	r3, #173	@ 0xad
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	58d3      	ldr	r3, [r2, r3]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	23ad      	movs	r3, #173	@ 0xad
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	2100      	movs	r1, #0
 800b33a:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d004      	beq.n	800b34c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	23ac      	movs	r3, #172	@ 0xac
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	68b9      	ldr	r1, [r7, #8]
 800b34a:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	23a7      	movs	r3, #167	@ 0xa7
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	2101      	movs	r1, #1
 800b354:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	1dfa      	adds	r2, r7, #7
 800b35a:	7812      	ldrb	r2, [r2, #0]
 800b35c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	0018      	movs	r0, r3
 800b362:	f001 fc77 	bl	800cc54 <USBD_LL_Init>

  return USBD_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	0018      	movs	r0, r3
 800b36a:	46bd      	mov	sp, r7
 800b36c:	b004      	add	sp, #16
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b37a:	200f      	movs	r0, #15
 800b37c:	183b      	adds	r3, r7, r0
 800b37e:	2200      	movs	r2, #0
 800b380:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d008      	beq.n	800b39a <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	23ad      	movs	r3, #173	@ 0xad
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	6839      	ldr	r1, [r7, #0]
 800b390:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b392:	183b      	adds	r3, r7, r0
 800b394:	2200      	movs	r2, #0
 800b396:	701a      	strb	r2, [r3, #0]
 800b398:	e003      	b.n	800b3a2 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b39a:	230f      	movs	r3, #15
 800b39c:	18fb      	adds	r3, r7, r3
 800b39e:	2202      	movs	r2, #2
 800b3a0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b3a2:	230f      	movs	r3, #15
 800b3a4:	18fb      	adds	r3, r7, r3
 800b3a6:	781b      	ldrb	r3, [r3, #0]
}
 800b3a8:	0018      	movs	r0, r3
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	b004      	add	sp, #16
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	0018      	movs	r0, r3
 800b3bc:	f001 fca2 	bl	800cd04 <USBD_LL_Start>

  return USBD_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	b002      	add	sp, #8
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	b002      	add	sp, #8
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b3dc:	b590      	push	{r4, r7, lr}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	000a      	movs	r2, r1
 800b3e6:	1cfb      	adds	r3, r7, #3
 800b3e8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b3ea:	240f      	movs	r4, #15
 800b3ec:	193b      	adds	r3, r7, r4
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	23ad      	movs	r3, #173	@ 0xad
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	58d3      	ldr	r3, [r2, r3]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00e      	beq.n	800b41c <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	23ad      	movs	r3, #173	@ 0xad
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	58d3      	ldr	r3, [r2, r3]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	1cfa      	adds	r2, r7, #3
 800b40a:	7811      	ldrb	r1, [r2, #0]
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	0010      	movs	r0, r2
 800b410:	4798      	blx	r3
 800b412:	1e03      	subs	r3, r0, #0
 800b414:	d102      	bne.n	800b41c <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b416:	193b      	adds	r3, r7, r4
 800b418:	2200      	movs	r2, #0
 800b41a:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b41c:	230f      	movs	r3, #15
 800b41e:	18fb      	adds	r3, r7, r3
 800b420:	781b      	ldrb	r3, [r3, #0]
}
 800b422:	0018      	movs	r0, r3
 800b424:	46bd      	mov	sp, r7
 800b426:	b005      	add	sp, #20
 800b428:	bd90      	pop	{r4, r7, pc}

0800b42a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b082      	sub	sp, #8
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	000a      	movs	r2, r1
 800b434:	1cfb      	adds	r3, r7, #3
 800b436:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	23ad      	movs	r3, #173	@ 0xad
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	58d3      	ldr	r3, [r2, r3]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	1cfa      	adds	r2, r7, #3
 800b444:	7811      	ldrb	r1, [r2, #0]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	0010      	movs	r0, r2
 800b44a:	4798      	blx	r3

  return USBD_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	0018      	movs	r0, r3
 800b450:	46bd      	mov	sp, r7
 800b452:	b002      	add	sp, #8
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	22aa      	movs	r2, #170	@ 0xaa
 800b466:	0092      	lsls	r2, r2, #2
 800b468:	4694      	mov	ip, r2
 800b46a:	4463      	add	r3, ip
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	0011      	movs	r1, r2
 800b470:	0018      	movs	r0, r3
 800b472:	f001 f810 	bl	800c496 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	23a5      	movs	r3, #165	@ 0xa5
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	2101      	movs	r1, #1
 800b47e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a23      	ldr	r2, [pc, #140]	@ (800b510 <USBD_LL_SetupStage+0xb8>)
 800b484:	5a9b      	ldrh	r3, [r3, r2]
 800b486:	0019      	movs	r1, r3
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	23a6      	movs	r3, #166	@ 0xa6
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	23aa      	movs	r3, #170	@ 0xaa
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	5cd3      	ldrb	r3, [r2, r3]
 800b498:	001a      	movs	r2, r3
 800b49a:	231f      	movs	r3, #31
 800b49c:	4013      	ands	r3, r2
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d019      	beq.n	800b4d6 <USBD_LL_SetupStage+0x7e>
 800b4a2:	d822      	bhi.n	800b4ea <USBD_LL_SetupStage+0x92>
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <USBD_LL_SetupStage+0x56>
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d00a      	beq.n	800b4c2 <USBD_LL_SetupStage+0x6a>
 800b4ac:	e01d      	b.n	800b4ea <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	22aa      	movs	r2, #170	@ 0xaa
 800b4b2:	0092      	lsls	r2, r2, #2
 800b4b4:	189a      	adds	r2, r3, r2
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	0011      	movs	r1, r2
 800b4ba:	0018      	movs	r0, r3
 800b4bc:	f000 fa10 	bl	800b8e0 <USBD_StdDevReq>
      break;
 800b4c0:	e020      	b.n	800b504 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	22aa      	movs	r2, #170	@ 0xaa
 800b4c6:	0092      	lsls	r2, r2, #2
 800b4c8:	189a      	adds	r2, r3, r2
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	0011      	movs	r1, r2
 800b4ce:	0018      	movs	r0, r3
 800b4d0:	f000 fa78 	bl	800b9c4 <USBD_StdItfReq>
      break;
 800b4d4:	e016      	b.n	800b504 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	22aa      	movs	r2, #170	@ 0xaa
 800b4da:	0092      	lsls	r2, r2, #2
 800b4dc:	189a      	adds	r2, r3, r2
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	0011      	movs	r1, r2
 800b4e2:	0018      	movs	r0, r3
 800b4e4:	f000 fac5 	bl	800ba72 <USBD_StdEPReq>
      break;
 800b4e8:	e00c      	b.n	800b504 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	23aa      	movs	r3, #170	@ 0xaa
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	5cd3      	ldrb	r3, [r2, r3]
 800b4f2:	227f      	movs	r2, #127	@ 0x7f
 800b4f4:	4393      	bics	r3, r2
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	0011      	movs	r1, r2
 800b4fc:	0018      	movs	r0, r3
 800b4fe:	f001 fc88 	bl	800ce12 <USBD_LL_StallEP>
      break;
 800b502:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	0018      	movs	r0, r3
 800b508:	46bd      	mov	sp, r7
 800b50a:	b002      	add	sp, #8
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	46c0      	nop			@ (mov r8, r8)
 800b510:	000002ae 	.word	0x000002ae

0800b514 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	607a      	str	r2, [r7, #4]
 800b51e:	200b      	movs	r0, #11
 800b520:	183b      	adds	r3, r7, r0
 800b522:	1c0a      	adds	r2, r1, #0
 800b524:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b526:	183b      	adds	r3, r7, r0
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d154      	bne.n	800b5d8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3355      	adds	r3, #85	@ 0x55
 800b532:	33ff      	adds	r3, #255	@ 0xff
 800b534:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	23a5      	movs	r3, #165	@ 0xa5
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	58d3      	ldr	r3, [r2, r3]
 800b53e:	2b03      	cmp	r3, #3
 800b540:	d139      	bne.n	800b5b6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	68da      	ldr	r2, [r3, #12]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d919      	bls.n	800b582 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	68da      	ldr	r2, [r3, #12]
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	1ad2      	subs	r2, r2, r3
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	68da      	ldr	r2, [r3, #12]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b564:	429a      	cmp	r2, r3
 800b566:	d203      	bcs.n	800b570 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	e002      	b.n	800b576 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b574:	b29b      	uxth	r3, r3
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	001a      	movs	r2, r3
 800b57c:	f001 f898 	bl	800c6b0 <USBD_CtlContinueRx>
 800b580:	e045      	b.n	800b60e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	23ad      	movs	r3, #173	@ 0xad
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	58d3      	ldr	r3, [r2, r3]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00d      	beq.n	800b5ac <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	23a7      	movs	r3, #167	@ 0xa7
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d107      	bne.n	800b5ac <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	23ad      	movs	r3, #173	@ 0xad
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	58d3      	ldr	r3, [r2, r3]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	0010      	movs	r0, r2
 800b5aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	f001 f891 	bl	800c6d6 <USBD_CtlSendStatus>
 800b5b4:	e02b      	b.n	800b60e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	23a5      	movs	r3, #165	@ 0xa5
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	58d3      	ldr	r3, [r2, r3]
 800b5be:	2b05      	cmp	r3, #5
 800b5c0:	d125      	bne.n	800b60e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	23a5      	movs	r3, #165	@ 0xa5
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	0018      	movs	r0, r3
 800b5d2:	f001 fc1e 	bl	800ce12 <USBD_LL_StallEP>
 800b5d6:	e01a      	b.n	800b60e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	23ad      	movs	r3, #173	@ 0xad
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	58d3      	ldr	r3, [r2, r3]
 800b5e0:	699b      	ldr	r3, [r3, #24]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d011      	beq.n	800b60a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	23a7      	movs	r3, #167	@ 0xa7
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d10b      	bne.n	800b60a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	23ad      	movs	r3, #173	@ 0xad
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	58d3      	ldr	r3, [r2, r3]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	220b      	movs	r2, #11
 800b5fe:	18ba      	adds	r2, r7, r2
 800b600:	7811      	ldrb	r1, [r2, #0]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	0010      	movs	r0, r2
 800b606:	4798      	blx	r3
 800b608:	e001      	b.n	800b60e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b60a:	2302      	movs	r3, #2
 800b60c:	e000      	b.n	800b610 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	0018      	movs	r0, r3
 800b612:	46bd      	mov	sp, r7
 800b614:	b006      	add	sp, #24
 800b616:	bd80      	pop	{r7, pc}

0800b618 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	607a      	str	r2, [r7, #4]
 800b622:	200b      	movs	r0, #11
 800b624:	183b      	adds	r3, r7, r0
 800b626:	1c0a      	adds	r2, r1, #0
 800b628:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b62a:	183b      	adds	r3, r7, r0
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d000      	beq.n	800b634 <USBD_LL_DataInStage+0x1c>
 800b632:	e08e      	b.n	800b752 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3314      	adds	r3, #20
 800b638:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	23a5      	movs	r3, #165	@ 0xa5
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	58d3      	ldr	r3, [r2, r3]
 800b642:	2b02      	cmp	r3, #2
 800b644:	d164      	bne.n	800b710 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	68da      	ldr	r2, [r3, #12]
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d915      	bls.n	800b67e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	68da      	ldr	r2, [r3, #12]
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	1ad2      	subs	r2, r2, r3
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	b29a      	uxth	r2, r3
 800b666:	6879      	ldr	r1, [r7, #4]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	0018      	movs	r0, r3
 800b66c:	f000 ffe9 	bl	800c642 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	2300      	movs	r3, #0
 800b674:	2200      	movs	r2, #0
 800b676:	2100      	movs	r1, #0
 800b678:	f001 fcb3 	bl	800cfe2 <USBD_LL_PrepareReceive>
 800b67c:	e059      	b.n	800b732 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	689a      	ldr	r2, [r3, #8]
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	0019      	movs	r1, r3
 800b688:	0010      	movs	r0, r2
 800b68a:	f7f4 fddf 	bl	800024c <__aeabi_uidivmod>
 800b68e:	1e0b      	subs	r3, r1, #0
 800b690:	d11f      	bne.n	800b6d2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	689a      	ldr	r2, [r3, #8]
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d319      	bcc.n	800b6d2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	689a      	ldr	r2, [r3, #8]
 800b6a2:	68f9      	ldr	r1, [r7, #12]
 800b6a4:	23a6      	movs	r3, #166	@ 0xa6
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d211      	bcs.n	800b6d2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	0018      	movs	r0, r3
 800b6b6:	f000 ffc4 	bl	800c642 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	23a6      	movs	r3, #166	@ 0xa6
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	f001 fc89 	bl	800cfe2 <USBD_LL_PrepareReceive>
 800b6d0:	e02f      	b.n	800b732 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	23ad      	movs	r3, #173	@ 0xad
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	58d3      	ldr	r3, [r2, r3]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00d      	beq.n	800b6fc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	23a7      	movs	r3, #167	@ 0xa7
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d107      	bne.n	800b6fc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	23ad      	movs	r3, #173	@ 0xad
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	58d3      	ldr	r3, [r2, r3]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	0010      	movs	r0, r2
 800b6fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2180      	movs	r1, #128	@ 0x80
 800b700:	0018      	movs	r0, r3
 800b702:	f001 fb86 	bl	800ce12 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	0018      	movs	r0, r3
 800b70a:	f000 fff8 	bl	800c6fe <USBD_CtlReceiveStatus>
 800b70e:	e010      	b.n	800b732 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	23a5      	movs	r3, #165	@ 0xa5
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	58d3      	ldr	r3, [r2, r3]
 800b718:	2b04      	cmp	r3, #4
 800b71a:	d005      	beq.n	800b728 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	23a5      	movs	r3, #165	@ 0xa5
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b724:	2b00      	cmp	r3, #0
 800b726:	d104      	bne.n	800b732 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2180      	movs	r1, #128	@ 0x80
 800b72c:	0018      	movs	r0, r3
 800b72e:	f001 fb70 	bl	800ce12 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	23a8      	movs	r3, #168	@ 0xa8
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	5cd3      	ldrb	r3, [r2, r3]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d124      	bne.n	800b788 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	0018      	movs	r0, r3
 800b742:	f7ff fe42 	bl	800b3ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	23a8      	movs	r3, #168	@ 0xa8
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	2100      	movs	r1, #0
 800b74e:	54d1      	strb	r1, [r2, r3]
 800b750:	e01a      	b.n	800b788 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	23ad      	movs	r3, #173	@ 0xad
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	58d3      	ldr	r3, [r2, r3]
 800b75a:	695b      	ldr	r3, [r3, #20]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d011      	beq.n	800b784 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	23a7      	movs	r3, #167	@ 0xa7
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800b768:	2b03      	cmp	r3, #3
 800b76a:	d10b      	bne.n	800b784 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	23ad      	movs	r3, #173	@ 0xad
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	58d3      	ldr	r3, [r2, r3]
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	220b      	movs	r2, #11
 800b778:	18ba      	adds	r2, r7, r2
 800b77a:	7811      	ldrb	r1, [r2, #0]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	0010      	movs	r0, r2
 800b780:	4798      	blx	r3
 800b782:	e001      	b.n	800b788 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b784:	2302      	movs	r3, #2
 800b786:	e000      	b.n	800b78a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	0018      	movs	r0, r3
 800b78c:	46bd      	mov	sp, r7
 800b78e:	b006      	add	sp, #24
 800b790:	bd80      	pop	{r7, pc}

0800b792 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b082      	sub	sp, #8
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	2340      	movs	r3, #64	@ 0x40
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	f001 fad4 	bl	800cd4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	23ac      	movs	r3, #172	@ 0xac
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	23b2      	movs	r3, #178	@ 0xb2
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	2140      	movs	r1, #64	@ 0x40
 800b7b8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	2340      	movs	r3, #64	@ 0x40
 800b7be:	2200      	movs	r2, #0
 800b7c0:	2180      	movs	r1, #128	@ 0x80
 800b7c2:	f001 fac4 	bl	800cd4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2240      	movs	r2, #64	@ 0x40
 800b7d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	23a7      	movs	r3, #167	@ 0xa7
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	2101      	movs	r1, #1
 800b7da:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	23a5      	movs	r3, #165	@ 0xa5
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	23a9      	movs	r3, #169	@ 0xa9
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	23ae      	movs	r3, #174	@ 0xae
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	58d3      	ldr	r3, [r2, r3]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00a      	beq.n	800b818 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	23ad      	movs	r3, #173	@ 0xad
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	58d3      	ldr	r3, [r2, r3]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	b2d9      	uxtb	r1, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	0018      	movs	r0, r3
 800b816:	4790      	blx	r2
  }

  return USBD_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	0018      	movs	r0, r3
 800b81c:	46bd      	mov	sp, r7
 800b81e:	b002      	add	sp, #8
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b082      	sub	sp, #8
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	000a      	movs	r2, r1
 800b82c:	1cfb      	adds	r3, r7, #3
 800b82e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	1cfa      	adds	r2, r7, #3
 800b834:	7812      	ldrb	r2, [r2, #0]
 800b836:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	0018      	movs	r0, r3
 800b83c:	46bd      	mov	sp, r7
 800b83e:	b002      	add	sp, #8
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	23a7      	movs	r3, #167	@ 0xa7
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	5cd1      	ldrb	r1, [r2, r3]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a06      	ldr	r2, [pc, #24]	@ (800b870 <USBD_LL_Suspend+0x2c>)
 800b858:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	23a7      	movs	r3, #167	@ 0xa7
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	2104      	movs	r1, #4
 800b862:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	0018      	movs	r0, r3
 800b868:	46bd      	mov	sp, r7
 800b86a:	b002      	add	sp, #8
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	46c0      	nop			@ (mov r8, r8)
 800b870:	0000029d 	.word	0x0000029d

0800b874 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	23a7      	movs	r3, #167	@ 0xa7
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	5cd3      	ldrb	r3, [r2, r3]
 800b884:	2b04      	cmp	r3, #4
 800b886:	d106      	bne.n	800b896 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a05      	ldr	r2, [pc, #20]	@ (800b8a0 <USBD_LL_Resume+0x2c>)
 800b88c:	5c99      	ldrb	r1, [r3, r2]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	23a7      	movs	r3, #167	@ 0xa7
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	0018      	movs	r0, r3
 800b89a:	46bd      	mov	sp, r7
 800b89c:	b002      	add	sp, #8
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	0000029d 	.word	0x0000029d

0800b8a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	23a7      	movs	r3, #167	@ 0xa7
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	5cd3      	ldrb	r3, [r2, r3]
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d10e      	bne.n	800b8d6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	23ad      	movs	r3, #173	@ 0xad
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	58d3      	ldr	r3, [r2, r3]
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d007      	beq.n	800b8d6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	23ad      	movs	r3, #173	@ 0xad
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	58d3      	ldr	r3, [r2, r3]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	0010      	movs	r0, r2
 800b8d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	0018      	movs	r0, r3
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	b002      	add	sp, #8
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ea:	230f      	movs	r3, #15
 800b8ec:	18fb      	adds	r3, r7, r3
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	001a      	movs	r2, r3
 800b8f8:	2360      	movs	r3, #96	@ 0x60
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	2b40      	cmp	r3, #64	@ 0x40
 800b8fe:	d004      	beq.n	800b90a <USBD_StdDevReq+0x2a>
 800b900:	d84f      	bhi.n	800b9a2 <USBD_StdDevReq+0xc2>
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00b      	beq.n	800b91e <USBD_StdDevReq+0x3e>
 800b906:	2b20      	cmp	r3, #32
 800b908:	d14b      	bne.n	800b9a2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	23ad      	movs	r3, #173	@ 0xad
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	58d3      	ldr	r3, [r2, r3]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	0010      	movs	r0, r2
 800b91a:	4798      	blx	r3
      break;
 800b91c:	e048      	b.n	800b9b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	785b      	ldrb	r3, [r3, #1]
 800b922:	2b09      	cmp	r3, #9
 800b924:	d835      	bhi.n	800b992 <USBD_StdDevReq+0xb2>
 800b926:	009a      	lsls	r2, r3, #2
 800b928:	4b25      	ldr	r3, [pc, #148]	@ (800b9c0 <USBD_StdDevReq+0xe0>)
 800b92a:	18d3      	adds	r3, r2, r3
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	0011      	movs	r1, r2
 800b936:	0018      	movs	r0, r3
 800b938:	f000 fa52 	bl	800bde0 <USBD_GetDescriptor>
          break;
 800b93c:	e030      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	0011      	movs	r1, r2
 800b944:	0018      	movs	r0, r3
 800b946:	f000 fbfd 	bl	800c144 <USBD_SetAddress>
          break;
 800b94a:	e029      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	0011      	movs	r1, r2
 800b952:	0018      	movs	r0, r3
 800b954:	f000 fc4a 	bl	800c1ec <USBD_SetConfig>
          break;
 800b958:	e022      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	0011      	movs	r1, r2
 800b960:	0018      	movs	r0, r3
 800b962:	f000 fce7 	bl	800c334 <USBD_GetConfig>
          break;
 800b966:	e01b      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	0011      	movs	r1, r2
 800b96e:	0018      	movs	r0, r3
 800b970:	f000 fd1b 	bl	800c3aa <USBD_GetStatus>
          break;
 800b974:	e014      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	0011      	movs	r1, r2
 800b97c:	0018      	movs	r0, r3
 800b97e:	f000 fd4e 	bl	800c41e <USBD_SetFeature>
          break;
 800b982:	e00d      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	0011      	movs	r1, r2
 800b98a:	0018      	movs	r0, r3
 800b98c:	f000 fd5d 	bl	800c44a <USBD_ClrFeature>
          break;
 800b990:	e006      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	0011      	movs	r1, r2
 800b998:	0018      	movs	r0, r3
 800b99a:	f000 fdb4 	bl	800c506 <USBD_CtlError>
          break;
 800b99e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800b9a0:	e006      	b.n	800b9b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	0011      	movs	r1, r2
 800b9a8:	0018      	movs	r0, r3
 800b9aa:	f000 fdac 	bl	800c506 <USBD_CtlError>
      break;
 800b9ae:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800b9b0:	230f      	movs	r3, #15
 800b9b2:	18fb      	adds	r3, r7, r3
 800b9b4:	781b      	ldrb	r3, [r3, #0]
}
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	b004      	add	sp, #16
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	46c0      	nop			@ (mov r8, r8)
 800b9c0:	08010e30 	.word	0x08010e30

0800b9c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b9c4:	b5b0      	push	{r4, r5, r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ce:	230f      	movs	r3, #15
 800b9d0:	18fb      	adds	r3, r7, r3
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	001a      	movs	r2, r3
 800b9dc:	2360      	movs	r3, #96	@ 0x60
 800b9de:	4013      	ands	r3, r2
 800b9e0:	2b40      	cmp	r3, #64	@ 0x40
 800b9e2:	d004      	beq.n	800b9ee <USBD_StdItfReq+0x2a>
 800b9e4:	d839      	bhi.n	800ba5a <USBD_StdItfReq+0x96>
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d001      	beq.n	800b9ee <USBD_StdItfReq+0x2a>
 800b9ea:	2b20      	cmp	r3, #32
 800b9ec:	d135      	bne.n	800ba5a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	23a7      	movs	r3, #167	@ 0xa7
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	5cd3      	ldrb	r3, [r2, r3]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d825      	bhi.n	800ba48 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	889b      	ldrh	r3, [r3, #4]
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d819      	bhi.n	800ba3a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	23ad      	movs	r3, #173	@ 0xad
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	58d3      	ldr	r3, [r2, r3]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	250f      	movs	r5, #15
 800ba12:	197c      	adds	r4, r7, r5
 800ba14:	6839      	ldr	r1, [r7, #0]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	0010      	movs	r0, r2
 800ba1a:	4798      	blx	r3
 800ba1c:	0003      	movs	r3, r0
 800ba1e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	88db      	ldrh	r3, [r3, #6]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d116      	bne.n	800ba56 <USBD_StdItfReq+0x92>
 800ba28:	197b      	adds	r3, r7, r5
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d112      	bne.n	800ba56 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	0018      	movs	r0, r3
 800ba34:	f000 fe4f 	bl	800c6d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba38:	e00d      	b.n	800ba56 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	0011      	movs	r1, r2
 800ba40:	0018      	movs	r0, r3
 800ba42:	f000 fd60 	bl	800c506 <USBD_CtlError>
          break;
 800ba46:	e006      	b.n	800ba56 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	0011      	movs	r1, r2
 800ba4e:	0018      	movs	r0, r3
 800ba50:	f000 fd59 	bl	800c506 <USBD_CtlError>
          break;
 800ba54:	e000      	b.n	800ba58 <USBD_StdItfReq+0x94>
          break;
 800ba56:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800ba58:	e006      	b.n	800ba68 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	0011      	movs	r1, r2
 800ba60:	0018      	movs	r0, r3
 800ba62:	f000 fd50 	bl	800c506 <USBD_CtlError>
      break;
 800ba66:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	b004      	add	sp, #16
 800ba70:	bdb0      	pop	{r4, r5, r7, pc}

0800ba72 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ba72:	b5b0      	push	{r4, r5, r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba7c:	230f      	movs	r3, #15
 800ba7e:	18fb      	adds	r3, r7, r3
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	889a      	ldrh	r2, [r3, #4]
 800ba88:	230e      	movs	r3, #14
 800ba8a:	18fb      	adds	r3, r7, r3
 800ba8c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	001a      	movs	r2, r3
 800ba94:	2360      	movs	r3, #96	@ 0x60
 800ba96:	4013      	ands	r3, r2
 800ba98:	2b40      	cmp	r3, #64	@ 0x40
 800ba9a:	d006      	beq.n	800baaa <USBD_StdEPReq+0x38>
 800ba9c:	d900      	bls.n	800baa0 <USBD_StdEPReq+0x2e>
 800ba9e:	e190      	b.n	800bdc2 <USBD_StdEPReq+0x350>
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00c      	beq.n	800babe <USBD_StdEPReq+0x4c>
 800baa4:	2b20      	cmp	r3, #32
 800baa6:	d000      	beq.n	800baaa <USBD_StdEPReq+0x38>
 800baa8:	e18b      	b.n	800bdc2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	23ad      	movs	r3, #173	@ 0xad
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	58d3      	ldr	r3, [r2, r3]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	0010      	movs	r0, r2
 800baba:	4798      	blx	r3
      break;
 800babc:	e188      	b.n	800bdd0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	001a      	movs	r2, r3
 800bac4:	2360      	movs	r3, #96	@ 0x60
 800bac6:	4013      	ands	r3, r2
 800bac8:	2b20      	cmp	r3, #32
 800baca:	d10f      	bne.n	800baec <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	23ad      	movs	r3, #173	@ 0xad
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	58d3      	ldr	r3, [r2, r3]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	250f      	movs	r5, #15
 800bad8:	197c      	adds	r4, r7, r5
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	0010      	movs	r0, r2
 800bae0:	4798      	blx	r3
 800bae2:	0003      	movs	r3, r0
 800bae4:	7023      	strb	r3, [r4, #0]

        return ret;
 800bae6:	197b      	adds	r3, r7, r5
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	e174      	b.n	800bdd6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	785b      	ldrb	r3, [r3, #1]
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d007      	beq.n	800bb04 <USBD_StdEPReq+0x92>
 800baf4:	dd00      	ble.n	800baf8 <USBD_StdEPReq+0x86>
 800baf6:	e15c      	b.n	800bdb2 <USBD_StdEPReq+0x340>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d100      	bne.n	800bafe <USBD_StdEPReq+0x8c>
 800bafc:	e092      	b.n	800bc24 <USBD_StdEPReq+0x1b2>
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d04b      	beq.n	800bb9a <USBD_StdEPReq+0x128>
 800bb02:	e156      	b.n	800bdb2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	23a7      	movs	r3, #167	@ 0xa7
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	5cd3      	ldrb	r3, [r2, r3]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d002      	beq.n	800bb16 <USBD_StdEPReq+0xa4>
 800bb10:	2b03      	cmp	r3, #3
 800bb12:	d01d      	beq.n	800bb50 <USBD_StdEPReq+0xde>
 800bb14:	e039      	b.n	800bb8a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb16:	220e      	movs	r2, #14
 800bb18:	18bb      	adds	r3, r7, r2
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d010      	beq.n	800bb42 <USBD_StdEPReq+0xd0>
 800bb20:	18bb      	adds	r3, r7, r2
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b80      	cmp	r3, #128	@ 0x80
 800bb26:	d00c      	beq.n	800bb42 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bb28:	18bb      	adds	r3, r7, r2
 800bb2a:	781a      	ldrb	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	0011      	movs	r1, r2
 800bb30:	0018      	movs	r0, r3
 800bb32:	f001 f96e 	bl	800ce12 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2180      	movs	r1, #128	@ 0x80
 800bb3a:	0018      	movs	r0, r3
 800bb3c:	f001 f969 	bl	800ce12 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb40:	e02a      	b.n	800bb98 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	0011      	movs	r1, r2
 800bb48:	0018      	movs	r0, r3
 800bb4a:	f000 fcdc 	bl	800c506 <USBD_CtlError>
              break;
 800bb4e:	e023      	b.n	800bb98 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	885b      	ldrh	r3, [r3, #2]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d113      	bne.n	800bb80 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800bb58:	220e      	movs	r2, #14
 800bb5a:	18bb      	adds	r3, r7, r2
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00e      	beq.n	800bb80 <USBD_StdEPReq+0x10e>
 800bb62:	18bb      	adds	r3, r7, r2
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	2b80      	cmp	r3, #128	@ 0x80
 800bb68:	d00a      	beq.n	800bb80 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	88db      	ldrh	r3, [r3, #6]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bb72:	18bb      	adds	r3, r7, r2
 800bb74:	781a      	ldrb	r2, [r3, #0]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	0011      	movs	r1, r2
 800bb7a:	0018      	movs	r0, r3
 800bb7c:	f001 f949 	bl	800ce12 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	0018      	movs	r0, r3
 800bb84:	f000 fda7 	bl	800c6d6 <USBD_CtlSendStatus>

              break;
 800bb88:	e006      	b.n	800bb98 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800bb8a:	683a      	ldr	r2, [r7, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	0011      	movs	r1, r2
 800bb90:	0018      	movs	r0, r3
 800bb92:	f000 fcb8 	bl	800c506 <USBD_CtlError>
              break;
 800bb96:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bb98:	e112      	b.n	800bdc0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	23a7      	movs	r3, #167	@ 0xa7
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	5cd3      	ldrb	r3, [r2, r3]
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d002      	beq.n	800bbac <USBD_StdEPReq+0x13a>
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	d01d      	beq.n	800bbe6 <USBD_StdEPReq+0x174>
 800bbaa:	e032      	b.n	800bc12 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbac:	220e      	movs	r2, #14
 800bbae:	18bb      	adds	r3, r7, r2
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d010      	beq.n	800bbd8 <USBD_StdEPReq+0x166>
 800bbb6:	18bb      	adds	r3, r7, r2
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	2b80      	cmp	r3, #128	@ 0x80
 800bbbc:	d00c      	beq.n	800bbd8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bbbe:	18bb      	adds	r3, r7, r2
 800bbc0:	781a      	ldrb	r2, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	0011      	movs	r1, r2
 800bbc6:	0018      	movs	r0, r3
 800bbc8:	f001 f923 	bl	800ce12 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2180      	movs	r1, #128	@ 0x80
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	f001 f91e 	bl	800ce12 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbd6:	e024      	b.n	800bc22 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	0011      	movs	r1, r2
 800bbde:	0018      	movs	r0, r3
 800bbe0:	f000 fc91 	bl	800c506 <USBD_CtlError>
              break;
 800bbe4:	e01d      	b.n	800bc22 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	885b      	ldrh	r3, [r3, #2]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d118      	bne.n	800bc20 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bbee:	210e      	movs	r1, #14
 800bbf0:	187b      	adds	r3, r7, r1
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	227f      	movs	r2, #127	@ 0x7f
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	d006      	beq.n	800bc08 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bbfa:	187b      	adds	r3, r7, r1
 800bbfc:	781a      	ldrb	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	0011      	movs	r1, r2
 800bc02:	0018      	movs	r0, r3
 800bc04:	f001 f930 	bl	800ce68 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	0018      	movs	r0, r3
 800bc0c:	f000 fd63 	bl	800c6d6 <USBD_CtlSendStatus>
              }
              break;
 800bc10:	e006      	b.n	800bc20 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	0011      	movs	r1, r2
 800bc18:	0018      	movs	r0, r3
 800bc1a:	f000 fc74 	bl	800c506 <USBD_CtlError>
              break;
 800bc1e:	e000      	b.n	800bc22 <USBD_StdEPReq+0x1b0>
              break;
 800bc20:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bc22:	e0cd      	b.n	800bdc0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	23a7      	movs	r3, #167	@ 0xa7
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	5cd3      	ldrb	r3, [r2, r3]
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d002      	beq.n	800bc36 <USBD_StdEPReq+0x1c4>
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d03c      	beq.n	800bcae <USBD_StdEPReq+0x23c>
 800bc34:	e0b5      	b.n	800bda2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc36:	220e      	movs	r2, #14
 800bc38:	18bb      	adds	r3, r7, r2
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00a      	beq.n	800bc56 <USBD_StdEPReq+0x1e4>
 800bc40:	18bb      	adds	r3, r7, r2
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b80      	cmp	r3, #128	@ 0x80
 800bc46:	d006      	beq.n	800bc56 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	0011      	movs	r1, r2
 800bc4e:	0018      	movs	r0, r3
 800bc50:	f000 fc59 	bl	800c506 <USBD_CtlError>
                break;
 800bc54:	e0ac      	b.n	800bdb0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc56:	220e      	movs	r2, #14
 800bc58:	18bb      	adds	r3, r7, r2
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	b25b      	sxtb	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	da0c      	bge.n	800bc7c <USBD_StdEPReq+0x20a>
 800bc62:	18bb      	adds	r3, r7, r2
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	227f      	movs	r2, #127	@ 0x7f
 800bc68:	401a      	ands	r2, r3
 800bc6a:	0013      	movs	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	189b      	adds	r3, r3, r2
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	3310      	adds	r3, #16
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	18d3      	adds	r3, r2, r3
 800bc78:	3304      	adds	r3, #4
 800bc7a:	e00d      	b.n	800bc98 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc7c:	230e      	movs	r3, #14
 800bc7e:	18fb      	adds	r3, r7, r3
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	227f      	movs	r2, #127	@ 0x7f
 800bc84:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc86:	0013      	movs	r3, r2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	189b      	adds	r3, r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	3351      	adds	r3, #81	@ 0x51
 800bc90:	33ff      	adds	r3, #255	@ 0xff
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	18d3      	adds	r3, r2, r3
 800bc96:	3304      	adds	r3, #4
 800bc98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bca0:	68b9      	ldr	r1, [r7, #8]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2202      	movs	r2, #2
 800bca6:	0018      	movs	r0, r3
 800bca8:	f000 fcab 	bl	800c602 <USBD_CtlSendData>
              break;
 800bcac:	e080      	b.n	800bdb0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bcae:	220e      	movs	r2, #14
 800bcb0:	18bb      	adds	r3, r7, r2
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	b25b      	sxtb	r3, r3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	da14      	bge.n	800bce4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bcba:	18bb      	adds	r3, r7, r2
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	220f      	movs	r2, #15
 800bcc0:	401a      	ands	r2, r3
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	0013      	movs	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	189b      	adds	r3, r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	18cb      	adds	r3, r1, r3
 800bcce:	3318      	adds	r3, #24
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d11e      	bne.n	800bd14 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	0011      	movs	r1, r2
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f000 fc12 	bl	800c506 <USBD_CtlError>
                  break;
 800bce2:	e065      	b.n	800bdb0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bce4:	230e      	movs	r3, #14
 800bce6:	18fb      	adds	r3, r7, r3
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	220f      	movs	r2, #15
 800bcec:	401a      	ands	r2, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	23ac      	movs	r3, #172	@ 0xac
 800bcf2:	0059      	lsls	r1, r3, #1
 800bcf4:	0013      	movs	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	189b      	adds	r3, r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	18c3      	adds	r3, r0, r3
 800bcfe:	185b      	adds	r3, r3, r1
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d106      	bne.n	800bd14 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	0011      	movs	r1, r2
 800bd0c:	0018      	movs	r0, r3
 800bd0e:	f000 fbfa 	bl	800c506 <USBD_CtlError>
                  break;
 800bd12:	e04d      	b.n	800bdb0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd14:	220e      	movs	r2, #14
 800bd16:	18bb      	adds	r3, r7, r2
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	b25b      	sxtb	r3, r3
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	da0c      	bge.n	800bd3a <USBD_StdEPReq+0x2c8>
 800bd20:	18bb      	adds	r3, r7, r2
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	227f      	movs	r2, #127	@ 0x7f
 800bd26:	401a      	ands	r2, r3
 800bd28:	0013      	movs	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	189b      	adds	r3, r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	3310      	adds	r3, #16
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	18d3      	adds	r3, r2, r3
 800bd36:	3304      	adds	r3, #4
 800bd38:	e00d      	b.n	800bd56 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd3a:	230e      	movs	r3, #14
 800bd3c:	18fb      	adds	r3, r7, r3
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	227f      	movs	r2, #127	@ 0x7f
 800bd42:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd44:	0013      	movs	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	189b      	adds	r3, r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	3351      	adds	r3, #81	@ 0x51
 800bd4e:	33ff      	adds	r3, #255	@ 0xff
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	18d3      	adds	r3, r2, r3
 800bd54:	3304      	adds	r3, #4
 800bd56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd58:	220e      	movs	r2, #14
 800bd5a:	18bb      	adds	r3, r7, r2
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d003      	beq.n	800bd6a <USBD_StdEPReq+0x2f8>
 800bd62:	18bb      	adds	r3, r7, r2
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b80      	cmp	r3, #128	@ 0x80
 800bd68:	d103      	bne.n	800bd72 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	e010      	b.n	800bd94 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bd72:	230e      	movs	r3, #14
 800bd74:	18fb      	adds	r3, r7, r3
 800bd76:	781a      	ldrb	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	0011      	movs	r1, r2
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f001 f89e 	bl	800cebe <USBD_LL_IsStallEP>
 800bd82:	1e03      	subs	r3, r0, #0
 800bd84:	d003      	beq.n	800bd8e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	e002      	b.n	800bd94 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	2200      	movs	r2, #0
 800bd92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2202      	movs	r2, #2
 800bd9a:	0018      	movs	r0, r3
 800bd9c:	f000 fc31 	bl	800c602 <USBD_CtlSendData>
              break;
 800bda0:	e006      	b.n	800bdb0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	0011      	movs	r1, r2
 800bda8:	0018      	movs	r0, r3
 800bdaa:	f000 fbac 	bl	800c506 <USBD_CtlError>
              break;
 800bdae:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bdb0:	e006      	b.n	800bdc0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	0011      	movs	r1, r2
 800bdb8:	0018      	movs	r0, r3
 800bdba:	f000 fba4 	bl	800c506 <USBD_CtlError>
          break;
 800bdbe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bdc0:	e006      	b.n	800bdd0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	0011      	movs	r1, r2
 800bdc8:	0018      	movs	r0, r3
 800bdca:	f000 fb9c 	bl	800c506 <USBD_CtlError>
      break;
 800bdce:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800bdd0:	230f      	movs	r3, #15
 800bdd2:	18fb      	adds	r3, r7, r3
 800bdd4:	781b      	ldrb	r3, [r3, #0]
}
 800bdd6:	0018      	movs	r0, r3
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	b004      	add	sp, #16
 800bddc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bde0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdea:	2308      	movs	r3, #8
 800bdec:	18fb      	adds	r3, r7, r3
 800bdee:	2200      	movs	r2, #0
 800bdf0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bdf6:	230b      	movs	r3, #11
 800bdf8:	18fb      	adds	r3, r7, r3
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	885b      	ldrh	r3, [r3, #2]
 800be02:	0a1b      	lsrs	r3, r3, #8
 800be04:	b29b      	uxth	r3, r3
 800be06:	2b07      	cmp	r3, #7
 800be08:	d900      	bls.n	800be0c <USBD_GetDescriptor+0x2c>
 800be0a:	e159      	b.n	800c0c0 <USBD_GetDescriptor+0x2e0>
 800be0c:	009a      	lsls	r2, r3, #2
 800be0e:	4bcb      	ldr	r3, [pc, #812]	@ (800c13c <USBD_GetDescriptor+0x35c>)
 800be10:	18d3      	adds	r3, r2, r3
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	23ac      	movs	r3, #172	@ 0xac
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	58d3      	ldr	r3, [r2, r3]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	7c12      	ldrb	r2, [r2, #16]
 800be24:	2108      	movs	r1, #8
 800be26:	1879      	adds	r1, r7, r1
 800be28:	0010      	movs	r0, r2
 800be2a:	4798      	blx	r3
 800be2c:	0003      	movs	r3, r0
 800be2e:	60fb      	str	r3, [r7, #12]
      break;
 800be30:	e153      	b.n	800c0da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	7c1b      	ldrb	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10f      	bne.n	800be5a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	23ad      	movs	r3, #173	@ 0xad
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	58d3      	ldr	r3, [r2, r3]
 800be42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be44:	2208      	movs	r2, #8
 800be46:	18ba      	adds	r2, r7, r2
 800be48:	0010      	movs	r0, r2
 800be4a:	4798      	blx	r3
 800be4c:	0003      	movs	r3, r0
 800be4e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	3301      	adds	r3, #1
 800be54:	2202      	movs	r2, #2
 800be56:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be58:	e13f      	b.n	800c0da <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	23ad      	movs	r3, #173	@ 0xad
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	58d3      	ldr	r3, [r2, r3]
 800be62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be64:	2208      	movs	r2, #8
 800be66:	18ba      	adds	r2, r7, r2
 800be68:	0010      	movs	r0, r2
 800be6a:	4798      	blx	r3
 800be6c:	0003      	movs	r3, r0
 800be6e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	3301      	adds	r3, #1
 800be74:	2202      	movs	r2, #2
 800be76:	701a      	strb	r2, [r3, #0]
      break;
 800be78:	e12f      	b.n	800c0da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	885b      	ldrh	r3, [r3, #2]
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	2b05      	cmp	r3, #5
 800be82:	d900      	bls.n	800be86 <USBD_GetDescriptor+0xa6>
 800be84:	e0d0      	b.n	800c028 <USBD_GetDescriptor+0x248>
 800be86:	009a      	lsls	r2, r3, #2
 800be88:	4bad      	ldr	r3, [pc, #692]	@ (800c140 <USBD_GetDescriptor+0x360>)
 800be8a:	18d3      	adds	r3, r2, r3
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	23ac      	movs	r3, #172	@ 0xac
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	58d3      	ldr	r3, [r2, r3]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00d      	beq.n	800beba <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	23ac      	movs	r3, #172	@ 0xac
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	58d3      	ldr	r3, [r2, r3]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	7c12      	ldrb	r2, [r2, #16]
 800beac:	2108      	movs	r1, #8
 800beae:	1879      	adds	r1, r7, r1
 800beb0:	0010      	movs	r0, r2
 800beb2:	4798      	blx	r3
 800beb4:	0003      	movs	r3, r0
 800beb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beb8:	e0c3      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	0011      	movs	r1, r2
 800bec0:	0018      	movs	r0, r3
 800bec2:	f000 fb20 	bl	800c506 <USBD_CtlError>
            err++;
 800bec6:	210b      	movs	r1, #11
 800bec8:	187b      	adds	r3, r7, r1
 800beca:	781a      	ldrb	r2, [r3, #0]
 800becc:	187b      	adds	r3, r7, r1
 800bece:	3201      	adds	r2, #1
 800bed0:	701a      	strb	r2, [r3, #0]
          break;
 800bed2:	e0b6      	b.n	800c042 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	23ac      	movs	r3, #172	@ 0xac
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	58d3      	ldr	r3, [r2, r3]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00d      	beq.n	800befe <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	23ac      	movs	r3, #172	@ 0xac
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	58d3      	ldr	r3, [r2, r3]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	7c12      	ldrb	r2, [r2, #16]
 800bef0:	2108      	movs	r1, #8
 800bef2:	1879      	adds	r1, r7, r1
 800bef4:	0010      	movs	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	0003      	movs	r3, r0
 800befa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800befc:	e0a1      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	0011      	movs	r1, r2
 800bf04:	0018      	movs	r0, r3
 800bf06:	f000 fafe 	bl	800c506 <USBD_CtlError>
            err++;
 800bf0a:	210b      	movs	r1, #11
 800bf0c:	187b      	adds	r3, r7, r1
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	187b      	adds	r3, r7, r1
 800bf12:	3201      	adds	r2, #1
 800bf14:	701a      	strb	r2, [r3, #0]
          break;
 800bf16:	e094      	b.n	800c042 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	23ac      	movs	r3, #172	@ 0xac
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	58d3      	ldr	r3, [r2, r3]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00d      	beq.n	800bf42 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	23ac      	movs	r3, #172	@ 0xac
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	58d3      	ldr	r3, [r2, r3]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	7c12      	ldrb	r2, [r2, #16]
 800bf34:	2108      	movs	r1, #8
 800bf36:	1879      	adds	r1, r7, r1
 800bf38:	0010      	movs	r0, r2
 800bf3a:	4798      	blx	r3
 800bf3c:	0003      	movs	r3, r0
 800bf3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf40:	e07f      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	0011      	movs	r1, r2
 800bf48:	0018      	movs	r0, r3
 800bf4a:	f000 fadc 	bl	800c506 <USBD_CtlError>
            err++;
 800bf4e:	210b      	movs	r1, #11
 800bf50:	187b      	adds	r3, r7, r1
 800bf52:	781a      	ldrb	r2, [r3, #0]
 800bf54:	187b      	adds	r3, r7, r1
 800bf56:	3201      	adds	r2, #1
 800bf58:	701a      	strb	r2, [r3, #0]
          break;
 800bf5a:	e072      	b.n	800c042 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	23ac      	movs	r3, #172	@ 0xac
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	58d3      	ldr	r3, [r2, r3]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00d      	beq.n	800bf86 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	23ac      	movs	r3, #172	@ 0xac
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	58d3      	ldr	r3, [r2, r3]
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	7c12      	ldrb	r2, [r2, #16]
 800bf78:	2108      	movs	r1, #8
 800bf7a:	1879      	adds	r1, r7, r1
 800bf7c:	0010      	movs	r0, r2
 800bf7e:	4798      	blx	r3
 800bf80:	0003      	movs	r3, r0
 800bf82:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf84:	e05d      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	0011      	movs	r1, r2
 800bf8c:	0018      	movs	r0, r3
 800bf8e:	f000 faba 	bl	800c506 <USBD_CtlError>
            err++;
 800bf92:	210b      	movs	r1, #11
 800bf94:	187b      	adds	r3, r7, r1
 800bf96:	781a      	ldrb	r2, [r3, #0]
 800bf98:	187b      	adds	r3, r7, r1
 800bf9a:	3201      	adds	r2, #1
 800bf9c:	701a      	strb	r2, [r3, #0]
          break;
 800bf9e:	e050      	b.n	800c042 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	23ac      	movs	r3, #172	@ 0xac
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	58d3      	ldr	r3, [r2, r3]
 800bfa8:	695b      	ldr	r3, [r3, #20]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00d      	beq.n	800bfca <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	23ac      	movs	r3, #172	@ 0xac
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	58d3      	ldr	r3, [r2, r3]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	7c12      	ldrb	r2, [r2, #16]
 800bfbc:	2108      	movs	r1, #8
 800bfbe:	1879      	adds	r1, r7, r1
 800bfc0:	0010      	movs	r0, r2
 800bfc2:	4798      	blx	r3
 800bfc4:	0003      	movs	r3, r0
 800bfc6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfc8:	e03b      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bfca:	683a      	ldr	r2, [r7, #0]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	0011      	movs	r1, r2
 800bfd0:	0018      	movs	r0, r3
 800bfd2:	f000 fa98 	bl	800c506 <USBD_CtlError>
            err++;
 800bfd6:	210b      	movs	r1, #11
 800bfd8:	187b      	adds	r3, r7, r1
 800bfda:	781a      	ldrb	r2, [r3, #0]
 800bfdc:	187b      	adds	r3, r7, r1
 800bfde:	3201      	adds	r2, #1
 800bfe0:	701a      	strb	r2, [r3, #0]
          break;
 800bfe2:	e02e      	b.n	800c042 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	23ac      	movs	r3, #172	@ 0xac
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	58d3      	ldr	r3, [r2, r3]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00d      	beq.n	800c00e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	23ac      	movs	r3, #172	@ 0xac
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	58d3      	ldr	r3, [r2, r3]
 800bffa:	699b      	ldr	r3, [r3, #24]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	7c12      	ldrb	r2, [r2, #16]
 800c000:	2108      	movs	r1, #8
 800c002:	1879      	adds	r1, r7, r1
 800c004:	0010      	movs	r0, r2
 800c006:	4798      	blx	r3
 800c008:	0003      	movs	r3, r0
 800c00a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c00c:	e019      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	0011      	movs	r1, r2
 800c014:	0018      	movs	r0, r3
 800c016:	f000 fa76 	bl	800c506 <USBD_CtlError>
            err++;
 800c01a:	210b      	movs	r1, #11
 800c01c:	187b      	adds	r3, r7, r1
 800c01e:	781a      	ldrb	r2, [r3, #0]
 800c020:	187b      	adds	r3, r7, r1
 800c022:	3201      	adds	r2, #1
 800c024:	701a      	strb	r2, [r3, #0]
          break;
 800c026:	e00c      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	0011      	movs	r1, r2
 800c02e:	0018      	movs	r0, r3
 800c030:	f000 fa69 	bl	800c506 <USBD_CtlError>
          err++;
 800c034:	210b      	movs	r1, #11
 800c036:	187b      	adds	r3, r7, r1
 800c038:	781a      	ldrb	r2, [r3, #0]
 800c03a:	187b      	adds	r3, r7, r1
 800c03c:	3201      	adds	r2, #1
 800c03e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800c040:	e04b      	b.n	800c0da <USBD_GetDescriptor+0x2fa>
 800c042:	e04a      	b.n	800c0da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7c1b      	ldrb	r3, [r3, #16]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10b      	bne.n	800c064 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	23ad      	movs	r3, #173	@ 0xad
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	58d3      	ldr	r3, [r2, r3]
 800c054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c056:	2208      	movs	r2, #8
 800c058:	18ba      	adds	r2, r7, r2
 800c05a:	0010      	movs	r0, r2
 800c05c:	4798      	blx	r3
 800c05e:	0003      	movs	r3, r0
 800c060:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c062:	e03a      	b.n	800c0da <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	0011      	movs	r1, r2
 800c06a:	0018      	movs	r0, r3
 800c06c:	f000 fa4b 	bl	800c506 <USBD_CtlError>
        err++;
 800c070:	210b      	movs	r1, #11
 800c072:	187b      	adds	r3, r7, r1
 800c074:	781a      	ldrb	r2, [r3, #0]
 800c076:	187b      	adds	r3, r7, r1
 800c078:	3201      	adds	r2, #1
 800c07a:	701a      	strb	r2, [r3, #0]
      break;
 800c07c:	e02d      	b.n	800c0da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	7c1b      	ldrb	r3, [r3, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10f      	bne.n	800c0a6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	23ad      	movs	r3, #173	@ 0xad
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	58d3      	ldr	r3, [r2, r3]
 800c08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c090:	2208      	movs	r2, #8
 800c092:	18ba      	adds	r2, r7, r2
 800c094:	0010      	movs	r0, r2
 800c096:	4798      	blx	r3
 800c098:	0003      	movs	r3, r0
 800c09a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	2207      	movs	r2, #7
 800c0a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0a4:	e019      	b.n	800c0da <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	0011      	movs	r1, r2
 800c0ac:	0018      	movs	r0, r3
 800c0ae:	f000 fa2a 	bl	800c506 <USBD_CtlError>
        err++;
 800c0b2:	210b      	movs	r1, #11
 800c0b4:	187b      	adds	r3, r7, r1
 800c0b6:	781a      	ldrb	r2, [r3, #0]
 800c0b8:	187b      	adds	r3, r7, r1
 800c0ba:	3201      	adds	r2, #1
 800c0bc:	701a      	strb	r2, [r3, #0]
      break;
 800c0be:	e00c      	b.n	800c0da <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	0011      	movs	r1, r2
 800c0c6:	0018      	movs	r0, r3
 800c0c8:	f000 fa1d 	bl	800c506 <USBD_CtlError>
      err++;
 800c0cc:	210b      	movs	r1, #11
 800c0ce:	187b      	adds	r3, r7, r1
 800c0d0:	781a      	ldrb	r2, [r3, #0]
 800c0d2:	187b      	adds	r3, r7, r1
 800c0d4:	3201      	adds	r2, #1
 800c0d6:	701a      	strb	r2, [r3, #0]
      break;
 800c0d8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800c0da:	230b      	movs	r3, #11
 800c0dc:	18fb      	adds	r3, r7, r3
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d127      	bne.n	800c134 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c0e4:	2108      	movs	r1, #8
 800c0e6:	187b      	adds	r3, r7, r1
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d019      	beq.n	800c122 <USBD_GetDescriptor+0x342>
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	88db      	ldrh	r3, [r3, #6]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d015      	beq.n	800c122 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	88da      	ldrh	r2, [r3, #6]
 800c0fa:	187b      	adds	r3, r7, r1
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	1c18      	adds	r0, r3, #0
 800c100:	1c11      	adds	r1, r2, #0
 800c102:	b28a      	uxth	r2, r1
 800c104:	b283      	uxth	r3, r0
 800c106:	429a      	cmp	r2, r3
 800c108:	d900      	bls.n	800c10c <USBD_GetDescriptor+0x32c>
 800c10a:	1c01      	adds	r1, r0, #0
 800c10c:	b28a      	uxth	r2, r1
 800c10e:	2108      	movs	r1, #8
 800c110:	187b      	adds	r3, r7, r1
 800c112:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c114:	187b      	adds	r3, r7, r1
 800c116:	881a      	ldrh	r2, [r3, #0]
 800c118:	68f9      	ldr	r1, [r7, #12]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	0018      	movs	r0, r3
 800c11e:	f000 fa70 	bl	800c602 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	88db      	ldrh	r3, [r3, #6]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d105      	bne.n	800c136 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	0018      	movs	r0, r3
 800c12e:	f000 fad2 	bl	800c6d6 <USBD_CtlSendStatus>
 800c132:	e000      	b.n	800c136 <USBD_GetDescriptor+0x356>
    return;
 800c134:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800c136:	46bd      	mov	sp, r7
 800c138:	b004      	add	sp, #16
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	08010e58 	.word	0x08010e58
 800c140:	08010e78 	.word	0x08010e78

0800c144 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c144:	b590      	push	{r4, r7, lr}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	889b      	ldrh	r3, [r3, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d13d      	bne.n	800c1d2 <USBD_SetAddress+0x8e>
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	88db      	ldrh	r3, [r3, #6]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d139      	bne.n	800c1d2 <USBD_SetAddress+0x8e>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	885b      	ldrh	r3, [r3, #2]
 800c162:	2b7f      	cmp	r3, #127	@ 0x7f
 800c164:	d835      	bhi.n	800c1d2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	885b      	ldrh	r3, [r3, #2]
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	230f      	movs	r3, #15
 800c16e:	18fb      	adds	r3, r7, r3
 800c170:	217f      	movs	r1, #127	@ 0x7f
 800c172:	400a      	ands	r2, r1
 800c174:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	23a7      	movs	r3, #167	@ 0xa7
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	5cd3      	ldrb	r3, [r2, r3]
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d106      	bne.n	800c190 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	0011      	movs	r1, r2
 800c188:	0018      	movs	r0, r3
 800c18a:	f000 f9bc 	bl	800c506 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c18e:	e027      	b.n	800c1e0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	240f      	movs	r4, #15
 800c194:	193a      	adds	r2, r7, r4
 800c196:	4914      	ldr	r1, [pc, #80]	@ (800c1e8 <USBD_SetAddress+0xa4>)
 800c198:	7812      	ldrb	r2, [r2, #0]
 800c19a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c19c:	193b      	adds	r3, r7, r4
 800c19e:	781a      	ldrb	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	0011      	movs	r1, r2
 800c1a4:	0018      	movs	r0, r3
 800c1a6:	f000 feba 	bl	800cf1e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	f000 fa92 	bl	800c6d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c1b2:	193b      	adds	r3, r7, r4
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	23a7      	movs	r3, #167	@ 0xa7
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	2102      	movs	r1, #2
 800c1c2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c4:	e00c      	b.n	800c1e0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	23a7      	movs	r3, #167	@ 0xa7
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	2101      	movs	r1, #1
 800c1ce:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1d0:	e006      	b.n	800c1e0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	0011      	movs	r1, r2
 800c1d8:	0018      	movs	r0, r3
 800c1da:	f000 f994 	bl	800c506 <USBD_CtlError>
  }
}
 800c1de:	46c0      	nop			@ (mov r8, r8)
 800c1e0:	46c0      	nop			@ (mov r8, r8)
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	b005      	add	sp, #20
 800c1e6:	bd90      	pop	{r4, r7, pc}
 800c1e8:	0000029e 	.word	0x0000029e

0800c1ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	885b      	ldrh	r3, [r3, #2]
 800c1fa:	b2da      	uxtb	r2, r3
 800c1fc:	4b4c      	ldr	r3, [pc, #304]	@ (800c330 <USBD_SetConfig+0x144>)
 800c1fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c200:	4b4b      	ldr	r3, [pc, #300]	@ (800c330 <USBD_SetConfig+0x144>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d906      	bls.n	800c216 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800c208:	683a      	ldr	r2, [r7, #0]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	0011      	movs	r1, r2
 800c20e:	0018      	movs	r0, r3
 800c210:	f000 f979 	bl	800c506 <USBD_CtlError>
 800c214:	e088      	b.n	800c328 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	23a7      	movs	r3, #167	@ 0xa7
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	5cd3      	ldrb	r3, [r2, r3]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d002      	beq.n	800c228 <USBD_SetConfig+0x3c>
 800c222:	2b03      	cmp	r3, #3
 800c224:	d029      	beq.n	800c27a <USBD_SetConfig+0x8e>
 800c226:	e071      	b.n	800c30c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c228:	4b41      	ldr	r3, [pc, #260]	@ (800c330 <USBD_SetConfig+0x144>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d01f      	beq.n	800c270 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800c230:	4b3f      	ldr	r3, [pc, #252]	@ (800c330 <USBD_SetConfig+0x144>)
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	001a      	movs	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	23a7      	movs	r3, #167	@ 0xa7
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	2103      	movs	r1, #3
 800c242:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c244:	4b3a      	ldr	r3, [pc, #232]	@ (800c330 <USBD_SetConfig+0x144>)
 800c246:	781a      	ldrb	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	0011      	movs	r1, r2
 800c24c:	0018      	movs	r0, r3
 800c24e:	f7ff f8c5 	bl	800b3dc <USBD_SetClassConfig>
 800c252:	0003      	movs	r3, r0
 800c254:	2b02      	cmp	r3, #2
 800c256:	d106      	bne.n	800c266 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	0011      	movs	r1, r2
 800c25e:	0018      	movs	r0, r3
 800c260:	f000 f951 	bl	800c506 <USBD_CtlError>
            return;
 800c264:	e060      	b.n	800c328 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	0018      	movs	r0, r3
 800c26a:	f000 fa34 	bl	800c6d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c26e:	e05b      	b.n	800c328 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	0018      	movs	r0, r3
 800c274:	f000 fa2f 	bl	800c6d6 <USBD_CtlSendStatus>
        break;
 800c278:	e056      	b.n	800c328 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c27a:	4b2d      	ldr	r3, [pc, #180]	@ (800c330 <USBD_SetConfig+0x144>)
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d115      	bne.n	800c2ae <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	23a7      	movs	r3, #167	@ 0xa7
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	2102      	movs	r1, #2
 800c28a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800c28c:	4b28      	ldr	r3, [pc, #160]	@ (800c330 <USBD_SetConfig+0x144>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	001a      	movs	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c296:	4b26      	ldr	r3, [pc, #152]	@ (800c330 <USBD_SetConfig+0x144>)
 800c298:	781a      	ldrb	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	0011      	movs	r1, r2
 800c29e:	0018      	movs	r0, r3
 800c2a0:	f7ff f8c3 	bl	800b42a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	f000 fa15 	bl	800c6d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c2ac:	e03c      	b.n	800c328 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c2ae:	4b20      	ldr	r3, [pc, #128]	@ (800c330 <USBD_SetConfig+0x144>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	001a      	movs	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d022      	beq.n	800c302 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	0011      	movs	r1, r2
 800c2c6:	0018      	movs	r0, r3
 800c2c8:	f7ff f8af 	bl	800b42a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c2cc:	4b18      	ldr	r3, [pc, #96]	@ (800c330 <USBD_SetConfig+0x144>)
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	001a      	movs	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c2d6:	4b16      	ldr	r3, [pc, #88]	@ (800c330 <USBD_SetConfig+0x144>)
 800c2d8:	781a      	ldrb	r2, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	0011      	movs	r1, r2
 800c2de:	0018      	movs	r0, r3
 800c2e0:	f7ff f87c 	bl	800b3dc <USBD_SetClassConfig>
 800c2e4:	0003      	movs	r3, r0
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	d106      	bne.n	800c2f8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	0011      	movs	r1, r2
 800c2f0:	0018      	movs	r0, r3
 800c2f2:	f000 f908 	bl	800c506 <USBD_CtlError>
            return;
 800c2f6:	e017      	b.n	800c328 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	f000 f9eb 	bl	800c6d6 <USBD_CtlSendStatus>
        break;
 800c300:	e012      	b.n	800c328 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	0018      	movs	r0, r3
 800c306:	f000 f9e6 	bl	800c6d6 <USBD_CtlSendStatus>
        break;
 800c30a:	e00d      	b.n	800c328 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	0011      	movs	r1, r2
 800c312:	0018      	movs	r0, r3
 800c314:	f000 f8f7 	bl	800c506 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c318:	4b05      	ldr	r3, [pc, #20]	@ (800c330 <USBD_SetConfig+0x144>)
 800c31a:	781a      	ldrb	r2, [r3, #0]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	0011      	movs	r1, r2
 800c320:	0018      	movs	r0, r3
 800c322:	f7ff f882 	bl	800b42a <USBD_ClrClassConfig>
        break;
 800c326:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800c328:	46bd      	mov	sp, r7
 800c32a:	b002      	add	sp, #8
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	46c0      	nop			@ (mov r8, r8)
 800c330:	20000690 	.word	0x20000690

0800c334 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	88db      	ldrh	r3, [r3, #6]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d006      	beq.n	800c354 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	0011      	movs	r1, r2
 800c34c:	0018      	movs	r0, r3
 800c34e:	f000 f8da 	bl	800c506 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c352:	e026      	b.n	800c3a2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	23a7      	movs	r3, #167	@ 0xa7
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	5cd3      	ldrb	r3, [r2, r3]
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	dc02      	bgt.n	800c366 <USBD_GetConfig+0x32>
 800c360:	2b00      	cmp	r3, #0
 800c362:	dc03      	bgt.n	800c36c <USBD_GetConfig+0x38>
 800c364:	e016      	b.n	800c394 <USBD_GetConfig+0x60>
 800c366:	2b03      	cmp	r3, #3
 800c368:	d00c      	beq.n	800c384 <USBD_GetConfig+0x50>
 800c36a:	e013      	b.n	800c394 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	3308      	adds	r3, #8
 800c376:	0019      	movs	r1, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	0018      	movs	r0, r3
 800c37e:	f000 f940 	bl	800c602 <USBD_CtlSendData>
        break;
 800c382:	e00e      	b.n	800c3a2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	1d19      	adds	r1, r3, #4
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	0018      	movs	r0, r3
 800c38e:	f000 f938 	bl	800c602 <USBD_CtlSendData>
        break;
 800c392:	e006      	b.n	800c3a2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	0011      	movs	r1, r2
 800c39a:	0018      	movs	r0, r3
 800c39c:	f000 f8b3 	bl	800c506 <USBD_CtlError>
        break;
 800c3a0:	46c0      	nop			@ (mov r8, r8)
}
 800c3a2:	46c0      	nop			@ (mov r8, r8)
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	b002      	add	sp, #8
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b082      	sub	sp, #8
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	23a7      	movs	r3, #167	@ 0xa7
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	5cd3      	ldrb	r3, [r2, r3]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d822      	bhi.n	800c408 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	88db      	ldrh	r3, [r3, #6]
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d006      	beq.n	800c3d8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	0011      	movs	r1, r2
 800c3d0:	0018      	movs	r0, r3
 800c3d2:	f000 f898 	bl	800c506 <USBD_CtlError>
        break;
 800c3d6:	e01e      	b.n	800c416 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	23a9      	movs	r3, #169	@ 0xa9
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	58d3      	ldr	r3, [r2, r3]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d005      	beq.n	800c3f6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	2202      	movs	r2, #2
 800c3f0:	431a      	orrs	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	330c      	adds	r3, #12
 800c3fa:	0019      	movs	r1, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2202      	movs	r2, #2
 800c400:	0018      	movs	r0, r3
 800c402:	f000 f8fe 	bl	800c602 <USBD_CtlSendData>
      break;
 800c406:	e006      	b.n	800c416 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c408:	683a      	ldr	r2, [r7, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	0011      	movs	r1, r2
 800c40e:	0018      	movs	r0, r3
 800c410:	f000 f879 	bl	800c506 <USBD_CtlError>
      break;
 800c414:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c416:	46c0      	nop			@ (mov r8, r8)
 800c418:	46bd      	mov	sp, r7
 800c41a:	b002      	add	sp, #8
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b082      	sub	sp, #8
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	885b      	ldrh	r3, [r3, #2]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d108      	bne.n	800c442 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	23a9      	movs	r3, #169	@ 0xa9
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	2101      	movs	r1, #1
 800c438:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	0018      	movs	r0, r3
 800c43e:	f000 f94a 	bl	800c6d6 <USBD_CtlSendStatus>
  }
}
 800c442:	46c0      	nop			@ (mov r8, r8)
 800c444:	46bd      	mov	sp, r7
 800c446:	b002      	add	sp, #8
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	23a7      	movs	r3, #167	@ 0xa7
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	5cd3      	ldrb	r3, [r2, r3]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d80d      	bhi.n	800c47e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	885b      	ldrh	r3, [r3, #2]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d110      	bne.n	800c48c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	23a9      	movs	r3, #169	@ 0xa9
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	2100      	movs	r1, #0
 800c472:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	0018      	movs	r0, r3
 800c478:	f000 f92d 	bl	800c6d6 <USBD_CtlSendStatus>
      }
      break;
 800c47c:	e006      	b.n	800c48c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c47e:	683a      	ldr	r2, [r7, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	0011      	movs	r1, r2
 800c484:	0018      	movs	r0, r3
 800c486:	f000 f83e 	bl	800c506 <USBD_CtlError>
      break;
 800c48a:	e000      	b.n	800c48e <USBD_ClrFeature+0x44>
      break;
 800c48c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c48e:	46c0      	nop			@ (mov r8, r8)
 800c490:	46bd      	mov	sp, r7
 800c492:	b002      	add	sp, #8
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	785a      	ldrb	r2, [r3, #1]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	3302      	adds	r3, #2
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	001a      	movs	r2, r3
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	3303      	adds	r3, #3
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	021b      	lsls	r3, r3, #8
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	18d3      	adds	r3, r2, r3
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	001a      	movs	r2, r3
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	3305      	adds	r3, #5
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	021b      	lsls	r3, r3, #8
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	18d3      	adds	r3, r2, r3
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	3306      	adds	r3, #6
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	001a      	movs	r2, r3
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	3307      	adds	r3, #7
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	18d3      	adds	r3, r2, r3
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	80da      	strh	r2, [r3, #6]

}
 800c4fe:	46c0      	nop			@ (mov r8, r8)
 800c500:	46bd      	mov	sp, r7
 800c502:	b002      	add	sp, #8
 800c504:	bd80      	pop	{r7, pc}

0800c506 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2180      	movs	r1, #128	@ 0x80
 800c514:	0018      	movs	r0, r3
 800c516:	f000 fc7c 	bl	800ce12 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2100      	movs	r1, #0
 800c51e:	0018      	movs	r0, r3
 800c520:	f000 fc77 	bl	800ce12 <USBD_LL_StallEP>
}
 800c524:	46c0      	nop			@ (mov r8, r8)
 800c526:	46bd      	mov	sp, r7
 800c528:	b002      	add	sp, #8
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c52c:	b590      	push	{r4, r7, lr}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c538:	2417      	movs	r4, #23
 800c53a:	193b      	adds	r3, r7, r4
 800c53c:	2200      	movs	r2, #0
 800c53e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d03c      	beq.n	800c5c0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	0018      	movs	r0, r3
 800c54a:	f000 f83d 	bl	800c5c8 <USBD_GetLen>
 800c54e:	0003      	movs	r3, r0
 800c550:	3301      	adds	r3, #1
 800c552:	b29b      	uxth	r3, r3
 800c554:	18db      	adds	r3, r3, r3
 800c556:	b29a      	uxth	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c55c:	193b      	adds	r3, r7, r4
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	193a      	adds	r2, r7, r4
 800c562:	1c59      	adds	r1, r3, #1
 800c564:	7011      	strb	r1, [r2, #0]
 800c566:	001a      	movs	r2, r3
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	189b      	adds	r3, r3, r2
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	7812      	ldrb	r2, [r2, #0]
 800c570:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c572:	193b      	adds	r3, r7, r4
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	193a      	adds	r2, r7, r4
 800c578:	1c59      	adds	r1, r3, #1
 800c57a:	7011      	strb	r1, [r2, #0]
 800c57c:	001a      	movs	r2, r3
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	189b      	adds	r3, r3, r2
 800c582:	2203      	movs	r2, #3
 800c584:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c586:	e017      	b.n	800c5b8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	60fa      	str	r2, [r7, #12]
 800c58e:	2417      	movs	r4, #23
 800c590:	193a      	adds	r2, r7, r4
 800c592:	7812      	ldrb	r2, [r2, #0]
 800c594:	1939      	adds	r1, r7, r4
 800c596:	1c50      	adds	r0, r2, #1
 800c598:	7008      	strb	r0, [r1, #0]
 800c59a:	0011      	movs	r1, r2
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	1852      	adds	r2, r2, r1
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c5a4:	193b      	adds	r3, r7, r4
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	193a      	adds	r2, r7, r4
 800c5aa:	1c59      	adds	r1, r3, #1
 800c5ac:	7011      	strb	r1, [r2, #0]
 800c5ae:	001a      	movs	r2, r3
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	189b      	adds	r3, r3, r2
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e3      	bne.n	800c588 <USBD_GetString+0x5c>
    }
  }
}
 800c5c0:	46c0      	nop			@ (mov r8, r8)
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	b007      	add	sp, #28
 800c5c6:	bd90      	pop	{r4, r7, pc}

0800c5c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5d0:	230f      	movs	r3, #15
 800c5d2:	18fb      	adds	r3, r7, r3
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800c5d8:	e008      	b.n	800c5ec <USBD_GetLen+0x24>
  {
    len++;
 800c5da:	210f      	movs	r1, #15
 800c5dc:	187b      	adds	r3, r7, r1
 800c5de:	781a      	ldrb	r2, [r3, #0]
 800c5e0:	187b      	adds	r3, r7, r1
 800c5e2:	3201      	adds	r2, #1
 800c5e4:	701a      	strb	r2, [r3, #0]
    buf++;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1f2      	bne.n	800c5da <USBD_GetLen+0x12>
  }

  return len;
 800c5f4:	230f      	movs	r3, #15
 800c5f6:	18fb      	adds	r3, r7, r3
 800c5f8:	781b      	ldrb	r3, [r3, #0]
}
 800c5fa:	0018      	movs	r0, r3
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	b004      	add	sp, #16
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	60b9      	str	r1, [r7, #8]
 800c60c:	1dbb      	adds	r3, r7, #6
 800c60e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	23a5      	movs	r3, #165	@ 0xa5
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	2102      	movs	r1, #2
 800c618:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800c61a:	1dbb      	adds	r3, r7, #6
 800c61c:	881a      	ldrh	r2, [r3, #0]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c622:	1dbb      	adds	r3, r7, #6
 800c624:	881a      	ldrh	r2, [r3, #0]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c62a:	1dbb      	adds	r3, r7, #6
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	2100      	movs	r1, #0
 800c634:	f000 fc9e 	bl	800cf74 <USBD_LL_Transmit>

  return USBD_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	0018      	movs	r0, r3
 800c63c:	46bd      	mov	sp, r7
 800c63e:	b004      	add	sp, #16
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	60f8      	str	r0, [r7, #12]
 800c64a:	60b9      	str	r1, [r7, #8]
 800c64c:	1dbb      	adds	r3, r7, #6
 800c64e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c650:	1dbb      	adds	r3, r7, #6
 800c652:	881b      	ldrh	r3, [r3, #0]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	2100      	movs	r1, #0
 800c65a:	f000 fc8b 	bl	800cf74 <USBD_LL_Transmit>

  return USBD_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	0018      	movs	r0, r3
 800c662:	46bd      	mov	sp, r7
 800c664:	b004      	add	sp, #16
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	1dbb      	adds	r3, r7, #6
 800c674:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	23a5      	movs	r3, #165	@ 0xa5
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	2103      	movs	r1, #3
 800c67e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800c680:	1dbb      	adds	r3, r7, #6
 800c682:	8819      	ldrh	r1, [r3, #0]
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	23ae      	movs	r3, #174	@ 0xae
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800c68c:	1dbb      	adds	r3, r7, #6
 800c68e:	8819      	ldrh	r1, [r3, #0]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	23b0      	movs	r3, #176	@ 0xb0
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c698:	1dbb      	adds	r3, r7, #6
 800c69a:	881b      	ldrh	r3, [r3, #0]
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	f000 fc9e 	bl	800cfe2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	b004      	add	sp, #16
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	1dbb      	adds	r3, r7, #6
 800c6bc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c6be:	1dbb      	adds	r3, r7, #6
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	f000 fc8b 	bl	800cfe2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	b004      	add	sp, #16
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b082      	sub	sp, #8
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	23a5      	movs	r3, #165	@ 0xa5
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	2104      	movs	r1, #4
 800c6e6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	f000 fc40 	bl	800cf74 <USBD_LL_Transmit>

  return USBD_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	b002      	add	sp, #8
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b082      	sub	sp, #8
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	23a5      	movs	r3, #165	@ 0xa5
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	2105      	movs	r1, #5
 800c70e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	2300      	movs	r3, #0
 800c714:	2200      	movs	r2, #0
 800c716:	2100      	movs	r1, #0
 800c718:	f000 fc63 	bl	800cfe2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	0018      	movs	r0, r3
 800c720:	46bd      	mov	sp, r7
 800c722:	b002      	add	sp, #8
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c72c:	4914      	ldr	r1, [pc, #80]	@ (800c780 <MX_USB_DEVICE_Init+0x58>)
 800c72e:	4b15      	ldr	r3, [pc, #84]	@ (800c784 <MX_USB_DEVICE_Init+0x5c>)
 800c730:	2200      	movs	r2, #0
 800c732:	0018      	movs	r0, r3
 800c734:	f7fe fdeb 	bl	800b30e <USBD_Init>
 800c738:	1e03      	subs	r3, r0, #0
 800c73a:	d001      	beq.n	800c740 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c73c:	f7f6 fb04 	bl	8002d48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c740:	4a11      	ldr	r2, [pc, #68]	@ (800c788 <MX_USB_DEVICE_Init+0x60>)
 800c742:	4b10      	ldr	r3, [pc, #64]	@ (800c784 <MX_USB_DEVICE_Init+0x5c>)
 800c744:	0011      	movs	r1, r2
 800c746:	0018      	movs	r0, r3
 800c748:	f7fe fe12 	bl	800b370 <USBD_RegisterClass>
 800c74c:	1e03      	subs	r3, r0, #0
 800c74e:	d001      	beq.n	800c754 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800c750:	f7f6 fafa 	bl	8002d48 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c754:	4a0d      	ldr	r2, [pc, #52]	@ (800c78c <MX_USB_DEVICE_Init+0x64>)
 800c756:	4b0b      	ldr	r3, [pc, #44]	@ (800c784 <MX_USB_DEVICE_Init+0x5c>)
 800c758:	0011      	movs	r1, r2
 800c75a:	0018      	movs	r0, r3
 800c75c:	f7fe fdbc 	bl	800b2d8 <USBD_CUSTOM_HID_RegisterInterface>
 800c760:	1e03      	subs	r3, r0, #0
 800c762:	d001      	beq.n	800c768 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800c764:	f7f6 faf0 	bl	8002d48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c768:	4b06      	ldr	r3, [pc, #24]	@ (800c784 <MX_USB_DEVICE_Init+0x5c>)
 800c76a:	0018      	movs	r0, r3
 800c76c:	f7fe fe20 	bl	800b3b0 <USBD_Start>
 800c770:	1e03      	subs	r3, r0, #0
 800c772:	d001      	beq.n	800c778 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800c774:	f7f6 fae8 	bl	8002d48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c778:	46c0      	nop			@ (mov r8, r8)
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	46c0      	nop			@ (mov r8, r8)
 800c780:	20000140 	.word	0x20000140
 800c784:	20000694 	.word	0x20000694
 800c788:	2000000c 	.word	0x2000000c
 800c78c:	20000130 	.word	0x20000130

0800c790 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	hUsbDevice_0 = &hUsbDeviceFS;	// Need for CUSTOM_HID_OutEvent_FS
 800c794:	4b03      	ldr	r3, [pc, #12]	@ (800c7a4 <CUSTOM_HID_Init_FS+0x14>)
 800c796:	4a04      	ldr	r2, [pc, #16]	@ (800c7a8 <CUSTOM_HID_Init_FS+0x18>)
 800c798:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 800c79a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c79c:	0018      	movs	r0, r3
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	46c0      	nop			@ (mov r8, r8)
 800c7a4:	20000958 	.word	0x20000958
 800c7a8:	20000694 	.word	0x20000694

0800c7ac <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c7b0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c7b2:	0018      	movs	r0, r3
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	0002      	movs	r2, r0
 800c7c0:	1dfb      	adds	r3, r7, #7
 800c7c2:	701a      	strb	r2, [r3, #0]
 800c7c4:	1dbb      	adds	r3, r7, #6
 800c7c6:	1c0a      	adds	r2, r1, #0
 800c7c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)hUsbDevice_0->pClassData;
 800c7ca:	4b13      	ldr	r3, [pc, #76]	@ (800c818 <CUSTOM_HID_OutEvent_FS+0x60>)
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	23ae      	movs	r3, #174	@ 0xae
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	58d3      	ldr	r3, [r2, r3]
 800c7d4:	60bb      	str	r3, [r7, #8]

	  for (uint8_t i = 0; i < ARRAY2ST+1; i++)
 800c7d6:	230f      	movs	r3, #15
 800c7d8:	18fb      	adds	r3, r7, r3
 800c7da:	2200      	movs	r2, #0
 800c7dc:	701a      	strb	r2, [r3, #0]
 800c7de:	e00d      	b.n	800c7fc <CUSTOM_HID_OutEvent_FS+0x44>
	  {
		  USB_RX_Buffer[i] = hhid->Report_buf[i]; // To read usb data from PC
 800c7e0:	200f      	movs	r0, #15
 800c7e2:	183b      	adds	r3, r7, r0
 800c7e4:	781a      	ldrb	r2, [r3, #0]
 800c7e6:	183b      	adds	r3, r7, r0
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	68b9      	ldr	r1, [r7, #8]
 800c7ec:	5c89      	ldrb	r1, [r1, r2]
 800c7ee:	4a0b      	ldr	r2, [pc, #44]	@ (800c81c <CUSTOM_HID_OutEvent_FS+0x64>)
 800c7f0:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t i = 0; i < ARRAY2ST+1; i++)
 800c7f2:	183b      	adds	r3, r7, r0
 800c7f4:	781a      	ldrb	r2, [r3, #0]
 800c7f6:	183b      	adds	r3, r7, r0
 800c7f8:	3201      	adds	r2, #1
 800c7fa:	701a      	strb	r2, [r3, #0]
 800c7fc:	230f      	movs	r3, #15
 800c7fe:	18fb      	adds	r3, r7, r3
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d9ec      	bls.n	800c7e0 <CUSTOM_HID_OutEvent_FS+0x28>
	  }
	  USBDatainReady = SET;
 800c806:	4b06      	ldr	r3, [pc, #24]	@ (800c820 <CUSTOM_HID_OutEvent_FS+0x68>)
 800c808:	2201      	movs	r2, #1
 800c80a:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800c80c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c80e:	0018      	movs	r0, r3
 800c810:	46bd      	mov	sp, r7
 800c812:	b004      	add	sp, #16
 800c814:	bd80      	pop	{r7, pc}
 800c816:	46c0      	nop			@ (mov r8, r8)
 800c818:	20000958 	.word	0x20000958
 800c81c:	200005dc 	.word	0x200005dc
 800c820:	20000684 	.word	0x20000684

0800c824 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	0002      	movs	r2, r0
 800c82c:	6039      	str	r1, [r7, #0]
 800c82e:	1dfb      	adds	r3, r7, #7
 800c830:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2212      	movs	r2, #18
 800c836:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c838:	4b02      	ldr	r3, [pc, #8]	@ (800c844 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c83a:	0018      	movs	r0, r3
 800c83c:	46bd      	mov	sp, r7
 800c83e:	b002      	add	sp, #8
 800c840:	bd80      	pop	{r7, pc}
 800c842:	46c0      	nop			@ (mov r8, r8)
 800c844:	2000015c 	.word	0x2000015c

0800c848 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	0002      	movs	r2, r0
 800c850:	6039      	str	r1, [r7, #0]
 800c852:	1dfb      	adds	r3, r7, #7
 800c854:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2204      	movs	r2, #4
 800c85a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c85c:	4b02      	ldr	r3, [pc, #8]	@ (800c868 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c85e:	0018      	movs	r0, r3
 800c860:	46bd      	mov	sp, r7
 800c862:	b002      	add	sp, #8
 800c864:	bd80      	pop	{r7, pc}
 800c866:	46c0      	nop			@ (mov r8, r8)
 800c868:	20000170 	.word	0x20000170

0800c86c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	0002      	movs	r2, r0
 800c874:	6039      	str	r1, [r7, #0]
 800c876:	1dfb      	adds	r3, r7, #7
 800c878:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c87a:	1dfb      	adds	r3, r7, #7
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c882:	683a      	ldr	r2, [r7, #0]
 800c884:	4908      	ldr	r1, [pc, #32]	@ (800c8a8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c886:	4b09      	ldr	r3, [pc, #36]	@ (800c8ac <USBD_FS_ProductStrDescriptor+0x40>)
 800c888:	0018      	movs	r0, r3
 800c88a:	f7ff fe4f 	bl	800c52c <USBD_GetString>
 800c88e:	e005      	b.n	800c89c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c890:	683a      	ldr	r2, [r7, #0]
 800c892:	4905      	ldr	r1, [pc, #20]	@ (800c8a8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c894:	4b05      	ldr	r3, [pc, #20]	@ (800c8ac <USBD_FS_ProductStrDescriptor+0x40>)
 800c896:	0018      	movs	r0, r3
 800c898:	f7ff fe48 	bl	800c52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c89c:	4b02      	ldr	r3, [pc, #8]	@ (800c8a8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800c89e:	0018      	movs	r0, r3
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	b002      	add	sp, #8
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	46c0      	nop			@ (mov r8, r8)
 800c8a8:	2000095c 	.word	0x2000095c
 800c8ac:	08010464 	.word	0x08010464

0800c8b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	0002      	movs	r2, r0
 800c8b8:	6039      	str	r1, [r7, #0]
 800c8ba:	1dfb      	adds	r3, r7, #7
 800c8bc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	4904      	ldr	r1, [pc, #16]	@ (800c8d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c8c2:	4b05      	ldr	r3, [pc, #20]	@ (800c8d8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800c8c4:	0018      	movs	r0, r3
 800c8c6:	f7ff fe31 	bl	800c52c <USBD_GetString>
  return USBD_StrDesc;
 800c8ca:	4b02      	ldr	r3, [pc, #8]	@ (800c8d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800c8cc:	0018      	movs	r0, r3
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	b002      	add	sp, #8
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	2000095c 	.word	0x2000095c
 800c8d8:	08010484 	.word	0x08010484

0800c8dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	0002      	movs	r2, r0
 800c8e4:	6039      	str	r1, [r7, #0]
 800c8e6:	1dfb      	adds	r3, r7, #7
 800c8e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	221a      	movs	r2, #26
 800c8ee:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c8f0:	f000 f84c 	bl	800c98c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c8f4:	4b02      	ldr	r3, [pc, #8]	@ (800c900 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800c8f6:	0018      	movs	r0, r3
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	b002      	add	sp, #8
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	46c0      	nop			@ (mov r8, r8)
 800c900:	20000174 	.word	0x20000174

0800c904 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	0002      	movs	r2, r0
 800c90c:	6039      	str	r1, [r7, #0]
 800c90e:	1dfb      	adds	r3, r7, #7
 800c910:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800c912:	1dfb      	adds	r3, r7, #7
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d106      	bne.n	800c928 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c91a:	683a      	ldr	r2, [r7, #0]
 800c91c:	4908      	ldr	r1, [pc, #32]	@ (800c940 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c91e:	4b09      	ldr	r3, [pc, #36]	@ (800c944 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c920:	0018      	movs	r0, r3
 800c922:	f7ff fe03 	bl	800c52c <USBD_GetString>
 800c926:	e005      	b.n	800c934 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	4905      	ldr	r1, [pc, #20]	@ (800c940 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c92c:	4b05      	ldr	r3, [pc, #20]	@ (800c944 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c92e:	0018      	movs	r0, r3
 800c930:	f7ff fdfc 	bl	800c52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c934:	4b02      	ldr	r3, [pc, #8]	@ (800c940 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800c936:	0018      	movs	r0, r3
 800c938:	46bd      	mov	sp, r7
 800c93a:	b002      	add	sp, #8
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	46c0      	nop			@ (mov r8, r8)
 800c940:	2000095c 	.word	0x2000095c
 800c944:	08010498 	.word	0x08010498

0800c948 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	0002      	movs	r2, r0
 800c950:	6039      	str	r1, [r7, #0]
 800c952:	1dfb      	adds	r3, r7, #7
 800c954:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c956:	1dfb      	adds	r3, r7, #7
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d106      	bne.n	800c96c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	4908      	ldr	r1, [pc, #32]	@ (800c984 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c962:	4b09      	ldr	r3, [pc, #36]	@ (800c988 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c964:	0018      	movs	r0, r3
 800c966:	f7ff fde1 	bl	800c52c <USBD_GetString>
 800c96a:	e005      	b.n	800c978 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c96c:	683a      	ldr	r2, [r7, #0]
 800c96e:	4905      	ldr	r1, [pc, #20]	@ (800c984 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c970:	4b05      	ldr	r3, [pc, #20]	@ (800c988 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c972:	0018      	movs	r0, r3
 800c974:	f7ff fdda 	bl	800c52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c978:	4b02      	ldr	r3, [pc, #8]	@ (800c984 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800c97a:	0018      	movs	r0, r3
 800c97c:	46bd      	mov	sp, r7
 800c97e:	b002      	add	sp, #8
 800c980:	bd80      	pop	{r7, pc}
 800c982:	46c0      	nop			@ (mov r8, r8)
 800c984:	2000095c 	.word	0x2000095c
 800c988:	080104ac 	.word	0x080104ac

0800c98c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c992:	4b10      	ldr	r3, [pc, #64]	@ (800c9d4 <Get_SerialNum+0x48>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c998:	4b0f      	ldr	r3, [pc, #60]	@ (800c9d8 <Get_SerialNum+0x4c>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c99e:	4b0f      	ldr	r3, [pc, #60]	@ (800c9dc <Get_SerialNum+0x50>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	18d3      	adds	r3, r2, r3
 800c9aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00b      	beq.n	800c9ca <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c9b2:	490b      	ldr	r1, [pc, #44]	@ (800c9e0 <Get_SerialNum+0x54>)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2208      	movs	r2, #8
 800c9b8:	0018      	movs	r0, r3
 800c9ba:	f000 f815 	bl	800c9e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c9be:	4909      	ldr	r1, [pc, #36]	@ (800c9e4 <Get_SerialNum+0x58>)
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	2204      	movs	r2, #4
 800c9c4:	0018      	movs	r0, r3
 800c9c6:	f000 f80f 	bl	800c9e8 <IntToUnicode>
  }
}
 800c9ca:	46c0      	nop			@ (mov r8, r8)
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	b004      	add	sp, #16
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	46c0      	nop			@ (mov r8, r8)
 800c9d4:	1ffff7ac 	.word	0x1ffff7ac
 800c9d8:	1ffff7b0 	.word	0x1ffff7b0
 800c9dc:	1ffff7b4 	.word	0x1ffff7b4
 800c9e0:	20000176 	.word	0x20000176
 800c9e4:	20000186 	.word	0x20000186

0800c9e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	1dfb      	adds	r3, r7, #7
 800c9f4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800c9f6:	2117      	movs	r1, #23
 800c9f8:	187b      	adds	r3, r7, r1
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800c9fe:	187b      	adds	r3, r7, r1
 800ca00:	2200      	movs	r2, #0
 800ca02:	701a      	strb	r2, [r3, #0]
 800ca04:	e02f      	b.n	800ca66 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	0f1b      	lsrs	r3, r3, #28
 800ca0a:	2b09      	cmp	r3, #9
 800ca0c:	d80d      	bhi.n	800ca2a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	0f1b      	lsrs	r3, r3, #28
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	2317      	movs	r3, #23
 800ca16:	18fb      	adds	r3, r7, r3
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	005b      	lsls	r3, r3, #1
 800ca1c:	0019      	movs	r1, r3
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	185b      	adds	r3, r3, r1
 800ca22:	3230      	adds	r2, #48	@ 0x30
 800ca24:	b2d2      	uxtb	r2, r2
 800ca26:	701a      	strb	r2, [r3, #0]
 800ca28:	e00c      	b.n	800ca44 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	0f1b      	lsrs	r3, r3, #28
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	2317      	movs	r3, #23
 800ca32:	18fb      	adds	r3, r7, r3
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	0019      	movs	r1, r3
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	185b      	adds	r3, r3, r1
 800ca3e:	3237      	adds	r2, #55	@ 0x37
 800ca40:	b2d2      	uxtb	r2, r2
 800ca42:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	011b      	lsls	r3, r3, #4
 800ca48:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca4a:	2117      	movs	r1, #23
 800ca4c:	187b      	adds	r3, r7, r1
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	005b      	lsls	r3, r3, #1
 800ca52:	3301      	adds	r3, #1
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	18d3      	adds	r3, r2, r3
 800ca58:	2200      	movs	r2, #0
 800ca5a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca5c:	187b      	adds	r3, r7, r1
 800ca5e:	781a      	ldrb	r2, [r3, #0]
 800ca60:	187b      	adds	r3, r7, r1
 800ca62:	3201      	adds	r2, #1
 800ca64:	701a      	strb	r2, [r3, #0]
 800ca66:	2317      	movs	r3, #23
 800ca68:	18fa      	adds	r2, r7, r3
 800ca6a:	1dfb      	adds	r3, r7, #7
 800ca6c:	7812      	ldrb	r2, [r2, #0]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d3c8      	bcc.n	800ca06 <IntToUnicode+0x1e>
  }
}
 800ca74:	46c0      	nop			@ (mov r8, r8)
 800ca76:	46c0      	nop			@ (mov r8, r8)
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	b006      	add	sp, #24
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a0e      	ldr	r2, [pc, #56]	@ (800cac8 <HAL_PCD_MspInit+0x48>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d115      	bne.n	800cabe <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca92:	4b0e      	ldr	r3, [pc, #56]	@ (800cacc <HAL_PCD_MspInit+0x4c>)
 800ca94:	69da      	ldr	r2, [r3, #28]
 800ca96:	4b0d      	ldr	r3, [pc, #52]	@ (800cacc <HAL_PCD_MspInit+0x4c>)
 800ca98:	2180      	movs	r1, #128	@ 0x80
 800ca9a:	0409      	lsls	r1, r1, #16
 800ca9c:	430a      	orrs	r2, r1
 800ca9e:	61da      	str	r2, [r3, #28]
 800caa0:	4b0a      	ldr	r3, [pc, #40]	@ (800cacc <HAL_PCD_MspInit+0x4c>)
 800caa2:	69da      	ldr	r2, [r3, #28]
 800caa4:	2380      	movs	r3, #128	@ 0x80
 800caa6:	041b      	lsls	r3, r3, #16
 800caa8:	4013      	ands	r3, r2
 800caaa:	60fb      	str	r3, [r7, #12]
 800caac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800caae:	2200      	movs	r2, #0
 800cab0:	2100      	movs	r1, #0
 800cab2:	201f      	movs	r0, #31
 800cab4:	f7f7 fa74 	bl	8003fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800cab8:	201f      	movs	r0, #31
 800caba:	f7f7 fa86 	bl	8003fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cabe:	46c0      	nop			@ (mov r8, r8)
 800cac0:	46bd      	mov	sp, r7
 800cac2:	b004      	add	sp, #16
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	46c0      	nop			@ (mov r8, r8)
 800cac8:	40005c00 	.word	0x40005c00
 800cacc:	40021000 	.word	0x40021000

0800cad0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	23b6      	movs	r3, #182	@ 0xb6
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	58d2      	ldr	r2, [r2, r3]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	21a6      	movs	r1, #166	@ 0xa6
 800cae4:	0089      	lsls	r1, r1, #2
 800cae6:	468c      	mov	ip, r1
 800cae8:	4463      	add	r3, ip
 800caea:	0019      	movs	r1, r3
 800caec:	0010      	movs	r0, r2
 800caee:	f7fe fcb3 	bl	800b458 <USBD_LL_SetupStage>
}
 800caf2:	46c0      	nop			@ (mov r8, r8)
 800caf4:	46bd      	mov	sp, r7
 800caf6:	b002      	add	sp, #8
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cafa:	b590      	push	{r4, r7, lr}
 800cafc:	b083      	sub	sp, #12
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	000a      	movs	r2, r1
 800cb04:	1cfb      	adds	r3, r7, #3
 800cb06:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	23b6      	movs	r3, #182	@ 0xb6
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	58d4      	ldr	r4, [r2, r3]
 800cb10:	1cfb      	adds	r3, r7, #3
 800cb12:	781a      	ldrb	r2, [r3, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	23b2      	movs	r3, #178	@ 0xb2
 800cb18:	0059      	lsls	r1, r3, #1
 800cb1a:	0013      	movs	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	189b      	adds	r3, r3, r2
 800cb20:	00db      	lsls	r3, r3, #3
 800cb22:	18c3      	adds	r3, r0, r3
 800cb24:	185b      	adds	r3, r3, r1
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	1cfb      	adds	r3, r7, #3
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	0019      	movs	r1, r3
 800cb2e:	0020      	movs	r0, r4
 800cb30:	f7fe fcf0 	bl	800b514 <USBD_LL_DataOutStage>
}
 800cb34:	46c0      	nop			@ (mov r8, r8)
 800cb36:	46bd      	mov	sp, r7
 800cb38:	b003      	add	sp, #12
 800cb3a:	bd90      	pop	{r4, r7, pc}

0800cb3c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	000a      	movs	r2, r1
 800cb46:	1cfb      	adds	r3, r7, #3
 800cb48:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	23b6      	movs	r3, #182	@ 0xb6
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	58d0      	ldr	r0, [r2, r3]
 800cb52:	1cfb      	adds	r3, r7, #3
 800cb54:	781a      	ldrb	r2, [r3, #0]
 800cb56:	6879      	ldr	r1, [r7, #4]
 800cb58:	0013      	movs	r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	189b      	adds	r3, r3, r2
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	18cb      	adds	r3, r1, r3
 800cb62:	3324      	adds	r3, #36	@ 0x24
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	1cfb      	adds	r3, r7, #3
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	0019      	movs	r1, r3
 800cb6c:	f7fe fd54 	bl	800b618 <USBD_LL_DataInStage>
}
 800cb70:	46c0      	nop			@ (mov r8, r8)
 800cb72:	46bd      	mov	sp, r7
 800cb74:	b002      	add	sp, #8
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	23b6      	movs	r3, #182	@ 0xb6
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	58d3      	ldr	r3, [r2, r3]
 800cb88:	0018      	movs	r0, r3
 800cb8a:	f7fe fe8b 	bl	800b8a4 <USBD_LL_SOF>
}
 800cb8e:	46c0      	nop			@ (mov r8, r8)
 800cb90:	46bd      	mov	sp, r7
 800cb92:	b002      	add	sp, #8
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b084      	sub	sp, #16
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb9e:	230f      	movs	r3, #15
 800cba0:	18fb      	adds	r3, r7, r3
 800cba2:	2201      	movs	r2, #1
 800cba4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	795b      	ldrb	r3, [r3, #5]
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d001      	beq.n	800cbb2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800cbae:	f7f6 f8cb 	bl	8002d48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	23b6      	movs	r3, #182	@ 0xb6
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	58d2      	ldr	r2, [r2, r3]
 800cbba:	230f      	movs	r3, #15
 800cbbc:	18fb      	adds	r3, r7, r3
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	0019      	movs	r1, r3
 800cbc2:	0010      	movs	r0, r2
 800cbc4:	f7fe fe2d 	bl	800b822 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	23b6      	movs	r3, #182	@ 0xb6
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	58d3      	ldr	r3, [r2, r3]
 800cbd0:	0018      	movs	r0, r3
 800cbd2:	f7fe fdde 	bl	800b792 <USBD_LL_Reset>
}
 800cbd6:	46c0      	nop			@ (mov r8, r8)
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	b004      	add	sp, #16
 800cbdc:	bd80      	pop	{r7, pc}
	...

0800cbe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	23b6      	movs	r3, #182	@ 0xb6
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	58d3      	ldr	r3, [r2, r3]
 800cbf0:	0018      	movs	r0, r3
 800cbf2:	f7fe fe27 	bl	800b844 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	7a5b      	ldrb	r3, [r3, #9]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d005      	beq.n	800cc0a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbfe:	4b05      	ldr	r3, [pc, #20]	@ (800cc14 <HAL_PCD_SuspendCallback+0x34>)
 800cc00:	691a      	ldr	r2, [r3, #16]
 800cc02:	4b04      	ldr	r3, [pc, #16]	@ (800cc14 <HAL_PCD_SuspendCallback+0x34>)
 800cc04:	2106      	movs	r1, #6
 800cc06:	430a      	orrs	r2, r1
 800cc08:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800cc0a:	46c0      	nop			@ (mov r8, r8)
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	b002      	add	sp, #8
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	46c0      	nop			@ (mov r8, r8)
 800cc14:	e000ed00 	.word	0xe000ed00

0800cc18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	7a5b      	ldrb	r3, [r3, #9]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d007      	beq.n	800cc38 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc28:	4b09      	ldr	r3, [pc, #36]	@ (800cc50 <HAL_PCD_ResumeCallback+0x38>)
 800cc2a:	691a      	ldr	r2, [r3, #16]
 800cc2c:	4b08      	ldr	r3, [pc, #32]	@ (800cc50 <HAL_PCD_ResumeCallback+0x38>)
 800cc2e:	2106      	movs	r1, #6
 800cc30:	438a      	bics	r2, r1
 800cc32:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800cc34:	f000 fa20 	bl	800d078 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	23b6      	movs	r3, #182	@ 0xb6
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	58d3      	ldr	r3, [r2, r3]
 800cc40:	0018      	movs	r0, r3
 800cc42:	f7fe fe17 	bl	800b874 <USBD_LL_Resume>
}
 800cc46:	46c0      	nop			@ (mov r8, r8)
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	b002      	add	sp, #8
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	46c0      	nop			@ (mov r8, r8)
 800cc50:	e000ed00 	.word	0xe000ed00

0800cc54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cc5c:	4a27      	ldr	r2, [pc, #156]	@ (800ccfc <USBD_LL_Init+0xa8>)
 800cc5e:	23b6      	movs	r3, #182	@ 0xb6
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	6879      	ldr	r1, [r7, #4]
 800cc64:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	23b0      	movs	r3, #176	@ 0xb0
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4923      	ldr	r1, [pc, #140]	@ (800ccfc <USBD_LL_Init+0xa8>)
 800cc6e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800cc70:	4b22      	ldr	r3, [pc, #136]	@ (800ccfc <USBD_LL_Init+0xa8>)
 800cc72:	4a23      	ldr	r2, [pc, #140]	@ (800cd00 <USBD_LL_Init+0xac>)
 800cc74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cc76:	4b21      	ldr	r3, [pc, #132]	@ (800ccfc <USBD_LL_Init+0xa8>)
 800cc78:	2208      	movs	r2, #8
 800cc7a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc7c:	4b1f      	ldr	r3, [pc, #124]	@ (800ccfc <USBD_LL_Init+0xa8>)
 800cc7e:	2202      	movs	r2, #2
 800cc80:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cc82:	4b1e      	ldr	r3, [pc, #120]	@ (800ccfc <USBD_LL_Init+0xa8>)
 800cc84:	2202      	movs	r2, #2
 800cc86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cc88:	4b1c      	ldr	r3, [pc, #112]	@ (800ccfc <USBD_LL_Init+0xa8>)
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc8e:	4b1b      	ldr	r3, [pc, #108]	@ (800ccfc <USBD_LL_Init+0xa8>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc94:	4b19      	ldr	r3, [pc, #100]	@ (800ccfc <USBD_LL_Init+0xa8>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc9a:	4b18      	ldr	r3, [pc, #96]	@ (800ccfc <USBD_LL_Init+0xa8>)
 800cc9c:	0018      	movs	r0, r3
 800cc9e:	f7f7 fd41 	bl	8004724 <HAL_PCD_Init>
 800cca2:	1e03      	subs	r3, r0, #0
 800cca4:	d001      	beq.n	800ccaa <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800cca6:	f7f6 f84f 	bl	8002d48 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	23b0      	movs	r3, #176	@ 0xb0
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	58d0      	ldr	r0, [r2, r3]
 800ccb2:	2318      	movs	r3, #24
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	f7f9 fada 	bl	8006270 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	23b0      	movs	r3, #176	@ 0xb0
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	58d0      	ldr	r0, [r2, r3]
 800ccc4:	2358      	movs	r3, #88	@ 0x58
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	2180      	movs	r1, #128	@ 0x80
 800ccca:	f7f9 fad1 	bl	8006270 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	23b0      	movs	r3, #176	@ 0xb0
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	58d0      	ldr	r0, [r2, r3]
 800ccd6:	2398      	movs	r3, #152	@ 0x98
 800ccd8:	2200      	movs	r2, #0
 800ccda:	2181      	movs	r1, #129	@ 0x81
 800ccdc:	f7f9 fac8 	bl	8006270 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	23b0      	movs	r3, #176	@ 0xb0
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	58d0      	ldr	r0, [r2, r3]
 800cce8:	23d8      	movs	r3, #216	@ 0xd8
 800ccea:	2200      	movs	r2, #0
 800ccec:	2101      	movs	r1, #1
 800ccee:	f7f9 fabf 	bl	8006270 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	0018      	movs	r0, r3
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	b002      	add	sp, #8
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	20000b5c 	.word	0x20000b5c
 800cd00:	40005c00 	.word	0x40005c00

0800cd04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0c:	210f      	movs	r1, #15
 800cd0e:	187b      	adds	r3, r7, r1
 800cd10:	2200      	movs	r2, #0
 800cd12:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd14:	260e      	movs	r6, #14
 800cd16:	19bb      	adds	r3, r7, r6
 800cd18:	2200      	movs	r2, #0
 800cd1a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	23b0      	movs	r3, #176	@ 0xb0
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	58d3      	ldr	r3, [r2, r3]
 800cd24:	000d      	movs	r5, r1
 800cd26:	187c      	adds	r4, r7, r1
 800cd28:	0018      	movs	r0, r3
 800cd2a:	f7f7 fdef 	bl	800490c <HAL_PCD_Start>
 800cd2e:	0003      	movs	r3, r0
 800cd30:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd32:	19bc      	adds	r4, r7, r6
 800cd34:	197b      	adds	r3, r7, r5
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	0018      	movs	r0, r3
 800cd3a:	f000 f9a4 	bl	800d086 <USBD_Get_USB_Status>
 800cd3e:	0003      	movs	r3, r0
 800cd40:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cd42:	19bb      	adds	r3, r7, r6
 800cd44:	781b      	ldrb	r3, [r3, #0]
}
 800cd46:	0018      	movs	r0, r3
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	b005      	add	sp, #20
 800cd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd50:	b085      	sub	sp, #20
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	000c      	movs	r4, r1
 800cd58:	0010      	movs	r0, r2
 800cd5a:	0019      	movs	r1, r3
 800cd5c:	1cfb      	adds	r3, r7, #3
 800cd5e:	1c22      	adds	r2, r4, #0
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	1cbb      	adds	r3, r7, #2
 800cd64:	1c02      	adds	r2, r0, #0
 800cd66:	701a      	strb	r2, [r3, #0]
 800cd68:	003b      	movs	r3, r7
 800cd6a:	1c0a      	adds	r2, r1, #0
 800cd6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd6e:	260f      	movs	r6, #15
 800cd70:	19bb      	adds	r3, r7, r6
 800cd72:	2200      	movs	r2, #0
 800cd74:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd76:	250e      	movs	r5, #14
 800cd78:	197b      	adds	r3, r7, r5
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	23b0      	movs	r3, #176	@ 0xb0
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	58d0      	ldr	r0, [r2, r3]
 800cd86:	19bc      	adds	r4, r7, r6
 800cd88:	1cbb      	adds	r3, r7, #2
 800cd8a:	781d      	ldrb	r5, [r3, #0]
 800cd8c:	003b      	movs	r3, r7
 800cd8e:	881a      	ldrh	r2, [r3, #0]
 800cd90:	1cfb      	adds	r3, r7, #3
 800cd92:	7819      	ldrb	r1, [r3, #0]
 800cd94:	002b      	movs	r3, r5
 800cd96:	f7f7 ff4d 	bl	8004c34 <HAL_PCD_EP_Open>
 800cd9a:	0003      	movs	r3, r0
 800cd9c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd9e:	250e      	movs	r5, #14
 800cda0:	197c      	adds	r4, r7, r5
 800cda2:	19bb      	adds	r3, r7, r6
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	0018      	movs	r0, r3
 800cda8:	f000 f96d 	bl	800d086 <USBD_Get_USB_Status>
 800cdac:	0003      	movs	r3, r0
 800cdae:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cdb0:	197b      	adds	r3, r7, r5
 800cdb2:	781b      	ldrb	r3, [r3, #0]
}
 800cdb4:	0018      	movs	r0, r3
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	b005      	add	sp, #20
 800cdba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cdbc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	000a      	movs	r2, r1
 800cdc6:	1cfb      	adds	r3, r7, #3
 800cdc8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdca:	210f      	movs	r1, #15
 800cdcc:	187b      	adds	r3, r7, r1
 800cdce:	2200      	movs	r2, #0
 800cdd0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd2:	260e      	movs	r6, #14
 800cdd4:	19bb      	adds	r3, r7, r6
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	23b0      	movs	r3, #176	@ 0xb0
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	58d2      	ldr	r2, [r2, r3]
 800cde2:	000d      	movs	r5, r1
 800cde4:	187c      	adds	r4, r7, r1
 800cde6:	1cfb      	adds	r3, r7, #3
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	0019      	movs	r1, r3
 800cdec:	0010      	movs	r0, r2
 800cdee:	f7f7 ff90 	bl	8004d12 <HAL_PCD_EP_Close>
 800cdf2:	0003      	movs	r3, r0
 800cdf4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdf6:	19bc      	adds	r4, r7, r6
 800cdf8:	197b      	adds	r3, r7, r5
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	0018      	movs	r0, r3
 800cdfe:	f000 f942 	bl	800d086 <USBD_Get_USB_Status>
 800ce02:	0003      	movs	r3, r0
 800ce04:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ce06:	19bb      	adds	r3, r7, r6
 800ce08:	781b      	ldrb	r3, [r3, #0]
}
 800ce0a:	0018      	movs	r0, r3
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	b005      	add	sp, #20
 800ce10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce12 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce14:	b085      	sub	sp, #20
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
 800ce1a:	000a      	movs	r2, r1
 800ce1c:	1cfb      	adds	r3, r7, #3
 800ce1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce20:	210f      	movs	r1, #15
 800ce22:	187b      	adds	r3, r7, r1
 800ce24:	2200      	movs	r2, #0
 800ce26:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce28:	260e      	movs	r6, #14
 800ce2a:	19bb      	adds	r3, r7, r6
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	23b0      	movs	r3, #176	@ 0xb0
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	58d2      	ldr	r2, [r2, r3]
 800ce38:	000d      	movs	r5, r1
 800ce3a:	187c      	adds	r4, r7, r1
 800ce3c:	1cfb      	adds	r3, r7, #3
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	0019      	movs	r1, r3
 800ce42:	0010      	movs	r0, r2
 800ce44:	f7f8 f829 	bl	8004e9a <HAL_PCD_EP_SetStall>
 800ce48:	0003      	movs	r3, r0
 800ce4a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce4c:	19bc      	adds	r4, r7, r6
 800ce4e:	197b      	adds	r3, r7, r5
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	0018      	movs	r0, r3
 800ce54:	f000 f917 	bl	800d086 <USBD_Get_USB_Status>
 800ce58:	0003      	movs	r3, r0
 800ce5a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ce5c:	19bb      	adds	r3, r7, r6
 800ce5e:	781b      	ldrb	r3, [r3, #0]
}
 800ce60:	0018      	movs	r0, r3
 800ce62:	46bd      	mov	sp, r7
 800ce64:	b005      	add	sp, #20
 800ce66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce68 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	000a      	movs	r2, r1
 800ce72:	1cfb      	adds	r3, r7, #3
 800ce74:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce76:	210f      	movs	r1, #15
 800ce78:	187b      	adds	r3, r7, r1
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce7e:	260e      	movs	r6, #14
 800ce80:	19bb      	adds	r3, r7, r6
 800ce82:	2200      	movs	r2, #0
 800ce84:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	23b0      	movs	r3, #176	@ 0xb0
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	58d2      	ldr	r2, [r2, r3]
 800ce8e:	000d      	movs	r5, r1
 800ce90:	187c      	adds	r4, r7, r1
 800ce92:	1cfb      	adds	r3, r7, #3
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	0019      	movs	r1, r3
 800ce98:	0010      	movs	r0, r2
 800ce9a:	f7f8 f85a 	bl	8004f52 <HAL_PCD_EP_ClrStall>
 800ce9e:	0003      	movs	r3, r0
 800cea0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cea2:	19bc      	adds	r4, r7, r6
 800cea4:	197b      	adds	r3, r7, r5
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	0018      	movs	r0, r3
 800ceaa:	f000 f8ec 	bl	800d086 <USBD_Get_USB_Status>
 800ceae:	0003      	movs	r3, r0
 800ceb0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ceb2:	19bb      	adds	r3, r7, r6
 800ceb4:	781b      	ldrb	r3, [r3, #0]
}
 800ceb6:	0018      	movs	r0, r3
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	b005      	add	sp, #20
 800cebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cebe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b084      	sub	sp, #16
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
 800cec6:	000a      	movs	r2, r1
 800cec8:	1cfb      	adds	r3, r7, #3
 800ceca:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	23b0      	movs	r3, #176	@ 0xb0
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	58d3      	ldr	r3, [r2, r3]
 800ced4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ced6:	1cfb      	adds	r3, r7, #3
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	b25b      	sxtb	r3, r3
 800cedc:	2b00      	cmp	r3, #0
 800cede:	da0c      	bge.n	800cefa <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cee0:	1cfb      	adds	r3, r7, #3
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	227f      	movs	r2, #127	@ 0x7f
 800cee6:	401a      	ands	r2, r3
 800cee8:	68f9      	ldr	r1, [r7, #12]
 800ceea:	0013      	movs	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	189b      	adds	r3, r3, r2
 800cef0:	00db      	lsls	r3, r3, #3
 800cef2:	18cb      	adds	r3, r1, r3
 800cef4:	3312      	adds	r3, #18
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	e00d      	b.n	800cf16 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cefa:	1cfb      	adds	r3, r7, #3
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	227f      	movs	r2, #127	@ 0x7f
 800cf00:	401a      	ands	r2, r3
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	23a9      	movs	r3, #169	@ 0xa9
 800cf06:	0059      	lsls	r1, r3, #1
 800cf08:	0013      	movs	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	189b      	adds	r3, r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	18c3      	adds	r3, r0, r3
 800cf12:	185b      	adds	r3, r3, r1
 800cf14:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf16:	0018      	movs	r0, r3
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	b004      	add	sp, #16
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf20:	b085      	sub	sp, #20
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
 800cf26:	000a      	movs	r2, r1
 800cf28:	1cfb      	adds	r3, r7, #3
 800cf2a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf2c:	210f      	movs	r1, #15
 800cf2e:	187b      	adds	r3, r7, r1
 800cf30:	2200      	movs	r2, #0
 800cf32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf34:	260e      	movs	r6, #14
 800cf36:	19bb      	adds	r3, r7, r6
 800cf38:	2200      	movs	r2, #0
 800cf3a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	23b0      	movs	r3, #176	@ 0xb0
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	58d2      	ldr	r2, [r2, r3]
 800cf44:	000d      	movs	r5, r1
 800cf46:	187c      	adds	r4, r7, r1
 800cf48:	1cfb      	adds	r3, r7, #3
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	0019      	movs	r1, r3
 800cf4e:	0010      	movs	r0, r2
 800cf50:	f7f7 fe46 	bl	8004be0 <HAL_PCD_SetAddress>
 800cf54:	0003      	movs	r3, r0
 800cf56:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf58:	19bc      	adds	r4, r7, r6
 800cf5a:	197b      	adds	r3, r7, r5
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	0018      	movs	r0, r3
 800cf60:	f000 f891 	bl	800d086 <USBD_Get_USB_Status>
 800cf64:	0003      	movs	r3, r0
 800cf66:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cf68:	19bb      	adds	r3, r7, r6
 800cf6a:	781b      	ldrb	r3, [r3, #0]
}
 800cf6c:	0018      	movs	r0, r3
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	b005      	add	sp, #20
 800cf72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cf74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf76:	b087      	sub	sp, #28
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	0008      	movs	r0, r1
 800cf7e:	607a      	str	r2, [r7, #4]
 800cf80:	0019      	movs	r1, r3
 800cf82:	230b      	movs	r3, #11
 800cf84:	18fb      	adds	r3, r7, r3
 800cf86:	1c02      	adds	r2, r0, #0
 800cf88:	701a      	strb	r2, [r3, #0]
 800cf8a:	2408      	movs	r4, #8
 800cf8c:	193b      	adds	r3, r7, r4
 800cf8e:	1c0a      	adds	r2, r1, #0
 800cf90:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf92:	2117      	movs	r1, #23
 800cf94:	187b      	adds	r3, r7, r1
 800cf96:	2200      	movs	r2, #0
 800cf98:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf9a:	2516      	movs	r5, #22
 800cf9c:	197b      	adds	r3, r7, r5
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	23b0      	movs	r3, #176	@ 0xb0
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	58d0      	ldr	r0, [r2, r3]
 800cfaa:	193b      	adds	r3, r7, r4
 800cfac:	881d      	ldrh	r5, [r3, #0]
 800cfae:	000e      	movs	r6, r1
 800cfb0:	187c      	adds	r4, r7, r1
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	230b      	movs	r3, #11
 800cfb6:	18fb      	adds	r3, r7, r3
 800cfb8:	7819      	ldrb	r1, [r3, #0]
 800cfba:	002b      	movs	r3, r5
 800cfbc:	f7f7 ff31 	bl	8004e22 <HAL_PCD_EP_Transmit>
 800cfc0:	0003      	movs	r3, r0
 800cfc2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfc4:	2516      	movs	r5, #22
 800cfc6:	197c      	adds	r4, r7, r5
 800cfc8:	19bb      	adds	r3, r7, r6
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	0018      	movs	r0, r3
 800cfce:	f000 f85a 	bl	800d086 <USBD_Get_USB_Status>
 800cfd2:	0003      	movs	r3, r0
 800cfd4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cfd6:	197b      	adds	r3, r7, r5
 800cfd8:	781b      	ldrb	r3, [r3, #0]
}
 800cfda:	0018      	movs	r0, r3
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	b007      	add	sp, #28
 800cfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cfe2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cfe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfe4:	b087      	sub	sp, #28
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	60f8      	str	r0, [r7, #12]
 800cfea:	0008      	movs	r0, r1
 800cfec:	607a      	str	r2, [r7, #4]
 800cfee:	0019      	movs	r1, r3
 800cff0:	230b      	movs	r3, #11
 800cff2:	18fb      	adds	r3, r7, r3
 800cff4:	1c02      	adds	r2, r0, #0
 800cff6:	701a      	strb	r2, [r3, #0]
 800cff8:	2408      	movs	r4, #8
 800cffa:	193b      	adds	r3, r7, r4
 800cffc:	1c0a      	adds	r2, r1, #0
 800cffe:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d000:	2117      	movs	r1, #23
 800d002:	187b      	adds	r3, r7, r1
 800d004:	2200      	movs	r2, #0
 800d006:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d008:	2516      	movs	r5, #22
 800d00a:	197b      	adds	r3, r7, r5
 800d00c:	2200      	movs	r2, #0
 800d00e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	23b0      	movs	r3, #176	@ 0xb0
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	58d0      	ldr	r0, [r2, r3]
 800d018:	193b      	adds	r3, r7, r4
 800d01a:	881d      	ldrh	r5, [r3, #0]
 800d01c:	000e      	movs	r6, r1
 800d01e:	187c      	adds	r4, r7, r1
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	230b      	movs	r3, #11
 800d024:	18fb      	adds	r3, r7, r3
 800d026:	7819      	ldrb	r1, [r3, #0]
 800d028:	002b      	movs	r3, r5
 800d02a:	f7f7 fec3 	bl	8004db4 <HAL_PCD_EP_Receive>
 800d02e:	0003      	movs	r3, r0
 800d030:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d032:	2516      	movs	r5, #22
 800d034:	197c      	adds	r4, r7, r5
 800d036:	19bb      	adds	r3, r7, r6
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	0018      	movs	r0, r3
 800d03c:	f000 f823 	bl	800d086 <USBD_Get_USB_Status>
 800d040:	0003      	movs	r3, r0
 800d042:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d044:	197b      	adds	r3, r7, r5
 800d046:	781b      	ldrb	r3, [r3, #0]
}
 800d048:	0018      	movs	r0, r3
 800d04a:	46bd      	mov	sp, r7
 800d04c:	b007      	add	sp, #28
 800d04e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d050 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d058:	4b02      	ldr	r3, [pc, #8]	@ (800d064 <USBD_static_malloc+0x14>)
}
 800d05a:	0018      	movs	r0, r3
 800d05c:	46bd      	mov	sp, r7
 800d05e:	b002      	add	sp, #8
 800d060:	bd80      	pop	{r7, pc}
 800d062:	46c0      	nop			@ (mov r8, r8)
 800d064:	20000e38 	.word	0x20000e38

0800d068 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]

}
 800d070:	46c0      	nop			@ (mov r8, r8)
 800d072:	46bd      	mov	sp, r7
 800d074:	b002      	add	sp, #8
 800d076:	bd80      	pop	{r7, pc}

0800d078 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d07c:	f7f5 fb10 	bl	80026a0 <SystemClock_Config>
}
 800d080:	46c0      	nop			@ (mov r8, r8)
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	0002      	movs	r2, r0
 800d08e:	1dfb      	adds	r3, r7, #7
 800d090:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d092:	230f      	movs	r3, #15
 800d094:	18fb      	adds	r3, r7, r3
 800d096:	2200      	movs	r2, #0
 800d098:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d09a:	1dfb      	adds	r3, r7, #7
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	d017      	beq.n	800d0d2 <USBD_Get_USB_Status+0x4c>
 800d0a2:	dc1b      	bgt.n	800d0dc <USBD_Get_USB_Status+0x56>
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d00f      	beq.n	800d0c8 <USBD_Get_USB_Status+0x42>
 800d0a8:	dc18      	bgt.n	800d0dc <USBD_Get_USB_Status+0x56>
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d002      	beq.n	800d0b4 <USBD_Get_USB_Status+0x2e>
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d005      	beq.n	800d0be <USBD_Get_USB_Status+0x38>
 800d0b2:	e013      	b.n	800d0dc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d0b4:	230f      	movs	r3, #15
 800d0b6:	18fb      	adds	r3, r7, r3
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	701a      	strb	r2, [r3, #0]
    break;
 800d0bc:	e013      	b.n	800d0e6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0be:	230f      	movs	r3, #15
 800d0c0:	18fb      	adds	r3, r7, r3
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	701a      	strb	r2, [r3, #0]
    break;
 800d0c6:	e00e      	b.n	800d0e6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0c8:	230f      	movs	r3, #15
 800d0ca:	18fb      	adds	r3, r7, r3
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	701a      	strb	r2, [r3, #0]
    break;
 800d0d0:	e009      	b.n	800d0e6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0d2:	230f      	movs	r3, #15
 800d0d4:	18fb      	adds	r3, r7, r3
 800d0d6:	2202      	movs	r2, #2
 800d0d8:	701a      	strb	r2, [r3, #0]
    break;
 800d0da:	e004      	b.n	800d0e6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d0dc:	230f      	movs	r3, #15
 800d0de:	18fb      	adds	r3, r7, r3
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	701a      	strb	r2, [r3, #0]
    break;
 800d0e4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800d0e6:	230f      	movs	r3, #15
 800d0e8:	18fb      	adds	r3, r7, r3
 800d0ea:	781b      	ldrb	r3, [r3, #0]
}
 800d0ec:	0018      	movs	r0, r3
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	b004      	add	sp, #16
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <SSD1322_API_command>:
//====================== command ========================//
/**
 *  @brief Sends command byte to SSD1322
 */
void SSD1322_API_command(uint8_t command)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	0002      	movs	r2, r0
 800d0fc:	1dfb      	adds	r3, r7, #7
 800d0fe:	701a      	strb	r2, [r3, #0]
	SSD1322_HW_drive_CS_low();
 800d100:	f000 fad4 	bl	800d6ac <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_low();
 800d104:	f000 faee 	bl	800d6e4 <SSD1322_HW_drive_DC_low>
	SSD1322_HW_SPI_send_byte(command);
 800d108:	1dfb      	adds	r3, r7, #7
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	0018      	movs	r0, r3
 800d10e:	f000 fb21 	bl	800d754 <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 800d112:	f000 fad9 	bl	800d6c8 <SSD1322_HW_drive_CS_high>
}
 800d116:	46c0      	nop			@ (mov r8, r8)
 800d118:	46bd      	mov	sp, r7
 800d11a:	b002      	add	sp, #8
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <SSD1322_API_data>:
//====================== data ========================//
/**
 *  @brief Sends data byte to SSD1322
 */
void SSD1322_API_data(uint8_t data)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b082      	sub	sp, #8
 800d122:	af00      	add	r7, sp, #0
 800d124:	0002      	movs	r2, r0
 800d126:	1dfb      	adds	r3, r7, #7
 800d128:	701a      	strb	r2, [r3, #0]
	SSD1322_HW_drive_CS_low();
 800d12a:	f000 fabf 	bl	800d6ac <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 800d12e:	f000 fae7 	bl	800d700 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_byte(data);
 800d132:	1dfb      	adds	r3, r7, #7
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	0018      	movs	r0, r3
 800d138:	f000 fb0c 	bl	800d754 <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 800d13c:	f000 fac4 	bl	800d6c8 <SSD1322_HW_drive_CS_high>
}
 800d140:	46c0      	nop			@ (mov r8, r8)
 800d142:	46bd      	mov	sp, r7
 800d144:	b002      	add	sp, #8
 800d146:	bd80      	pop	{r7, pc}

0800d148 <SSD1322_API_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void SSD1322_API_init()
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	af00      	add	r7, sp, #0
	SSD1322_HW_drive_RESET_low();  //Reset pin low
 800d14c:	f000 fae6 	bl	800d71c <SSD1322_HW_drive_RESET_low>
	SSD1322_HW_msDelay(1);                  //1ms delay
 800d150:	2001      	movs	r0, #1
 800d152:	f000 fb23 	bl	800d79c <SSD1322_HW_msDelay>
	SSD1322_HW_drive_RESET_high(); //Reset pin high
 800d156:	f000 faef 	bl	800d738 <SSD1322_HW_drive_RESET_high>
	SSD1322_HW_msDelay(50);                 //50ms delay
 800d15a:	2032      	movs	r0, #50	@ 0x32
 800d15c:	f000 fb1e 	bl	800d79c <SSD1322_HW_msDelay>
	SSD1322_API_command(0xFD);     //set Command unlock
 800d160:	20fd      	movs	r0, #253	@ 0xfd
 800d162:	f7ff ffc7 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x12);
 800d166:	2012      	movs	r0, #18
 800d168:	f7ff ffd9 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xAE);     //set display off
 800d16c:	20ae      	movs	r0, #174	@ 0xae
 800d16e:	f7ff ffc1 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_command(0xB3);     //set display clock divide ratio
 800d172:	20b3      	movs	r0, #179	@ 0xb3
 800d174:	f7ff ffbe 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x91);
 800d178:	2091      	movs	r0, #145	@ 0x91
 800d17a:	f7ff ffd0 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xCA);     //set multiplex ratio
 800d17e:	20ca      	movs	r0, #202	@ 0xca
 800d180:	f7ff ffb8 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x3F);
 800d184:	203f      	movs	r0, #63	@ 0x3f
 800d186:	f7ff ffca 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xA2);   //set display offset to 0
 800d18a:	20a2      	movs	r0, #162	@ 0xa2
 800d18c:	f7ff ffb2 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 800d190:	2000      	movs	r0, #0
 800d192:	f7ff ffc4 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xA1);   //start display start line to 0
 800d196:	20a1      	movs	r0, #161	@ 0xa1
 800d198:	f7ff ffac 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 800d19c:	2000      	movs	r0, #0
 800d19e:	f7ff ffbe 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xA0);   //set remap and dual COM Line Mode
 800d1a2:	20a0      	movs	r0, #160	@ 0xa0
 800d1a4:	f7ff ffa6 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x14);
 800d1a8:	2014      	movs	r0, #20
 800d1aa:	f7ff ffb8 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_data(0x11);
 800d1ae:	2011      	movs	r0, #17
 800d1b0:	f7ff ffb5 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xB5);   //disable IO input
 800d1b4:	20b5      	movs	r0, #181	@ 0xb5
 800d1b6:	f7ff ff9d 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	f7ff ffaf 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xAB);   //function select
 800d1c0:	20ab      	movs	r0, #171	@ 0xab
 800d1c2:	f7ff ff97 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x01);
 800d1c6:	2001      	movs	r0, #1
 800d1c8:	f7ff ffa9 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xB4);   //enable VSL extern
 800d1cc:	20b4      	movs	r0, #180	@ 0xb4
 800d1ce:	f7ff ff91 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0xA0);
 800d1d2:	20a0      	movs	r0, #160	@ 0xa0
 800d1d4:	f7ff ffa3 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_data(0xFD);
 800d1d8:	20fd      	movs	r0, #253	@ 0xfd
 800d1da:	f7ff ffa0 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xC1);   //set contrast current
 800d1de:	20c1      	movs	r0, #193	@ 0xc1
 800d1e0:	f7ff ff88 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0xFF);
 800d1e4:	20ff      	movs	r0, #255	@ 0xff
 800d1e6:	f7ff ff9a 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xC7);   //set master contrast current
 800d1ea:	20c7      	movs	r0, #199	@ 0xc7
 800d1ec:	f7ff ff82 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x0F);
 800d1f0:	200f      	movs	r0, #15
 800d1f2:	f7ff ff94 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xB9);   //default grayscale
 800d1f6:	20b9      	movs	r0, #185	@ 0xb9
 800d1f8:	f7ff ff7c 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_command(0xB1);   //set phase length
 800d1fc:	20b1      	movs	r0, #177	@ 0xb1
 800d1fe:	f7ff ff79 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0xE2);
 800d202:	20e2      	movs	r0, #226	@ 0xe2
 800d204:	f7ff ff8b 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xD1);   //enhance driving scheme capability
 800d208:	20d1      	movs	r0, #209	@ 0xd1
 800d20a:	f7ff ff73 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x82);
 800d20e:	2082      	movs	r0, #130	@ 0x82
 800d210:	f7ff ff85 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_data(0x20);
 800d214:	2020      	movs	r0, #32
 800d216:	f7ff ff82 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xBB);   //first pre charge voltage
 800d21a:	20bb      	movs	r0, #187	@ 0xbb
 800d21c:	f7ff ff6a 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x1F);
 800d220:	201f      	movs	r0, #31
 800d222:	f7ff ff7c 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xB6);   //second pre charge voltage
 800d226:	20b6      	movs	r0, #182	@ 0xb6
 800d228:	f7ff ff64 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x08);
 800d22c:	2008      	movs	r0, #8
 800d22e:	f7ff ff76 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xBE);   //VCOMH
 800d232:	20be      	movs	r0, #190	@ 0xbe
 800d234:	f7ff ff5e 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(0x07);
 800d238:	2007      	movs	r0, #7
 800d23a:	f7ff ff70 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(0xA6);   //set normal display mode
 800d23e:	20a6      	movs	r0, #166	@ 0xa6
 800d240:	f7ff ff58 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_command(0xA9);   //no partial mode
 800d244:	20a9      	movs	r0, #169	@ 0xa9
 800d246:	f7ff ff55 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_HW_msDelay(10);               //stabilize VDD
 800d24a:	200a      	movs	r0, #10
 800d24c:	f000 faa6 	bl	800d79c <SSD1322_HW_msDelay>
	SSD1322_API_command(0xAF);   //display on
 800d250:	20af      	movs	r0, #175	@ 0xaf
 800d252:	f7ff ff4f 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_HW_msDelay(50);               //stabilize VDD
 800d256:	2032      	movs	r0, #50	@ 0x32
 800d258:	f000 faa0 	bl	800d79c <SSD1322_HW_msDelay>
}
 800d25c:	46c0      	nop			@ (mov r8, r8)
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}

0800d262 <SSD1322_API_set_window>:
 *  @param[in] end_column
 *  @param[in] start_row
 *  @param[in] end_row
 */
void SSD1322_API_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
{
 800d262:	b5b0      	push	{r4, r5, r7, lr}
 800d264:	b082      	sub	sp, #8
 800d266:	af00      	add	r7, sp, #0
 800d268:	0005      	movs	r5, r0
 800d26a:	000c      	movs	r4, r1
 800d26c:	0010      	movs	r0, r2
 800d26e:	0019      	movs	r1, r3
 800d270:	1dfb      	adds	r3, r7, #7
 800d272:	1c2a      	adds	r2, r5, #0
 800d274:	701a      	strb	r2, [r3, #0]
 800d276:	1dbb      	adds	r3, r7, #6
 800d278:	1c22      	adds	r2, r4, #0
 800d27a:	701a      	strb	r2, [r3, #0]
 800d27c:	1d7b      	adds	r3, r7, #5
 800d27e:	1c02      	adds	r2, r0, #0
 800d280:	701a      	strb	r2, [r3, #0]
 800d282:	1d3b      	adds	r3, r7, #4
 800d284:	1c0a      	adds	r2, r1, #0
 800d286:	701a      	strb	r2, [r3, #0]
	SSD1322_API_command(SET_COLUMN_ADDR);  //set columns range
 800d288:	2015      	movs	r0, #21
 800d28a:	f7ff ff33 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(28+start_column);
 800d28e:	1dfb      	adds	r3, r7, #7
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	331c      	adds	r3, #28
 800d294:	b2db      	uxtb	r3, r3
 800d296:	0018      	movs	r0, r3
 800d298:	f7ff ff41 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_data(28+end_column);
 800d29c:	1dbb      	adds	r3, r7, #6
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	331c      	adds	r3, #28
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	f7ff ff3a 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_command(SET_ROW_ADDR);  //set rows range
 800d2aa:	2075      	movs	r0, #117	@ 0x75
 800d2ac:	f7ff ff22 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_API_data(start_row);
 800d2b0:	1d7b      	adds	r3, r7, #5
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	0018      	movs	r0, r3
 800d2b6:	f7ff ff32 	bl	800d11e <SSD1322_API_data>
	SSD1322_API_data(end_row);
 800d2ba:	1d3b      	adds	r3, r7, #4
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	0018      	movs	r0, r3
 800d2c0:	f7ff ff2d 	bl	800d11e <SSD1322_API_data>
}
 800d2c4:	46c0      	nop			@ (mov r8, r8)
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	b002      	add	sp, #8
 800d2ca:	bdb0      	pop	{r4, r5, r7, pc}

0800d2cc <SSD1322_API_send_buffer>:
 *
 *  @param[in] buffer array of pixel values
 *  @param[in] buffer_size amount of bytes in the array
 */
void SSD1322_API_send_buffer(uint8_t* buffer, uint32_t buffer_size)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
	SSD1322_API_command(ENABLE_RAM_WRITE);  //enable write of pixels
 800d2d6:	205c      	movs	r0, #92	@ 0x5c
 800d2d8:	f7ff ff0c 	bl	800d0f4 <SSD1322_API_command>
	SSD1322_HW_drive_CS_low();
 800d2dc:	f000 f9e6 	bl	800d6ac <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 800d2e0:	f000 fa0e 	bl	800d700 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_array(buffer, buffer_size);
 800d2e4:	683a      	ldr	r2, [r7, #0]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	0011      	movs	r1, r2
 800d2ea:	0018      	movs	r0, r3
 800d2ec:	f000 fa44 	bl	800d778 <SSD1322_HW_SPI_send_array>
	SSD1322_HW_drive_CS_high();
 800d2f0:	f000 f9ea 	bl	800d6c8 <SSD1322_HW_drive_CS_high>
}
 800d2f4:	46c0      	nop			@ (mov r8, r8)
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	b002      	add	sp, #8
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <draw_pixel>:
 *             vertical coordinate of pixel
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 800d2fc:	b5b0      	push	{r4, r5, r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	000c      	movs	r4, r1
 800d306:	0010      	movs	r0, r2
 800d308:	0019      	movs	r1, r3
 800d30a:	250a      	movs	r5, #10
 800d30c:	197b      	adds	r3, r7, r5
 800d30e:	1c22      	adds	r2, r4, #0
 800d310:	801a      	strh	r2, [r3, #0]
 800d312:	2408      	movs	r4, #8
 800d314:	193b      	adds	r3, r7, r4
 800d316:	1c02      	adds	r2, r0, #0
 800d318:	801a      	strh	r2, [r3, #0]
 800d31a:	1dfb      	adds	r3, r7, #7
 800d31c:	1c0a      	adds	r2, r1, #0
 800d31e:	701a      	strb	r2, [r3, #0]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 800d320:	4b42      	ldr	r3, [pc, #264]	@ (800d42c <draw_pixel+0x130>)
 800d322:	881b      	ldrh	r3, [r3, #0]
 800d324:	0029      	movs	r1, r5
 800d326:	187a      	adds	r2, r7, r1
 800d328:	8812      	ldrh	r2, [r2, #0]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d300      	bcc.n	800d330 <draw_pixel+0x34>
 800d32e:	e078      	b.n	800d422 <draw_pixel+0x126>
 800d330:	4b3f      	ldr	r3, [pc, #252]	@ (800d430 <draw_pixel+0x134>)
 800d332:	881b      	ldrh	r3, [r3, #0]
 800d334:	193a      	adds	r2, r7, r4
 800d336:	8812      	ldrh	r2, [r2, #0]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d300      	bcc.n	800d33e <draw_pixel+0x42>
 800d33c:	e071      	b.n	800d422 <draw_pixel+0x126>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 800d33e:	193b      	adds	r3, r7, r4
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	4a3a      	ldr	r2, [pc, #232]	@ (800d42c <draw_pixel+0x130>)
 800d344:	8812      	ldrh	r2, [r2, #0]
 800d346:	435a      	muls	r2, r3
 800d348:	187b      	adds	r3, r7, r1
 800d34a:	881b      	ldrh	r3, [r3, #0]
 800d34c:	18d3      	adds	r3, r2, r3
 800d34e:	4a39      	ldr	r2, [pc, #228]	@ (800d434 <draw_pixel+0x138>)
 800d350:	4013      	ands	r3, r2
 800d352:	d504      	bpl.n	800d35e <draw_pixel+0x62>
 800d354:	3b01      	subs	r3, #1
 800d356:	2202      	movs	r2, #2
 800d358:	4252      	negs	r2, r2
 800d35a:	4313      	orrs	r3, r2
 800d35c:	3301      	adds	r3, #1
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d12e      	bne.n	800d3c0 <draw_pixel+0xc4>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 800d362:	2308      	movs	r3, #8
 800d364:	18fb      	adds	r3, r7, r3
 800d366:	881b      	ldrh	r3, [r3, #0]
 800d368:	4a30      	ldr	r2, [pc, #192]	@ (800d42c <draw_pixel+0x130>)
 800d36a:	8812      	ldrh	r2, [r2, #0]
 800d36c:	435a      	muls	r2, r3
 800d36e:	230a      	movs	r3, #10
 800d370:	18fb      	adds	r3, r7, r3
 800d372:	881b      	ldrh	r3, [r3, #0]
 800d374:	18d3      	adds	r3, r2, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	da00      	bge.n	800d37c <draw_pixel+0x80>
 800d37a:	3301      	adds	r3, #1
 800d37c:	105b      	asrs	r3, r3, #1
 800d37e:	001a      	movs	r2, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	189b      	adds	r3, r3, r2
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	b25b      	sxtb	r3, r3
 800d388:	220f      	movs	r2, #15
 800d38a:	4393      	bics	r3, r2
 800d38c:	b25a      	sxtb	r2, r3
 800d38e:	1dfb      	adds	r3, r7, #7
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	b25b      	sxtb	r3, r3
 800d394:	4313      	orrs	r3, r2
 800d396:	b259      	sxtb	r1, r3
 800d398:	2308      	movs	r3, #8
 800d39a:	18fb      	adds	r3, r7, r3
 800d39c:	881b      	ldrh	r3, [r3, #0]
 800d39e:	4a23      	ldr	r2, [pc, #140]	@ (800d42c <draw_pixel+0x130>)
 800d3a0:	8812      	ldrh	r2, [r2, #0]
 800d3a2:	435a      	muls	r2, r3
 800d3a4:	230a      	movs	r3, #10
 800d3a6:	18fb      	adds	r3, r7, r3
 800d3a8:	881b      	ldrh	r3, [r3, #0]
 800d3aa:	18d3      	adds	r3, r2, r3
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	da00      	bge.n	800d3b2 <draw_pixel+0xb6>
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	105b      	asrs	r3, r3, #1
 800d3b4:	001a      	movs	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	189b      	adds	r3, r3, r2
 800d3ba:	b2ca      	uxtb	r2, r1
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	e031      	b.n	800d424 <draw_pixel+0x128>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 800d3c0:	2308      	movs	r3, #8
 800d3c2:	18fb      	adds	r3, r7, r3
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	4a19      	ldr	r2, [pc, #100]	@ (800d42c <draw_pixel+0x130>)
 800d3c8:	8812      	ldrh	r2, [r2, #0]
 800d3ca:	435a      	muls	r2, r3
 800d3cc:	230a      	movs	r3, #10
 800d3ce:	18fb      	adds	r3, r7, r3
 800d3d0:	881b      	ldrh	r3, [r3, #0]
 800d3d2:	18d3      	adds	r3, r2, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	da00      	bge.n	800d3da <draw_pixel+0xde>
 800d3d8:	3301      	adds	r3, #1
 800d3da:	105b      	asrs	r3, r3, #1
 800d3dc:	001a      	movs	r2, r3
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	189b      	adds	r3, r3, r2
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	b25b      	sxtb	r3, r3
 800d3e6:	220f      	movs	r2, #15
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	b25a      	sxtb	r2, r3
 800d3ec:	1dfb      	adds	r3, r7, #7
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	b25b      	sxtb	r3, r3
 800d3f2:	011b      	lsls	r3, r3, #4
 800d3f4:	b25b      	sxtb	r3, r3
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	b259      	sxtb	r1, r3
 800d3fa:	2308      	movs	r3, #8
 800d3fc:	18fb      	adds	r3, r7, r3
 800d3fe:	881b      	ldrh	r3, [r3, #0]
 800d400:	4a0a      	ldr	r2, [pc, #40]	@ (800d42c <draw_pixel+0x130>)
 800d402:	8812      	ldrh	r2, [r2, #0]
 800d404:	435a      	muls	r2, r3
 800d406:	230a      	movs	r3, #10
 800d408:	18fb      	adds	r3, r7, r3
 800d40a:	881b      	ldrh	r3, [r3, #0]
 800d40c:	18d3      	adds	r3, r2, r3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	da00      	bge.n	800d414 <draw_pixel+0x118>
 800d412:	3301      	adds	r3, #1
 800d414:	105b      	asrs	r3, r3, #1
 800d416:	001a      	movs	r2, r3
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	189b      	adds	r3, r3, r2
 800d41c:	b2ca      	uxtb	r2, r1
 800d41e:	701a      	strb	r2, [r3, #0]
 800d420:	e000      	b.n	800d424 <draw_pixel+0x128>
		return;
 800d422:	46c0      	nop			@ (mov r8, r8)
	}
}
 800d424:	46bd      	mov	sp, r7
 800d426:	b004      	add	sp, #16
 800d428:	bdb0      	pop	{r4, r5, r7, pc}
 800d42a:	46c0      	nop			@ (mov r8, r8)
 800d42c:	20000190 	.word	0x20000190
 800d430:	2000018e 	.word	0x2000018e
 800d434:	80000001 	.word	0x80000001

0800d438 <select_font>:
 *
 *  @param[in] new_gfx_font
 *             pointer to font structure
 */
void select_font(const GFXfont *new_gfx_font)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 800d440:	4b03      	ldr	r3, [pc, #12]	@ (800d450 <select_font+0x18>)
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	601a      	str	r2, [r3, #0]
}
 800d446:	46c0      	nop			@ (mov r8, r8)
 800d448:	46bd      	mov	sp, r7
 800d44a:	b002      	add	sp, #8
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	46c0      	nop			@ (mov r8, r8)
 800d450:	20000e90 	.word	0x20000e90

0800d454 <draw_char>:
 *             y position of bottom left corner of character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 800d454:	b5b0      	push	{r4, r5, r7, lr}
 800d456:	b08a      	sub	sp, #40	@ 0x28
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	000c      	movs	r4, r1
 800d45e:	0010      	movs	r0, r2
 800d460:	0019      	movs	r1, r3
 800d462:	250b      	movs	r5, #11
 800d464:	197b      	adds	r3, r7, r5
 800d466:	1c22      	adds	r2, r4, #0
 800d468:	701a      	strb	r2, [r3, #0]
 800d46a:	2308      	movs	r3, #8
 800d46c:	18fb      	adds	r3, r7, r3
 800d46e:	1c02      	adds	r2, r0, #0
 800d470:	801a      	strh	r2, [r3, #0]
 800d472:	1dbb      	adds	r3, r7, #6
 800d474:	1c0a      	adds	r2, r1, #0
 800d476:	801a      	strh	r2, [r3, #0]
	if(gfx_font == NULL)
 800d478:	4b5a      	ldr	r3, [pc, #360]	@ (800d5e4 <draw_char+0x190>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d100      	bne.n	800d482 <draw_char+0x2e>
 800d480:	e0ab      	b.n	800d5da <draw_char+0x186>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 800d482:	4b58      	ldr	r3, [pc, #352]	@ (800d5e4 <draw_char+0x190>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	891b      	ldrh	r3, [r3, #8]
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	197b      	adds	r3, r7, r5
 800d48c:	1979      	adds	r1, r7, r5
 800d48e:	7809      	ldrb	r1, [r1, #0]
 800d490:	1a8a      	subs	r2, r1, r2
 800d492:	701a      	strb	r2, [r3, #0]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 800d494:	4b53      	ldr	r3, [pc, #332]	@ (800d5e4 <draw_char+0x190>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	685a      	ldr	r2, [r3, #4]
 800d49a:	197b      	adds	r3, r7, r5
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	18d3      	adds	r3, r2, r3
 800d4a2:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 800d4a4:	4b4f      	ldr	r3, [pc, #316]	@ (800d5e4 <draw_char+0x190>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 800d4ac:	2326      	movs	r3, #38	@ 0x26
 800d4ae:	18fb      	adds	r3, r7, r3
 800d4b0:	69fa      	ldr	r2, [r7, #28]
 800d4b2:	8812      	ldrh	r2, [r2, #0]
 800d4b4:	801a      	strh	r2, [r3, #0]
    uint8_t width = glyph->width;
 800d4b6:	2317      	movs	r3, #23
 800d4b8:	18fb      	adds	r3, r7, r3
 800d4ba:	69fa      	ldr	r2, [r7, #28]
 800d4bc:	7892      	ldrb	r2, [r2, #2]
 800d4be:	701a      	strb	r2, [r3, #0]
    uint8_t height = glyph->height;
 800d4c0:	2316      	movs	r3, #22
 800d4c2:	18fb      	adds	r3, r7, r3
 800d4c4:	69fa      	ldr	r2, [r7, #28]
 800d4c6:	78d2      	ldrb	r2, [r2, #3]
 800d4c8:	701a      	strb	r2, [r3, #0]

    int8_t x_offset = glyph->xOffset;
 800d4ca:	2315      	movs	r3, #21
 800d4cc:	18fb      	adds	r3, r7, r3
 800d4ce:	69fa      	ldr	r2, [r7, #28]
 800d4d0:	7952      	ldrb	r2, [r2, #5]
 800d4d2:	701a      	strb	r2, [r3, #0]
    int8_t y_offset = glyph->yOffset;
 800d4d4:	2314      	movs	r3, #20
 800d4d6:	18fb      	adds	r3, r7, r3
 800d4d8:	69fa      	ldr	r2, [r7, #28]
 800d4da:	7992      	ldrb	r2, [r2, #6]
 800d4dc:	701a      	strb	r2, [r3, #0]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 800d4de:	2325      	movs	r3, #37	@ 0x25
 800d4e0:	18fb      	adds	r3, r7, r3
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	701a      	strb	r2, [r3, #0]
    uint8_t bits = 0;
 800d4e6:	2324      	movs	r3, #36	@ 0x24
 800d4e8:	18fb      	adds	r3, r7, r3
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	701a      	strb	r2, [r3, #0]
    uint8_t y_pos = 0;
 800d4ee:	2123      	movs	r1, #35	@ 0x23
 800d4f0:	187b      	adds	r3, r7, r1
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]
    uint8_t x_pos = 0;
 800d4f6:	2322      	movs	r3, #34	@ 0x22
 800d4f8:	18fb      	adds	r3, r7, r3
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	701a      	strb	r2, [r3, #0]

	for (y_pos = 0; y_pos < height; y_pos++)
 800d4fe:	187b      	adds	r3, r7, r1
 800d500:	2200      	movs	r2, #0
 800d502:	701a      	strb	r2, [r3, #0]
 800d504:	e060      	b.n	800d5c8 <draw_char+0x174>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 800d506:	2322      	movs	r3, #34	@ 0x22
 800d508:	18fb      	adds	r3, r7, r3
 800d50a:	2200      	movs	r2, #0
 800d50c:	701a      	strb	r2, [r3, #0]
 800d50e:	e04d      	b.n	800d5ac <draw_char+0x158>
		{
			if (!(bit++ & 7))
 800d510:	2225      	movs	r2, #37	@ 0x25
 800d512:	18bb      	adds	r3, r7, r2
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	18ba      	adds	r2, r7, r2
 800d518:	1c59      	adds	r1, r3, #1
 800d51a:	7011      	strb	r1, [r2, #0]
 800d51c:	001a      	movs	r2, r3
 800d51e:	2307      	movs	r3, #7
 800d520:	4013      	ands	r3, r2
 800d522:	d10c      	bne.n	800d53e <draw_char+0xea>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800d524:	2226      	movs	r2, #38	@ 0x26
 800d526:	18bb      	adds	r3, r7, r2
 800d528:	881b      	ldrh	r3, [r3, #0]
 800d52a:	18ba      	adds	r2, r7, r2
 800d52c:	1c59      	adds	r1, r3, #1
 800d52e:	8011      	strh	r1, [r2, #0]
 800d530:	001a      	movs	r2, r3
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	189a      	adds	r2, r3, r2
 800d536:	2324      	movs	r3, #36	@ 0x24
 800d538:	18fb      	adds	r3, r7, r3
 800d53a:	7812      	ldrb	r2, [r2, #0]
 800d53c:	701a      	strb	r2, [r3, #0]
			}
			if (bits & 0x80)
 800d53e:	2324      	movs	r3, #36	@ 0x24
 800d540:	18fb      	adds	r3, r7, r3
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	b25b      	sxtb	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	da24      	bge.n	800d594 <draw_char+0x140>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 800d54a:	2315      	movs	r3, #21
 800d54c:	18fb      	adds	r3, r7, r3
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	b25b      	sxtb	r3, r3
 800d552:	b29a      	uxth	r2, r3
 800d554:	2308      	movs	r3, #8
 800d556:	18fb      	adds	r3, r7, r3
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	18d3      	adds	r3, r2, r3
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	2322      	movs	r3, #34	@ 0x22
 800d560:	18fb      	adds	r3, r7, r3
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	b29b      	uxth	r3, r3
 800d566:	18d3      	adds	r3, r2, r3
 800d568:	b299      	uxth	r1, r3
 800d56a:	2314      	movs	r3, #20
 800d56c:	18fb      	adds	r3, r7, r3
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	b25b      	sxtb	r3, r3
 800d572:	b29a      	uxth	r2, r3
 800d574:	1dbb      	adds	r3, r7, #6
 800d576:	881b      	ldrh	r3, [r3, #0]
 800d578:	18d3      	adds	r3, r2, r3
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	2323      	movs	r3, #35	@ 0x23
 800d57e:	18fb      	adds	r3, r7, r3
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	b29b      	uxth	r3, r3
 800d584:	18d3      	adds	r3, r2, r3
 800d586:	b29a      	uxth	r2, r3
 800d588:	2338      	movs	r3, #56	@ 0x38
 800d58a:	18fb      	adds	r3, r7, r3
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f7ff feb4 	bl	800d2fc <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 800d594:	2324      	movs	r3, #36	@ 0x24
 800d596:	18fa      	adds	r2, r7, r3
 800d598:	18fb      	adds	r3, r7, r3
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	18db      	adds	r3, r3, r3
 800d59e:	7013      	strb	r3, [r2, #0]
		for (x_pos = 0; x_pos < width; x_pos++)
 800d5a0:	2122      	movs	r1, #34	@ 0x22
 800d5a2:	187b      	adds	r3, r7, r1
 800d5a4:	781a      	ldrb	r2, [r3, #0]
 800d5a6:	187b      	adds	r3, r7, r1
 800d5a8:	3201      	adds	r2, #1
 800d5aa:	701a      	strb	r2, [r3, #0]
 800d5ac:	2322      	movs	r3, #34	@ 0x22
 800d5ae:	18fa      	adds	r2, r7, r3
 800d5b0:	2317      	movs	r3, #23
 800d5b2:	18fb      	adds	r3, r7, r3
 800d5b4:	7812      	ldrb	r2, [r2, #0]
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d3a9      	bcc.n	800d510 <draw_char+0xbc>
	for (y_pos = 0; y_pos < height; y_pos++)
 800d5bc:	2123      	movs	r1, #35	@ 0x23
 800d5be:	187b      	adds	r3, r7, r1
 800d5c0:	781a      	ldrb	r2, [r3, #0]
 800d5c2:	187b      	adds	r3, r7, r1
 800d5c4:	3201      	adds	r2, #1
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	2323      	movs	r3, #35	@ 0x23
 800d5ca:	18fa      	adds	r2, r7, r3
 800d5cc:	2316      	movs	r3, #22
 800d5ce:	18fb      	adds	r3, r7, r3
 800d5d0:	7812      	ldrb	r2, [r2, #0]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d396      	bcc.n	800d506 <draw_char+0xb2>
 800d5d8:	e000      	b.n	800d5dc <draw_char+0x188>
		return;
 800d5da:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	b00a      	add	sp, #40	@ 0x28
 800d5e0:	bdb0      	pop	{r4, r5, r7, pc}
 800d5e2:	46c0      	nop			@ (mov r8, r8)
 800d5e4:	20000e90 	.word	0x20000e90

0800d5e8 <draw_text>:
 *             y position of bottom left corner of first character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 800d5e8:	b590      	push	{r4, r7, lr}
 800d5ea:	b087      	sub	sp, #28
 800d5ec:	af02      	add	r7, sp, #8
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	0019      	movs	r1, r3
 800d5f4:	1dbb      	adds	r3, r7, #6
 800d5f6:	801a      	strh	r2, [r3, #0]
 800d5f8:	1d3b      	adds	r3, r7, #4
 800d5fa:	1c0a      	adds	r2, r1, #0
 800d5fc:	801a      	strh	r2, [r3, #0]
    while (*text)
 800d5fe:	e021      	b.n	800d644 <draw_text+0x5c>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	7819      	ldrb	r1, [r3, #0]
 800d604:	1d3b      	adds	r3, r7, #4
 800d606:	881c      	ldrh	r4, [r3, #0]
 800d608:	1dbb      	adds	r3, r7, #6
 800d60a:	881a      	ldrh	r2, [r3, #0]
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	2320      	movs	r3, #32
 800d610:	18fb      	adds	r3, r7, r3
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	0023      	movs	r3, r4
 800d618:	f7ff ff1c 	bl	800d454 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 800d61c:	4b0e      	ldr	r3, [pc, #56]	@ (800d658 <draw_text+0x70>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	490d      	ldr	r1, [pc, #52]	@ (800d65c <draw_text+0x74>)
 800d628:	468c      	mov	ip, r1
 800d62a:	4463      	add	r3, ip
 800d62c:	00db      	lsls	r3, r3, #3
 800d62e:	18d3      	adds	r3, r2, r3
 800d630:	791b      	ldrb	r3, [r3, #4]
 800d632:	0019      	movs	r1, r3
 800d634:	1dbb      	adds	r3, r7, #6
 800d636:	1dba      	adds	r2, r7, #6
 800d638:	8812      	ldrh	r2, [r2, #0]
 800d63a:	188a      	adds	r2, r1, r2
 800d63c:	801a      	strh	r2, [r3, #0]
        text++;
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	3301      	adds	r3, #1
 800d642:	60bb      	str	r3, [r7, #8]
    while (*text)
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1d9      	bne.n	800d600 <draw_text+0x18>
    }
}
 800d64c:	46c0      	nop			@ (mov r8, r8)
 800d64e:	46c0      	nop			@ (mov r8, r8)
 800d650:	46bd      	mov	sp, r7
 800d652:	b005      	add	sp, #20
 800d654:	bd90      	pop	{r4, r7, pc}
 800d656:	46c0      	nop			@ (mov r8, r8)
 800d658:	20000e90 	.word	0x20000e90
 800d65c:	1fffffe0 	.word	0x1fffffe0

0800d660 <send_buffer_to_OLED>:
 *  @param[in] start_y
 *             y position of frame buffer part that will be displayed on OLED Useful for vertical scrolling.

 */
void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	0008      	movs	r0, r1
 800d66a:	0011      	movs	r1, r2
 800d66c:	1cbb      	adds	r3, r7, #2
 800d66e:	1c02      	adds	r2, r0, #0
 800d670:	801a      	strh	r2, [r3, #0]
 800d672:	003b      	movs	r3, r7
 800d674:	1c0a      	adds	r2, r1, #0
 800d676:	801a      	strh	r2, [r3, #0]
	SSD1322_API_set_window(0, 63, 0, 127);
 800d678:	237f      	movs	r3, #127	@ 0x7f
 800d67a:	2200      	movs	r2, #0
 800d67c:	213f      	movs	r1, #63	@ 0x3f
 800d67e:	2000      	movs	r0, #0
 800d680:	f7ff fdef 	bl	800d262 <SSD1322_API_set_window>
	SSD1322_API_send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 800d684:	003b      	movs	r3, r7
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	01db      	lsls	r3, r3, #7
 800d68a:	001a      	movs	r2, r3
 800d68c:	1cbb      	adds	r3, r7, #2
 800d68e:	881b      	ldrh	r3, [r3, #0]
 800d690:	18d3      	adds	r3, r2, r3
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	18d3      	adds	r3, r2, r3
 800d696:	2280      	movs	r2, #128	@ 0x80
 800d698:	0192      	lsls	r2, r2, #6
 800d69a:	0011      	movs	r1, r2
 800d69c:	0018      	movs	r0, r3
 800d69e:	f7ff fe15 	bl	800d2cc <SSD1322_API_send_buffer>
}
 800d6a2:	46c0      	nop			@ (mov r8, r8)
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	b002      	add	sp, #8
 800d6a8:	bd80      	pop	{r7, pc}
	...

0800d6ac <SSD1322_HW_drive_CS_low>:
 *  @brief Drives CS (Chip Select) pin of SPI interface low.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_low()
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 0);
 800d6b0:	2380      	movs	r3, #128	@ 0x80
 800d6b2:	021b      	lsls	r3, r3, #8
 800d6b4:	4803      	ldr	r0, [pc, #12]	@ (800d6c4 <SSD1322_HW_drive_CS_low+0x18>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	0019      	movs	r1, r3
 800d6ba:	f7f7 f816 	bl	80046ea <HAL_GPIO_WritePin>
}
 800d6be:	46c0      	nop			@ (mov r8, r8)
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	48000800 	.word	0x48000800

0800d6c8 <SSD1322_HW_drive_CS_high>:
 *  @brief Drives CS (Chip Select) pin of SPI interface high.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_high()
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 1);
 800d6cc:	2380      	movs	r3, #128	@ 0x80
 800d6ce:	021b      	lsls	r3, r3, #8
 800d6d0:	4803      	ldr	r0, [pc, #12]	@ (800d6e0 <SSD1322_HW_drive_CS_high+0x18>)
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	0019      	movs	r1, r3
 800d6d6:	f7f7 f808 	bl	80046ea <HAL_GPIO_WritePin>
}
 800d6da:	46c0      	nop			@ (mov r8, r8)
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	48000800 	.word	0x48000800

0800d6e4 <SSD1322_HW_drive_DC_low>:
 *  @brief Drives DC (Data/Command) pin of OLED driver low.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_low()
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 0);
 800d6e8:	2380      	movs	r3, #128	@ 0x80
 800d6ea:	01db      	lsls	r3, r3, #7
 800d6ec:	4803      	ldr	r0, [pc, #12]	@ (800d6fc <SSD1322_HW_drive_DC_low+0x18>)
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	0019      	movs	r1, r3
 800d6f2:	f7f6 fffa 	bl	80046ea <HAL_GPIO_WritePin>
}
 800d6f6:	46c0      	nop			@ (mov r8, r8)
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	48000800 	.word	0x48000800

0800d700 <SSD1322_HW_drive_DC_high>:
 *  @brief Drives DC (Data/Command) pin of of OLED driver high.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_high()
{
 800d700:	b580      	push	{r7, lr}
 800d702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 1);
 800d704:	2380      	movs	r3, #128	@ 0x80
 800d706:	01db      	lsls	r3, r3, #7
 800d708:	4803      	ldr	r0, [pc, #12]	@ (800d718 <SSD1322_HW_drive_DC_high+0x18>)
 800d70a:	2201      	movs	r2, #1
 800d70c:	0019      	movs	r1, r3
 800d70e:	f7f6 ffec 	bl	80046ea <HAL_GPIO_WritePin>
}
 800d712:	46c0      	nop			@ (mov r8, r8)
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	48000800 	.word	0x48000800

0800d71c <SSD1322_HW_drive_RESET_low>:
 *  @brief Drives RESET pin of of OLED driver low.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_low()
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 0);
 800d720:	2380      	movs	r3, #128	@ 0x80
 800d722:	019b      	lsls	r3, r3, #6
 800d724:	4803      	ldr	r0, [pc, #12]	@ (800d734 <SSD1322_HW_drive_RESET_low+0x18>)
 800d726:	2200      	movs	r2, #0
 800d728:	0019      	movs	r1, r3
 800d72a:	f7f6 ffde 	bl	80046ea <HAL_GPIO_WritePin>
}
 800d72e:	46c0      	nop			@ (mov r8, r8)
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	48000800 	.word	0x48000800

0800d738 <SSD1322_HW_drive_RESET_high>:
 *  @brief Drives RESET pin of of OLED driver high.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_high()
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 1);
 800d73c:	2380      	movs	r3, #128	@ 0x80
 800d73e:	019b      	lsls	r3, r3, #6
 800d740:	4803      	ldr	r0, [pc, #12]	@ (800d750 <SSD1322_HW_drive_RESET_high+0x18>)
 800d742:	2201      	movs	r2, #1
 800d744:	0019      	movs	r1, r3
 800d746:	f7f6 ffd0 	bl	80046ea <HAL_GPIO_WritePin>
}
 800d74a:	46c0      	nop			@ (mov r8, r8)
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	48000800 	.word	0x48000800

0800d754 <SSD1322_HW_SPI_send_byte>:
 *  @brief Transmits single byte through SPI interface.
 *
 *  @param[in] byte_to_transmit byte that will be transmitted through SPI interface
 */
void SSD1322_HW_SPI_send_byte(uint8_t byte_to_transmit)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	0002      	movs	r2, r0
 800d75c:	1dfb      	adds	r3, r7, #7
 800d75e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi2, &byte_to_transmit, 1, 10);
 800d760:	1df9      	adds	r1, r7, #7
 800d762:	4804      	ldr	r0, [pc, #16]	@ (800d774 <SSD1322_HW_SPI_send_byte+0x20>)
 800d764:	230a      	movs	r3, #10
 800d766:	2201      	movs	r2, #1
 800d768:	f7f9 ff32 	bl	80075d0 <HAL_SPI_Transmit>
}
 800d76c:	46c0      	nop			@ (mov r8, r8)
 800d76e:	46bd      	mov	sp, r7
 800d770:	b002      	add	sp, #8
 800d772:	bd80      	pop	{r7, pc}
 800d774:	2000041c 	.word	0x2000041c

0800d778 <SSD1322_HW_SPI_send_array>:
 *
 *  @param[in] array_to_transmit array of bytes that will be transmitted through SPI interface
 *  @param[in] array_size amount of bytes to transmit
 */
void SSD1322_HW_SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi2, array_to_transmit, array_size, 100);
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	b29a      	uxth	r2, r3
 800d786:	6879      	ldr	r1, [r7, #4]
 800d788:	4803      	ldr	r0, [pc, #12]	@ (800d798 <SSD1322_HW_SPI_send_array+0x20>)
 800d78a:	2364      	movs	r3, #100	@ 0x64
 800d78c:	f7f9 ff20 	bl	80075d0 <HAL_SPI_Transmit>
}
 800d790:	46c0      	nop			@ (mov r8, r8)
 800d792:	46bd      	mov	sp, r7
 800d794:	b002      	add	sp, #8
 800d796:	bd80      	pop	{r7, pc}
 800d798:	2000041c 	.word	0x2000041c

0800d79c <SSD1322_HW_msDelay>:
 *  and is NOT USED during normal operation.
 *
 *  @param[in] milliseconds time to wait
 */
void SSD1322_HW_msDelay(uint32_t milliseconds)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	0018      	movs	r0, r3
 800d7a8:	f7f5 fe9a 	bl	80034e0 <HAL_Delay>
}
 800d7ac:	46c0      	nop			@ (mov r8, r8)
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	b002      	add	sp, #8
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <setIntBufer>:
/**
 * Функция формирует массив buf длиной len из разрядов числа num (тип uint32)
 * Массив записывается с конца
 * Нулевой элемент массива buf используется для знака
 * */
void setIntBufer(int32_t num, uint8_t buf[], uint8_t len){
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	1dfb      	adds	r3, r7, #7
 800d7c0:	701a      	strb	r2, [r3, #0]
	  len -= 1;
 800d7c2:	1dfb      	adds	r3, r7, #7
 800d7c4:	1dfa      	adds	r2, r7, #7
 800d7c6:	7812      	ldrb	r2, [r2, #0]
 800d7c8:	3a01      	subs	r2, #1
 800d7ca:	701a      	strb	r2, [r3, #0]

	  if(num < 0){ // если переданное в функцию число отрицательное
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	da06      	bge.n	800d7e0 <setIntBufer+0x2c>
		  num *= -1; // делаем число положительным
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	425b      	negs	r3, r3
 800d7d6:	60fb      	str	r3, [r7, #12]
		  buf[0] = '-'; // записываем знак в нулевой элемент массива
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	222d      	movs	r2, #45	@ 0x2d
 800d7dc:	701a      	strb	r2, [r3, #0]
 800d7de:	e002      	b.n	800d7e6 <setIntBufer+0x32>
	  }
	  else
		  buf[0] = 0; // иначе обнуляем
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	701a      	strb	r2, [r3, #0]

	  if(num == 0){ // если в функцию был передан 0
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d120      	bne.n	800d82e <setIntBufer+0x7a>
		  buf[len] = '0';
 800d7ec:	1dfb      	adds	r3, r7, #7
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	68ba      	ldr	r2, [r7, #8]
 800d7f2:	18d3      	adds	r3, r2, r3
 800d7f4:	2230      	movs	r2, #48	@ 0x30
 800d7f6:	701a      	strb	r2, [r3, #0]
			  buf[len] = '0' + (num % 10);
			  num /= 10;
			  len--;
		  }
	  }
}
 800d7f8:	e01c      	b.n	800d834 <setIntBufer+0x80>
			  buf[len] = '0' + (num % 10);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	210a      	movs	r1, #10
 800d7fe:	0018      	movs	r0, r3
 800d800:	f7f2 fe0e 	bl	8000420 <__aeabi_idivmod>
 800d804:	000b      	movs	r3, r1
 800d806:	b2da      	uxtb	r2, r3
 800d808:	1dfb      	adds	r3, r7, #7
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	68b9      	ldr	r1, [r7, #8]
 800d80e:	18cb      	adds	r3, r1, r3
 800d810:	3230      	adds	r2, #48	@ 0x30
 800d812:	b2d2      	uxtb	r2, r2
 800d814:	701a      	strb	r2, [r3, #0]
			  num /= 10;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	210a      	movs	r1, #10
 800d81a:	0018      	movs	r0, r3
 800d81c:	f7f2 fd1a 	bl	8000254 <__divsi3>
 800d820:	0003      	movs	r3, r0
 800d822:	60fb      	str	r3, [r7, #12]
			  len--;
 800d824:	1dfb      	adds	r3, r7, #7
 800d826:	781a      	ldrb	r2, [r3, #0]
 800d828:	1dfb      	adds	r3, r7, #7
 800d82a:	3a01      	subs	r2, #1
 800d82c:	701a      	strb	r2, [r3, #0]
		  while(num){
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d1e2      	bne.n	800d7fa <setIntBufer+0x46>
}
 800d834:	46c0      	nop			@ (mov r8, r8)
 800d836:	46bd      	mov	sp, r7
 800d838:	b004      	add	sp, #16
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <UartPrint>:
#include "uart.h"

/*
 * Функция для вывода буфера в UART
 * */
void UartPrint(UART_HandleTypeDef* huart, uint8_t buf[], uint8_t len){
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	1dfb      	adds	r3, r7, #7
 800d848:	701a      	strb	r2, [r3, #0]

//	while( HAL_UART_Transmit_IT(huart, buf, len) == HAL_BUSY);
	HAL_UART_Transmit_IT(huart, buf, len);
 800d84a:	1dfb      	adds	r3, r7, #7
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	b29a      	uxth	r2, r3
 800d850:	68b9      	ldr	r1, [r7, #8]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	0018      	movs	r0, r3
 800d856:	f7fa fd5d 	bl	8008314 <HAL_UART_Transmit_IT>
}
 800d85a:	46c0      	nop			@ (mov r8, r8)
 800d85c:	46bd      	mov	sp, r7
 800d85e:	b004      	add	sp, #16
 800d860:	bd80      	pop	{r7, pc}
	...

0800d864 <UartPrintInt>:

/*
 * Функция выводит число num (int32) в UART
 * */
void UartPrintInt(UART_HandleTypeDef* huart, int32_t num, _Bool newStr){
 800d864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d866:	46c6      	mov	lr, r8
 800d868:	b500      	push	{lr}
 800d86a:	b08e      	sub	sp, #56	@ 0x38
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d870:	6239      	str	r1, [r7, #32]
 800d872:	231f      	movs	r3, #31
 800d874:	18fb      	adds	r3, r7, r3
 800d876:	701a      	strb	r2, [r3, #0]
 800d878:	466b      	mov	r3, sp
 800d87a:	4698      	mov	r8, r3
	uint8_t len = 0;
 800d87c:	211f      	movs	r1, #31
 800d87e:	2018      	movs	r0, #24
 800d880:	180b      	adds	r3, r1, r0
 800d882:	19db      	adds	r3, r3, r7
 800d884:	2200      	movs	r2, #0
 800d886:	701a      	strb	r2, [r3, #0]
	if(num < 1000)
 800d888:	6a3a      	ldr	r2, [r7, #32]
 800d88a:	23fa      	movs	r3, #250	@ 0xfa
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	429a      	cmp	r2, r3
 800d890:	da04      	bge.n	800d89c <UartPrintInt+0x38>
		len = 3;
 800d892:	180b      	adds	r3, r1, r0
 800d894:	19db      	adds	r3, r3, r7
 800d896:	2203      	movs	r2, #3
 800d898:	701a      	strb	r2, [r3, #0]
 800d89a:	e014      	b.n	800d8c6 <UartPrintInt+0x62>
	else if(num < 1000000)
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	4a3b      	ldr	r2, [pc, #236]	@ (800d98c <UartPrintInt+0x128>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	dc06      	bgt.n	800d8b2 <UartPrintInt+0x4e>
		len = 6;
 800d8a4:	231f      	movs	r3, #31
 800d8a6:	2218      	movs	r2, #24
 800d8a8:	189b      	adds	r3, r3, r2
 800d8aa:	19db      	adds	r3, r3, r7
 800d8ac:	2206      	movs	r2, #6
 800d8ae:	701a      	strb	r2, [r3, #0]
 800d8b0:	e009      	b.n	800d8c6 <UartPrintInt+0x62>
	else if(num > 1000000)
 800d8b2:	6a3b      	ldr	r3, [r7, #32]
 800d8b4:	4a36      	ldr	r2, [pc, #216]	@ (800d990 <UartPrintInt+0x12c>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	dd05      	ble.n	800d8c6 <UartPrintInt+0x62>
		len = 10;
 800d8ba:	231f      	movs	r3, #31
 800d8bc:	2218      	movs	r2, #24
 800d8be:	189b      	adds	r3, r3, r2
 800d8c0:	19db      	adds	r3, r3, r7
 800d8c2:	220a      	movs	r2, #10
 800d8c4:	701a      	strb	r2, [r3, #0]

	uint8_t buf[len];
 800d8c6:	231f      	movs	r3, #31
 800d8c8:	2218      	movs	r2, #24
 800d8ca:	189b      	adds	r3, r3, r2
 800d8cc:	19db      	adds	r3, r3, r7
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	001a      	movs	r2, r3
 800d8d2:	3a01      	subs	r2, #1
 800d8d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d8d6:	60bb      	str	r3, [r7, #8]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	60fa      	str	r2, [r7, #12]
 800d8dc:	68b8      	ldr	r0, [r7, #8]
 800d8de:	68f9      	ldr	r1, [r7, #12]
 800d8e0:	0002      	movs	r2, r0
 800d8e2:	0f52      	lsrs	r2, r2, #29
 800d8e4:	000e      	movs	r6, r1
 800d8e6:	00f6      	lsls	r6, r6, #3
 800d8e8:	617e      	str	r6, [r7, #20]
 800d8ea:	697e      	ldr	r6, [r7, #20]
 800d8ec:	4316      	orrs	r6, r2
 800d8ee:	617e      	str	r6, [r7, #20]
 800d8f0:	0002      	movs	r2, r0
 800d8f2:	00d2      	lsls	r2, r2, #3
 800d8f4:	613a      	str	r2, [r7, #16]
 800d8f6:	603b      	str	r3, [r7, #0]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	607a      	str	r2, [r7, #4]
 800d8fc:	6838      	ldr	r0, [r7, #0]
 800d8fe:	6879      	ldr	r1, [r7, #4]
 800d900:	0002      	movs	r2, r0
 800d902:	0f52      	lsrs	r2, r2, #29
 800d904:	000e      	movs	r6, r1
 800d906:	00f5      	lsls	r5, r6, #3
 800d908:	4315      	orrs	r5, r2
 800d90a:	0002      	movs	r2, r0
 800d90c:	00d4      	lsls	r4, r2, #3
 800d90e:	3307      	adds	r3, #7
 800d910:	08db      	lsrs	r3, r3, #3
 800d912:	00db      	lsls	r3, r3, #3
 800d914:	466a      	mov	r2, sp
 800d916:	1ad3      	subs	r3, r2, r3
 800d918:	469d      	mov	sp, r3
 800d91a:	466b      	mov	r3, sp
 800d91c:	3300      	adds	r3, #0
 800d91e:	62bb      	str	r3, [r7, #40]	@ 0x28
	for(int i = 0; i < len; i++)
 800d920:	2300      	movs	r3, #0
 800d922:	633b      	str	r3, [r7, #48]	@ 0x30
 800d924:	e007      	b.n	800d936 <UartPrintInt+0xd2>
		buf[i] = 0;
 800d926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d92a:	18d3      	adds	r3, r2, r3
 800d92c:	2200      	movs	r2, #0
 800d92e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++)
 800d930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d932:	3301      	adds	r3, #1
 800d934:	633b      	str	r3, [r7, #48]	@ 0x30
 800d936:	241f      	movs	r4, #31
 800d938:	2518      	movs	r5, #24
 800d93a:	1963      	adds	r3, r4, r5
 800d93c:	19db      	adds	r3, r3, r7
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d942:	429a      	cmp	r2, r3
 800d944:	dbef      	blt.n	800d926 <UartPrintInt+0xc2>

	setIntBufer(num, buf, len);
 800d946:	1963      	adds	r3, r4, r5
 800d948:	19db      	adds	r3, r3, r7
 800d94a:	781a      	ldrb	r2, [r3, #0]
 800d94c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d94e:	6a3b      	ldr	r3, [r7, #32]
 800d950:	0018      	movs	r0, r3
 800d952:	f7ff ff2f 	bl	800d7b4 <setIntBufer>
	UartPrint(huart, buf, len);
 800d956:	1963      	adds	r3, r4, r5
 800d958:	19db      	adds	r3, r3, r7
 800d95a:	781a      	ldrb	r2, [r3, #0]
 800d95c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d960:	0018      	movs	r0, r3
 800d962:	f7ff ff6b 	bl	800d83c <UartPrint>

	if(newStr)
 800d966:	231f      	movs	r3, #31
 800d968:	18fb      	adds	r3, r7, r3
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d005      	beq.n	800d97c <UartPrintInt+0x118>
		UartPrint(huart,"\r\n", 2);
 800d970:	4908      	ldr	r1, [pc, #32]	@ (800d994 <UartPrintInt+0x130>)
 800d972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d974:	2202      	movs	r2, #2
 800d976:	0018      	movs	r0, r3
 800d978:	f7ff ff60 	bl	800d83c <UartPrint>
 800d97c:	46c5      	mov	sp, r8
}
 800d97e:	46c0      	nop			@ (mov r8, r8)
 800d980:	46bd      	mov	sp, r7
 800d982:	b00e      	add	sp, #56	@ 0x38
 800d984:	bc80      	pop	{r7}
 800d986:	46b8      	mov	r8, r7
 800d988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d98a:	46c0      	nop			@ (mov r8, r8)
 800d98c:	000f423f 	.word	0x000f423f
 800d990:	000f4240 	.word	0x000f4240
 800d994:	080104c4 	.word	0x080104c4

0800d998 <UartPrintString>:

/*
 * Функция выводит строку buf длиной len в UART
 * */
void UartPrintString(UART_HandleTypeDef* huart, uint8_t *buf[], uint16_t len, _Bool newStr){
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	0019      	movs	r1, r3
 800d9a4:	1dbb      	adds	r3, r7, #6
 800d9a6:	801a      	strh	r2, [r3, #0]
 800d9a8:	1d7b      	adds	r3, r7, #5
 800d9aa:	1c0a      	adds	r2, r1, #0
 800d9ac:	701a      	strb	r2, [r3, #0]
	UartPrint(huart, buf, len);
 800d9ae:	1dbb      	adds	r3, r7, #6
 800d9b0:	881b      	ldrh	r3, [r3, #0]
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	68b9      	ldr	r1, [r7, #8]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	0018      	movs	r0, r3
 800d9ba:	f7ff ff3f 	bl	800d83c <UartPrint>

	if(newStr)
 800d9be:	1d7b      	adds	r3, r7, #5
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d005      	beq.n	800d9d2 <UartPrintString+0x3a>
		UartPrint(huart,"\r\n", 2);
 800d9c6:	4905      	ldr	r1, [pc, #20]	@ (800d9dc <UartPrintString+0x44>)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2202      	movs	r2, #2
 800d9cc:	0018      	movs	r0, r3
 800d9ce:	f7ff ff35 	bl	800d83c <UartPrint>
}
 800d9d2:	46c0      	nop			@ (mov r8, r8)
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	b004      	add	sp, #16
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	46c0      	nop			@ (mov r8, r8)
 800d9dc:	080104c4 	.word	0x080104c4

0800d9e0 <__cvt>:
 800d9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9e2:	001f      	movs	r7, r3
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	0016      	movs	r6, r2
 800d9e8:	b08b      	sub	sp, #44	@ 0x2c
 800d9ea:	429f      	cmp	r7, r3
 800d9ec:	da04      	bge.n	800d9f8 <__cvt+0x18>
 800d9ee:	2180      	movs	r1, #128	@ 0x80
 800d9f0:	0609      	lsls	r1, r1, #24
 800d9f2:	187b      	adds	r3, r7, r1
 800d9f4:	001f      	movs	r7, r3
 800d9f6:	232d      	movs	r3, #45	@ 0x2d
 800d9f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d9fa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d9fc:	7013      	strb	r3, [r2, #0]
 800d9fe:	2320      	movs	r3, #32
 800da00:	2203      	movs	r2, #3
 800da02:	439d      	bics	r5, r3
 800da04:	2d46      	cmp	r5, #70	@ 0x46
 800da06:	d007      	beq.n	800da18 <__cvt+0x38>
 800da08:	002b      	movs	r3, r5
 800da0a:	3b45      	subs	r3, #69	@ 0x45
 800da0c:	4259      	negs	r1, r3
 800da0e:	414b      	adcs	r3, r1
 800da10:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800da12:	3a01      	subs	r2, #1
 800da14:	18cb      	adds	r3, r1, r3
 800da16:	9310      	str	r3, [sp, #64]	@ 0x40
 800da18:	ab09      	add	r3, sp, #36	@ 0x24
 800da1a:	9304      	str	r3, [sp, #16]
 800da1c:	ab08      	add	r3, sp, #32
 800da1e:	9303      	str	r3, [sp, #12]
 800da20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800da22:	9200      	str	r2, [sp, #0]
 800da24:	9302      	str	r3, [sp, #8]
 800da26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da28:	0032      	movs	r2, r6
 800da2a:	9301      	str	r3, [sp, #4]
 800da2c:	003b      	movs	r3, r7
 800da2e:	f000 fe5f 	bl	800e6f0 <_dtoa_r>
 800da32:	0004      	movs	r4, r0
 800da34:	2d47      	cmp	r5, #71	@ 0x47
 800da36:	d11b      	bne.n	800da70 <__cvt+0x90>
 800da38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da3a:	07db      	lsls	r3, r3, #31
 800da3c:	d511      	bpl.n	800da62 <__cvt+0x82>
 800da3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da40:	18c3      	adds	r3, r0, r3
 800da42:	9307      	str	r3, [sp, #28]
 800da44:	2200      	movs	r2, #0
 800da46:	2300      	movs	r3, #0
 800da48:	0030      	movs	r0, r6
 800da4a:	0039      	movs	r1, r7
 800da4c:	f7f2 fcfe 	bl	800044c <__aeabi_dcmpeq>
 800da50:	2800      	cmp	r0, #0
 800da52:	d001      	beq.n	800da58 <__cvt+0x78>
 800da54:	9b07      	ldr	r3, [sp, #28]
 800da56:	9309      	str	r3, [sp, #36]	@ 0x24
 800da58:	2230      	movs	r2, #48	@ 0x30
 800da5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da5c:	9907      	ldr	r1, [sp, #28]
 800da5e:	428b      	cmp	r3, r1
 800da60:	d320      	bcc.n	800daa4 <__cvt+0xc4>
 800da62:	0020      	movs	r0, r4
 800da64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da66:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800da68:	1b1b      	subs	r3, r3, r4
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	b00b      	add	sp, #44	@ 0x2c
 800da6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da72:	18c3      	adds	r3, r0, r3
 800da74:	9307      	str	r3, [sp, #28]
 800da76:	2d46      	cmp	r5, #70	@ 0x46
 800da78:	d1e4      	bne.n	800da44 <__cvt+0x64>
 800da7a:	7803      	ldrb	r3, [r0, #0]
 800da7c:	2b30      	cmp	r3, #48	@ 0x30
 800da7e:	d10c      	bne.n	800da9a <__cvt+0xba>
 800da80:	2200      	movs	r2, #0
 800da82:	2300      	movs	r3, #0
 800da84:	0030      	movs	r0, r6
 800da86:	0039      	movs	r1, r7
 800da88:	f7f2 fce0 	bl	800044c <__aeabi_dcmpeq>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d104      	bne.n	800da9a <__cvt+0xba>
 800da90:	2301      	movs	r3, #1
 800da92:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800da94:	1a9b      	subs	r3, r3, r2
 800da96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800da98:	6013      	str	r3, [r2, #0]
 800da9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800da9c:	9a07      	ldr	r2, [sp, #28]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	18d3      	adds	r3, r2, r3
 800daa2:	e7ce      	b.n	800da42 <__cvt+0x62>
 800daa4:	1c59      	adds	r1, r3, #1
 800daa6:	9109      	str	r1, [sp, #36]	@ 0x24
 800daa8:	701a      	strb	r2, [r3, #0]
 800daaa:	e7d6      	b.n	800da5a <__cvt+0x7a>

0800daac <__exponent>:
 800daac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daae:	232b      	movs	r3, #43	@ 0x2b
 800dab0:	b085      	sub	sp, #20
 800dab2:	0005      	movs	r5, r0
 800dab4:	1e0c      	subs	r4, r1, #0
 800dab6:	7002      	strb	r2, [r0, #0]
 800dab8:	da01      	bge.n	800dabe <__exponent+0x12>
 800daba:	424c      	negs	r4, r1
 800dabc:	3302      	adds	r3, #2
 800dabe:	706b      	strb	r3, [r5, #1]
 800dac0:	2c09      	cmp	r4, #9
 800dac2:	dd2c      	ble.n	800db1e <__exponent+0x72>
 800dac4:	ab02      	add	r3, sp, #8
 800dac6:	1dde      	adds	r6, r3, #7
 800dac8:	0020      	movs	r0, r4
 800daca:	210a      	movs	r1, #10
 800dacc:	f7f2 fca8 	bl	8000420 <__aeabi_idivmod>
 800dad0:	0037      	movs	r7, r6
 800dad2:	3130      	adds	r1, #48	@ 0x30
 800dad4:	3e01      	subs	r6, #1
 800dad6:	0020      	movs	r0, r4
 800dad8:	7031      	strb	r1, [r6, #0]
 800dada:	210a      	movs	r1, #10
 800dadc:	9401      	str	r4, [sp, #4]
 800dade:	f7f2 fbb9 	bl	8000254 <__divsi3>
 800dae2:	9b01      	ldr	r3, [sp, #4]
 800dae4:	0004      	movs	r4, r0
 800dae6:	2b63      	cmp	r3, #99	@ 0x63
 800dae8:	dcee      	bgt.n	800dac8 <__exponent+0x1c>
 800daea:	1eba      	subs	r2, r7, #2
 800daec:	1ca8      	adds	r0, r5, #2
 800daee:	0001      	movs	r1, r0
 800daf0:	0013      	movs	r3, r2
 800daf2:	3430      	adds	r4, #48	@ 0x30
 800daf4:	7014      	strb	r4, [r2, #0]
 800daf6:	ac02      	add	r4, sp, #8
 800daf8:	3407      	adds	r4, #7
 800dafa:	429c      	cmp	r4, r3
 800dafc:	d80a      	bhi.n	800db14 <__exponent+0x68>
 800dafe:	2300      	movs	r3, #0
 800db00:	4294      	cmp	r4, r2
 800db02:	d303      	bcc.n	800db0c <__exponent+0x60>
 800db04:	3309      	adds	r3, #9
 800db06:	aa02      	add	r2, sp, #8
 800db08:	189b      	adds	r3, r3, r2
 800db0a:	1bdb      	subs	r3, r3, r7
 800db0c:	18c0      	adds	r0, r0, r3
 800db0e:	1b40      	subs	r0, r0, r5
 800db10:	b005      	add	sp, #20
 800db12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db14:	781c      	ldrb	r4, [r3, #0]
 800db16:	3301      	adds	r3, #1
 800db18:	700c      	strb	r4, [r1, #0]
 800db1a:	3101      	adds	r1, #1
 800db1c:	e7eb      	b.n	800daf6 <__exponent+0x4a>
 800db1e:	2330      	movs	r3, #48	@ 0x30
 800db20:	18e4      	adds	r4, r4, r3
 800db22:	70ab      	strb	r3, [r5, #2]
 800db24:	1d28      	adds	r0, r5, #4
 800db26:	70ec      	strb	r4, [r5, #3]
 800db28:	e7f1      	b.n	800db0e <__exponent+0x62>
	...

0800db2c <_printf_float>:
 800db2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db2e:	b097      	sub	sp, #92	@ 0x5c
 800db30:	000d      	movs	r5, r1
 800db32:	920a      	str	r2, [sp, #40]	@ 0x28
 800db34:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800db36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db38:	9009      	str	r0, [sp, #36]	@ 0x24
 800db3a:	f000 fcc9 	bl	800e4d0 <_localeconv_r>
 800db3e:	6803      	ldr	r3, [r0, #0]
 800db40:	0018      	movs	r0, r3
 800db42:	930d      	str	r3, [sp, #52]	@ 0x34
 800db44:	f7f2 fae0 	bl	8000108 <strlen>
 800db48:	2300      	movs	r3, #0
 800db4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800db4c:	9314      	str	r3, [sp, #80]	@ 0x50
 800db4e:	7e2b      	ldrb	r3, [r5, #24]
 800db50:	2207      	movs	r2, #7
 800db52:	930c      	str	r3, [sp, #48]	@ 0x30
 800db54:	682b      	ldr	r3, [r5, #0]
 800db56:	930e      	str	r3, [sp, #56]	@ 0x38
 800db58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db5a:	6823      	ldr	r3, [r4, #0]
 800db5c:	05c9      	lsls	r1, r1, #23
 800db5e:	d545      	bpl.n	800dbec <_printf_float+0xc0>
 800db60:	189b      	adds	r3, r3, r2
 800db62:	4393      	bics	r3, r2
 800db64:	001a      	movs	r2, r3
 800db66:	3208      	adds	r2, #8
 800db68:	6022      	str	r2, [r4, #0]
 800db6a:	2201      	movs	r2, #1
 800db6c:	681e      	ldr	r6, [r3, #0]
 800db6e:	685f      	ldr	r7, [r3, #4]
 800db70:	007b      	lsls	r3, r7, #1
 800db72:	085b      	lsrs	r3, r3, #1
 800db74:	9311      	str	r3, [sp, #68]	@ 0x44
 800db76:	9610      	str	r6, [sp, #64]	@ 0x40
 800db78:	64ae      	str	r6, [r5, #72]	@ 0x48
 800db7a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800db7c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800db7e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800db80:	4ba7      	ldr	r3, [pc, #668]	@ (800de20 <_printf_float+0x2f4>)
 800db82:	4252      	negs	r2, r2
 800db84:	f7f4 fb80 	bl	8002288 <__aeabi_dcmpun>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d131      	bne.n	800dbf0 <_printf_float+0xc4>
 800db8c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800db8e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800db90:	2201      	movs	r2, #1
 800db92:	4ba3      	ldr	r3, [pc, #652]	@ (800de20 <_printf_float+0x2f4>)
 800db94:	4252      	negs	r2, r2
 800db96:	f7f2 fc69 	bl	800046c <__aeabi_dcmple>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d128      	bne.n	800dbf0 <_printf_float+0xc4>
 800db9e:	2200      	movs	r2, #0
 800dba0:	2300      	movs	r3, #0
 800dba2:	0030      	movs	r0, r6
 800dba4:	0039      	movs	r1, r7
 800dba6:	f7f2 fc57 	bl	8000458 <__aeabi_dcmplt>
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	d003      	beq.n	800dbb6 <_printf_float+0x8a>
 800dbae:	002b      	movs	r3, r5
 800dbb0:	222d      	movs	r2, #45	@ 0x2d
 800dbb2:	3343      	adds	r3, #67	@ 0x43
 800dbb4:	701a      	strb	r2, [r3, #0]
 800dbb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbb8:	4f9a      	ldr	r7, [pc, #616]	@ (800de24 <_printf_float+0x2f8>)
 800dbba:	2b47      	cmp	r3, #71	@ 0x47
 800dbbc:	d800      	bhi.n	800dbc0 <_printf_float+0x94>
 800dbbe:	4f9a      	ldr	r7, [pc, #616]	@ (800de28 <_printf_float+0x2fc>)
 800dbc0:	2303      	movs	r3, #3
 800dbc2:	2400      	movs	r4, #0
 800dbc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbc6:	612b      	str	r3, [r5, #16]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	439a      	bics	r2, r3
 800dbcc:	602a      	str	r2, [r5, #0]
 800dbce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbd0:	0029      	movs	r1, r5
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbd8:	aa15      	add	r2, sp, #84	@ 0x54
 800dbda:	f000 f9e5 	bl	800dfa8 <_printf_common>
 800dbde:	3001      	adds	r0, #1
 800dbe0:	d000      	beq.n	800dbe4 <_printf_float+0xb8>
 800dbe2:	e09e      	b.n	800dd22 <_printf_float+0x1f6>
 800dbe4:	2001      	movs	r0, #1
 800dbe6:	4240      	negs	r0, r0
 800dbe8:	b017      	add	sp, #92	@ 0x5c
 800dbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbec:	3307      	adds	r3, #7
 800dbee:	e7b8      	b.n	800db62 <_printf_float+0x36>
 800dbf0:	0032      	movs	r2, r6
 800dbf2:	003b      	movs	r3, r7
 800dbf4:	0030      	movs	r0, r6
 800dbf6:	0039      	movs	r1, r7
 800dbf8:	f7f4 fb46 	bl	8002288 <__aeabi_dcmpun>
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d00b      	beq.n	800dc18 <_printf_float+0xec>
 800dc00:	2f00      	cmp	r7, #0
 800dc02:	da03      	bge.n	800dc0c <_printf_float+0xe0>
 800dc04:	002b      	movs	r3, r5
 800dc06:	222d      	movs	r2, #45	@ 0x2d
 800dc08:	3343      	adds	r3, #67	@ 0x43
 800dc0a:	701a      	strb	r2, [r3, #0]
 800dc0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc0e:	4f87      	ldr	r7, [pc, #540]	@ (800de2c <_printf_float+0x300>)
 800dc10:	2b47      	cmp	r3, #71	@ 0x47
 800dc12:	d8d5      	bhi.n	800dbc0 <_printf_float+0x94>
 800dc14:	4f86      	ldr	r7, [pc, #536]	@ (800de30 <_printf_float+0x304>)
 800dc16:	e7d3      	b.n	800dbc0 <_printf_float+0x94>
 800dc18:	2220      	movs	r2, #32
 800dc1a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800dc1c:	686b      	ldr	r3, [r5, #4]
 800dc1e:	4394      	bics	r4, r2
 800dc20:	1c5a      	adds	r2, r3, #1
 800dc22:	d146      	bne.n	800dcb2 <_printf_float+0x186>
 800dc24:	3307      	adds	r3, #7
 800dc26:	606b      	str	r3, [r5, #4]
 800dc28:	2380      	movs	r3, #128	@ 0x80
 800dc2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	2200      	movs	r2, #0
 800dc32:	602b      	str	r3, [r5, #0]
 800dc34:	9206      	str	r2, [sp, #24]
 800dc36:	aa14      	add	r2, sp, #80	@ 0x50
 800dc38:	9205      	str	r2, [sp, #20]
 800dc3a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dc3c:	a90a      	add	r1, sp, #40	@ 0x28
 800dc3e:	9204      	str	r2, [sp, #16]
 800dc40:	aa13      	add	r2, sp, #76	@ 0x4c
 800dc42:	9203      	str	r2, [sp, #12]
 800dc44:	2223      	movs	r2, #35	@ 0x23
 800dc46:	1852      	adds	r2, r2, r1
 800dc48:	9202      	str	r2, [sp, #8]
 800dc4a:	9301      	str	r3, [sp, #4]
 800dc4c:	686b      	ldr	r3, [r5, #4]
 800dc4e:	0032      	movs	r2, r6
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc54:	003b      	movs	r3, r7
 800dc56:	f7ff fec3 	bl	800d9e0 <__cvt>
 800dc5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dc5c:	0007      	movs	r7, r0
 800dc5e:	2c47      	cmp	r4, #71	@ 0x47
 800dc60:	d12d      	bne.n	800dcbe <_printf_float+0x192>
 800dc62:	1cd3      	adds	r3, r2, #3
 800dc64:	db02      	blt.n	800dc6c <_printf_float+0x140>
 800dc66:	686b      	ldr	r3, [r5, #4]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	dd47      	ble.n	800dcfc <_printf_float+0x1d0>
 800dc6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc6e:	3b02      	subs	r3, #2
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc74:	0028      	movs	r0, r5
 800dc76:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dc78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dc7a:	3901      	subs	r1, #1
 800dc7c:	3050      	adds	r0, #80	@ 0x50
 800dc7e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dc80:	f7ff ff14 	bl	800daac <__exponent>
 800dc84:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dc86:	0004      	movs	r4, r0
 800dc88:	1813      	adds	r3, r2, r0
 800dc8a:	612b      	str	r3, [r5, #16]
 800dc8c:	2a01      	cmp	r2, #1
 800dc8e:	dc02      	bgt.n	800dc96 <_printf_float+0x16a>
 800dc90:	682a      	ldr	r2, [r5, #0]
 800dc92:	07d2      	lsls	r2, r2, #31
 800dc94:	d501      	bpl.n	800dc9a <_printf_float+0x16e>
 800dc96:	3301      	adds	r3, #1
 800dc98:	612b      	str	r3, [r5, #16]
 800dc9a:	2323      	movs	r3, #35	@ 0x23
 800dc9c:	aa0a      	add	r2, sp, #40	@ 0x28
 800dc9e:	189b      	adds	r3, r3, r2
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d100      	bne.n	800dca8 <_printf_float+0x17c>
 800dca6:	e792      	b.n	800dbce <_printf_float+0xa2>
 800dca8:	002b      	movs	r3, r5
 800dcaa:	222d      	movs	r2, #45	@ 0x2d
 800dcac:	3343      	adds	r3, #67	@ 0x43
 800dcae:	701a      	strb	r2, [r3, #0]
 800dcb0:	e78d      	b.n	800dbce <_printf_float+0xa2>
 800dcb2:	2c47      	cmp	r4, #71	@ 0x47
 800dcb4:	d1b8      	bne.n	800dc28 <_printf_float+0xfc>
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d1b6      	bne.n	800dc28 <_printf_float+0xfc>
 800dcba:	3301      	adds	r3, #1
 800dcbc:	e7b3      	b.n	800dc26 <_printf_float+0xfa>
 800dcbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dcc0:	2b65      	cmp	r3, #101	@ 0x65
 800dcc2:	d9d7      	bls.n	800dc74 <_printf_float+0x148>
 800dcc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dcc6:	2b66      	cmp	r3, #102	@ 0x66
 800dcc8:	d11a      	bne.n	800dd00 <_printf_float+0x1d4>
 800dcca:	686b      	ldr	r3, [r5, #4]
 800dccc:	2a00      	cmp	r2, #0
 800dcce:	dd09      	ble.n	800dce4 <_printf_float+0x1b8>
 800dcd0:	612a      	str	r2, [r5, #16]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d102      	bne.n	800dcdc <_printf_float+0x1b0>
 800dcd6:	6829      	ldr	r1, [r5, #0]
 800dcd8:	07c9      	lsls	r1, r1, #31
 800dcda:	d50b      	bpl.n	800dcf4 <_printf_float+0x1c8>
 800dcdc:	3301      	adds	r3, #1
 800dcde:	189b      	adds	r3, r3, r2
 800dce0:	612b      	str	r3, [r5, #16]
 800dce2:	e007      	b.n	800dcf4 <_printf_float+0x1c8>
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d103      	bne.n	800dcf0 <_printf_float+0x1c4>
 800dce8:	2201      	movs	r2, #1
 800dcea:	6829      	ldr	r1, [r5, #0]
 800dcec:	4211      	tst	r1, r2
 800dcee:	d000      	beq.n	800dcf2 <_printf_float+0x1c6>
 800dcf0:	1c9a      	adds	r2, r3, #2
 800dcf2:	612a      	str	r2, [r5, #16]
 800dcf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dcf6:	2400      	movs	r4, #0
 800dcf8:	65ab      	str	r3, [r5, #88]	@ 0x58
 800dcfa:	e7ce      	b.n	800dc9a <_printf_float+0x16e>
 800dcfc:	2367      	movs	r3, #103	@ 0x67
 800dcfe:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd00:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dd02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dd04:	4299      	cmp	r1, r3
 800dd06:	db06      	blt.n	800dd16 <_printf_float+0x1ea>
 800dd08:	682b      	ldr	r3, [r5, #0]
 800dd0a:	6129      	str	r1, [r5, #16]
 800dd0c:	07db      	lsls	r3, r3, #31
 800dd0e:	d5f1      	bpl.n	800dcf4 <_printf_float+0x1c8>
 800dd10:	3101      	adds	r1, #1
 800dd12:	6129      	str	r1, [r5, #16]
 800dd14:	e7ee      	b.n	800dcf4 <_printf_float+0x1c8>
 800dd16:	2201      	movs	r2, #1
 800dd18:	2900      	cmp	r1, #0
 800dd1a:	dce0      	bgt.n	800dcde <_printf_float+0x1b2>
 800dd1c:	1892      	adds	r2, r2, r2
 800dd1e:	1a52      	subs	r2, r2, r1
 800dd20:	e7dd      	b.n	800dcde <_printf_float+0x1b2>
 800dd22:	682a      	ldr	r2, [r5, #0]
 800dd24:	0553      	lsls	r3, r2, #21
 800dd26:	d408      	bmi.n	800dd3a <_printf_float+0x20e>
 800dd28:	692b      	ldr	r3, [r5, #16]
 800dd2a:	003a      	movs	r2, r7
 800dd2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800dd32:	47a0      	blx	r4
 800dd34:	3001      	adds	r0, #1
 800dd36:	d129      	bne.n	800dd8c <_printf_float+0x260>
 800dd38:	e754      	b.n	800dbe4 <_printf_float+0xb8>
 800dd3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd3c:	2b65      	cmp	r3, #101	@ 0x65
 800dd3e:	d800      	bhi.n	800dd42 <_printf_float+0x216>
 800dd40:	e0db      	b.n	800defa <_printf_float+0x3ce>
 800dd42:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800dd44:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800dd46:	2200      	movs	r2, #0
 800dd48:	2300      	movs	r3, #0
 800dd4a:	f7f2 fb7f 	bl	800044c <__aeabi_dcmpeq>
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	d033      	beq.n	800ddba <_printf_float+0x28e>
 800dd52:	2301      	movs	r3, #1
 800dd54:	4a37      	ldr	r2, [pc, #220]	@ (800de34 <_printf_float+0x308>)
 800dd56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800dd5c:	47a0      	blx	r4
 800dd5e:	3001      	adds	r0, #1
 800dd60:	d100      	bne.n	800dd64 <_printf_float+0x238>
 800dd62:	e73f      	b.n	800dbe4 <_printf_float+0xb8>
 800dd64:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800dd66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd68:	42b3      	cmp	r3, r6
 800dd6a:	db02      	blt.n	800dd72 <_printf_float+0x246>
 800dd6c:	682b      	ldr	r3, [r5, #0]
 800dd6e:	07db      	lsls	r3, r3, #31
 800dd70:	d50c      	bpl.n	800dd8c <_printf_float+0x260>
 800dd72:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800dd74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd76:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dd78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd7c:	47a0      	blx	r4
 800dd7e:	2400      	movs	r4, #0
 800dd80:	3001      	adds	r0, #1
 800dd82:	d100      	bne.n	800dd86 <_printf_float+0x25a>
 800dd84:	e72e      	b.n	800dbe4 <_printf_float+0xb8>
 800dd86:	1e73      	subs	r3, r6, #1
 800dd88:	42a3      	cmp	r3, r4
 800dd8a:	dc0a      	bgt.n	800dda2 <_printf_float+0x276>
 800dd8c:	682b      	ldr	r3, [r5, #0]
 800dd8e:	079b      	lsls	r3, r3, #30
 800dd90:	d500      	bpl.n	800dd94 <_printf_float+0x268>
 800dd92:	e106      	b.n	800dfa2 <_printf_float+0x476>
 800dd94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dd96:	68e8      	ldr	r0, [r5, #12]
 800dd98:	4298      	cmp	r0, r3
 800dd9a:	db00      	blt.n	800dd9e <_printf_float+0x272>
 800dd9c:	e724      	b.n	800dbe8 <_printf_float+0xbc>
 800dd9e:	0018      	movs	r0, r3
 800dda0:	e722      	b.n	800dbe8 <_printf_float+0xbc>
 800dda2:	002a      	movs	r2, r5
 800dda4:	2301      	movs	r3, #1
 800dda6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dda8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddaa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ddac:	321a      	adds	r2, #26
 800ddae:	47b8      	blx	r7
 800ddb0:	3001      	adds	r0, #1
 800ddb2:	d100      	bne.n	800ddb6 <_printf_float+0x28a>
 800ddb4:	e716      	b.n	800dbe4 <_printf_float+0xb8>
 800ddb6:	3401      	adds	r4, #1
 800ddb8:	e7e5      	b.n	800dd86 <_printf_float+0x25a>
 800ddba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	dc3b      	bgt.n	800de38 <_printf_float+0x30c>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	4a1c      	ldr	r2, [pc, #112]	@ (800de34 <_printf_float+0x308>)
 800ddc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ddc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddc8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ddca:	47a0      	blx	r4
 800ddcc:	3001      	adds	r0, #1
 800ddce:	d100      	bne.n	800ddd2 <_printf_float+0x2a6>
 800ddd0:	e708      	b.n	800dbe4 <_printf_float+0xb8>
 800ddd2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ddd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ddd6:	4333      	orrs	r3, r6
 800ddd8:	d102      	bne.n	800dde0 <_printf_float+0x2b4>
 800ddda:	682b      	ldr	r3, [r5, #0]
 800dddc:	07db      	lsls	r3, r3, #31
 800ddde:	d5d5      	bpl.n	800dd8c <_printf_float+0x260>
 800dde0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dde2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dde4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dde6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dde8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ddea:	47a0      	blx	r4
 800ddec:	2300      	movs	r3, #0
 800ddee:	3001      	adds	r0, #1
 800ddf0:	d100      	bne.n	800ddf4 <_printf_float+0x2c8>
 800ddf2:	e6f7      	b.n	800dbe4 <_printf_float+0xb8>
 800ddf4:	930c      	str	r3, [sp, #48]	@ 0x30
 800ddf6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ddf8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ddfa:	425b      	negs	r3, r3
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	dc01      	bgt.n	800de04 <_printf_float+0x2d8>
 800de00:	0033      	movs	r3, r6
 800de02:	e792      	b.n	800dd2a <_printf_float+0x1fe>
 800de04:	002a      	movs	r2, r5
 800de06:	2301      	movs	r3, #1
 800de08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de0c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800de0e:	321a      	adds	r2, #26
 800de10:	47a0      	blx	r4
 800de12:	3001      	adds	r0, #1
 800de14:	d100      	bne.n	800de18 <_printf_float+0x2ec>
 800de16:	e6e5      	b.n	800dbe4 <_printf_float+0xb8>
 800de18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de1a:	3301      	adds	r3, #1
 800de1c:	e7ea      	b.n	800ddf4 <_printf_float+0x2c8>
 800de1e:	46c0      	nop			@ (mov r8, r8)
 800de20:	7fefffff 	.word	0x7fefffff
 800de24:	08010e94 	.word	0x08010e94
 800de28:	08010e90 	.word	0x08010e90
 800de2c:	08010e9c 	.word	0x08010e9c
 800de30:	08010e98 	.word	0x08010e98
 800de34:	08010ea0 	.word	0x08010ea0
 800de38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800de3a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800de3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800de3e:	429e      	cmp	r6, r3
 800de40:	dd00      	ble.n	800de44 <_printf_float+0x318>
 800de42:	001e      	movs	r6, r3
 800de44:	2e00      	cmp	r6, #0
 800de46:	dc31      	bgt.n	800deac <_printf_float+0x380>
 800de48:	43f3      	mvns	r3, r6
 800de4a:	2400      	movs	r4, #0
 800de4c:	17db      	asrs	r3, r3, #31
 800de4e:	4033      	ands	r3, r6
 800de50:	930e      	str	r3, [sp, #56]	@ 0x38
 800de52:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800de54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de56:	1af3      	subs	r3, r6, r3
 800de58:	42a3      	cmp	r3, r4
 800de5a:	dc30      	bgt.n	800debe <_printf_float+0x392>
 800de5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800de60:	429a      	cmp	r2, r3
 800de62:	dc38      	bgt.n	800ded6 <_printf_float+0x3aa>
 800de64:	682b      	ldr	r3, [r5, #0]
 800de66:	07db      	lsls	r3, r3, #31
 800de68:	d435      	bmi.n	800ded6 <_printf_float+0x3aa>
 800de6a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800de6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800de70:	1b9b      	subs	r3, r3, r6
 800de72:	1b14      	subs	r4, r2, r4
 800de74:	429c      	cmp	r4, r3
 800de76:	dd00      	ble.n	800de7a <_printf_float+0x34e>
 800de78:	001c      	movs	r4, r3
 800de7a:	2c00      	cmp	r4, #0
 800de7c:	dc34      	bgt.n	800dee8 <_printf_float+0x3bc>
 800de7e:	43e3      	mvns	r3, r4
 800de80:	2600      	movs	r6, #0
 800de82:	17db      	asrs	r3, r3, #31
 800de84:	401c      	ands	r4, r3
 800de86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	1b1b      	subs	r3, r3, r4
 800de8e:	42b3      	cmp	r3, r6
 800de90:	dc00      	bgt.n	800de94 <_printf_float+0x368>
 800de92:	e77b      	b.n	800dd8c <_printf_float+0x260>
 800de94:	002a      	movs	r2, r5
 800de96:	2301      	movs	r3, #1
 800de98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de9c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800de9e:	321a      	adds	r2, #26
 800dea0:	47b8      	blx	r7
 800dea2:	3001      	adds	r0, #1
 800dea4:	d100      	bne.n	800dea8 <_printf_float+0x37c>
 800dea6:	e69d      	b.n	800dbe4 <_printf_float+0xb8>
 800dea8:	3601      	adds	r6, #1
 800deaa:	e7ec      	b.n	800de86 <_printf_float+0x35a>
 800deac:	0033      	movs	r3, r6
 800deae:	003a      	movs	r2, r7
 800deb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800deb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800deb4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800deb6:	47a0      	blx	r4
 800deb8:	3001      	adds	r0, #1
 800deba:	d1c5      	bne.n	800de48 <_printf_float+0x31c>
 800debc:	e692      	b.n	800dbe4 <_printf_float+0xb8>
 800debe:	002a      	movs	r2, r5
 800dec0:	2301      	movs	r3, #1
 800dec2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dec4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dec6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800dec8:	321a      	adds	r2, #26
 800deca:	47b0      	blx	r6
 800decc:	3001      	adds	r0, #1
 800dece:	d100      	bne.n	800ded2 <_printf_float+0x3a6>
 800ded0:	e688      	b.n	800dbe4 <_printf_float+0xb8>
 800ded2:	3401      	adds	r4, #1
 800ded4:	e7bd      	b.n	800de52 <_printf_float+0x326>
 800ded6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ded8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800deda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dedc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dede:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800dee0:	47a0      	blx	r4
 800dee2:	3001      	adds	r0, #1
 800dee4:	d1c1      	bne.n	800de6a <_printf_float+0x33e>
 800dee6:	e67d      	b.n	800dbe4 <_printf_float+0xb8>
 800dee8:	19ba      	adds	r2, r7, r6
 800deea:	0023      	movs	r3, r4
 800deec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800deee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800def0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800def2:	47b0      	blx	r6
 800def4:	3001      	adds	r0, #1
 800def6:	d1c2      	bne.n	800de7e <_printf_float+0x352>
 800def8:	e674      	b.n	800dbe4 <_printf_float+0xb8>
 800defa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800defc:	930c      	str	r3, [sp, #48]	@ 0x30
 800defe:	2b01      	cmp	r3, #1
 800df00:	dc02      	bgt.n	800df08 <_printf_float+0x3dc>
 800df02:	2301      	movs	r3, #1
 800df04:	421a      	tst	r2, r3
 800df06:	d039      	beq.n	800df7c <_printf_float+0x450>
 800df08:	2301      	movs	r3, #1
 800df0a:	003a      	movs	r2, r7
 800df0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df10:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800df12:	47b0      	blx	r6
 800df14:	3001      	adds	r0, #1
 800df16:	d100      	bne.n	800df1a <_printf_float+0x3ee>
 800df18:	e664      	b.n	800dbe4 <_printf_float+0xb8>
 800df1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800df1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df22:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800df24:	47b0      	blx	r6
 800df26:	3001      	adds	r0, #1
 800df28:	d100      	bne.n	800df2c <_printf_float+0x400>
 800df2a:	e65b      	b.n	800dbe4 <_printf_float+0xb8>
 800df2c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800df2e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800df30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df32:	2200      	movs	r2, #0
 800df34:	3b01      	subs	r3, #1
 800df36:	930c      	str	r3, [sp, #48]	@ 0x30
 800df38:	2300      	movs	r3, #0
 800df3a:	f7f2 fa87 	bl	800044c <__aeabi_dcmpeq>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d11a      	bne.n	800df78 <_printf_float+0x44c>
 800df42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df44:	1c7a      	adds	r2, r7, #1
 800df46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df4a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800df4c:	47b0      	blx	r6
 800df4e:	3001      	adds	r0, #1
 800df50:	d10e      	bne.n	800df70 <_printf_float+0x444>
 800df52:	e647      	b.n	800dbe4 <_printf_float+0xb8>
 800df54:	002a      	movs	r2, r5
 800df56:	2301      	movs	r3, #1
 800df58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df5c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800df5e:	321a      	adds	r2, #26
 800df60:	47b8      	blx	r7
 800df62:	3001      	adds	r0, #1
 800df64:	d100      	bne.n	800df68 <_printf_float+0x43c>
 800df66:	e63d      	b.n	800dbe4 <_printf_float+0xb8>
 800df68:	3601      	adds	r6, #1
 800df6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df6c:	429e      	cmp	r6, r3
 800df6e:	dbf1      	blt.n	800df54 <_printf_float+0x428>
 800df70:	002a      	movs	r2, r5
 800df72:	0023      	movs	r3, r4
 800df74:	3250      	adds	r2, #80	@ 0x50
 800df76:	e6d9      	b.n	800dd2c <_printf_float+0x200>
 800df78:	2600      	movs	r6, #0
 800df7a:	e7f6      	b.n	800df6a <_printf_float+0x43e>
 800df7c:	003a      	movs	r2, r7
 800df7e:	e7e2      	b.n	800df46 <_printf_float+0x41a>
 800df80:	002a      	movs	r2, r5
 800df82:	2301      	movs	r3, #1
 800df84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df88:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800df8a:	3219      	adds	r2, #25
 800df8c:	47b0      	blx	r6
 800df8e:	3001      	adds	r0, #1
 800df90:	d100      	bne.n	800df94 <_printf_float+0x468>
 800df92:	e627      	b.n	800dbe4 <_printf_float+0xb8>
 800df94:	3401      	adds	r4, #1
 800df96:	68eb      	ldr	r3, [r5, #12]
 800df98:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800df9a:	1a9b      	subs	r3, r3, r2
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	dcef      	bgt.n	800df80 <_printf_float+0x454>
 800dfa0:	e6f8      	b.n	800dd94 <_printf_float+0x268>
 800dfa2:	2400      	movs	r4, #0
 800dfa4:	e7f7      	b.n	800df96 <_printf_float+0x46a>
 800dfa6:	46c0      	nop			@ (mov r8, r8)

0800dfa8 <_printf_common>:
 800dfa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfaa:	0016      	movs	r6, r2
 800dfac:	9301      	str	r3, [sp, #4]
 800dfae:	688a      	ldr	r2, [r1, #8]
 800dfb0:	690b      	ldr	r3, [r1, #16]
 800dfb2:	000c      	movs	r4, r1
 800dfb4:	9000      	str	r0, [sp, #0]
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	da00      	bge.n	800dfbc <_printf_common+0x14>
 800dfba:	0013      	movs	r3, r2
 800dfbc:	0022      	movs	r2, r4
 800dfbe:	6033      	str	r3, [r6, #0]
 800dfc0:	3243      	adds	r2, #67	@ 0x43
 800dfc2:	7812      	ldrb	r2, [r2, #0]
 800dfc4:	2a00      	cmp	r2, #0
 800dfc6:	d001      	beq.n	800dfcc <_printf_common+0x24>
 800dfc8:	3301      	adds	r3, #1
 800dfca:	6033      	str	r3, [r6, #0]
 800dfcc:	6823      	ldr	r3, [r4, #0]
 800dfce:	069b      	lsls	r3, r3, #26
 800dfd0:	d502      	bpl.n	800dfd8 <_printf_common+0x30>
 800dfd2:	6833      	ldr	r3, [r6, #0]
 800dfd4:	3302      	adds	r3, #2
 800dfd6:	6033      	str	r3, [r6, #0]
 800dfd8:	6822      	ldr	r2, [r4, #0]
 800dfda:	2306      	movs	r3, #6
 800dfdc:	0015      	movs	r5, r2
 800dfde:	401d      	ands	r5, r3
 800dfe0:	421a      	tst	r2, r3
 800dfe2:	d027      	beq.n	800e034 <_printf_common+0x8c>
 800dfe4:	0023      	movs	r3, r4
 800dfe6:	3343      	adds	r3, #67	@ 0x43
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	1e5a      	subs	r2, r3, #1
 800dfec:	4193      	sbcs	r3, r2
 800dfee:	6822      	ldr	r2, [r4, #0]
 800dff0:	0692      	lsls	r2, r2, #26
 800dff2:	d430      	bmi.n	800e056 <_printf_common+0xae>
 800dff4:	0022      	movs	r2, r4
 800dff6:	9901      	ldr	r1, [sp, #4]
 800dff8:	9800      	ldr	r0, [sp, #0]
 800dffa:	9d08      	ldr	r5, [sp, #32]
 800dffc:	3243      	adds	r2, #67	@ 0x43
 800dffe:	47a8      	blx	r5
 800e000:	3001      	adds	r0, #1
 800e002:	d025      	beq.n	800e050 <_printf_common+0xa8>
 800e004:	2206      	movs	r2, #6
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	2500      	movs	r5, #0
 800e00a:	4013      	ands	r3, r2
 800e00c:	2b04      	cmp	r3, #4
 800e00e:	d105      	bne.n	800e01c <_printf_common+0x74>
 800e010:	6833      	ldr	r3, [r6, #0]
 800e012:	68e5      	ldr	r5, [r4, #12]
 800e014:	1aed      	subs	r5, r5, r3
 800e016:	43eb      	mvns	r3, r5
 800e018:	17db      	asrs	r3, r3, #31
 800e01a:	401d      	ands	r5, r3
 800e01c:	68a3      	ldr	r3, [r4, #8]
 800e01e:	6922      	ldr	r2, [r4, #16]
 800e020:	4293      	cmp	r3, r2
 800e022:	dd01      	ble.n	800e028 <_printf_common+0x80>
 800e024:	1a9b      	subs	r3, r3, r2
 800e026:	18ed      	adds	r5, r5, r3
 800e028:	2600      	movs	r6, #0
 800e02a:	42b5      	cmp	r5, r6
 800e02c:	d120      	bne.n	800e070 <_printf_common+0xc8>
 800e02e:	2000      	movs	r0, #0
 800e030:	e010      	b.n	800e054 <_printf_common+0xac>
 800e032:	3501      	adds	r5, #1
 800e034:	68e3      	ldr	r3, [r4, #12]
 800e036:	6832      	ldr	r2, [r6, #0]
 800e038:	1a9b      	subs	r3, r3, r2
 800e03a:	42ab      	cmp	r3, r5
 800e03c:	ddd2      	ble.n	800dfe4 <_printf_common+0x3c>
 800e03e:	0022      	movs	r2, r4
 800e040:	2301      	movs	r3, #1
 800e042:	9901      	ldr	r1, [sp, #4]
 800e044:	9800      	ldr	r0, [sp, #0]
 800e046:	9f08      	ldr	r7, [sp, #32]
 800e048:	3219      	adds	r2, #25
 800e04a:	47b8      	blx	r7
 800e04c:	3001      	adds	r0, #1
 800e04e:	d1f0      	bne.n	800e032 <_printf_common+0x8a>
 800e050:	2001      	movs	r0, #1
 800e052:	4240      	negs	r0, r0
 800e054:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e056:	2030      	movs	r0, #48	@ 0x30
 800e058:	18e1      	adds	r1, r4, r3
 800e05a:	3143      	adds	r1, #67	@ 0x43
 800e05c:	7008      	strb	r0, [r1, #0]
 800e05e:	0021      	movs	r1, r4
 800e060:	1c5a      	adds	r2, r3, #1
 800e062:	3145      	adds	r1, #69	@ 0x45
 800e064:	7809      	ldrb	r1, [r1, #0]
 800e066:	18a2      	adds	r2, r4, r2
 800e068:	3243      	adds	r2, #67	@ 0x43
 800e06a:	3302      	adds	r3, #2
 800e06c:	7011      	strb	r1, [r2, #0]
 800e06e:	e7c1      	b.n	800dff4 <_printf_common+0x4c>
 800e070:	0022      	movs	r2, r4
 800e072:	2301      	movs	r3, #1
 800e074:	9901      	ldr	r1, [sp, #4]
 800e076:	9800      	ldr	r0, [sp, #0]
 800e078:	9f08      	ldr	r7, [sp, #32]
 800e07a:	321a      	adds	r2, #26
 800e07c:	47b8      	blx	r7
 800e07e:	3001      	adds	r0, #1
 800e080:	d0e6      	beq.n	800e050 <_printf_common+0xa8>
 800e082:	3601      	adds	r6, #1
 800e084:	e7d1      	b.n	800e02a <_printf_common+0x82>
	...

0800e088 <_printf_i>:
 800e088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e08a:	b08b      	sub	sp, #44	@ 0x2c
 800e08c:	9206      	str	r2, [sp, #24]
 800e08e:	000a      	movs	r2, r1
 800e090:	3243      	adds	r2, #67	@ 0x43
 800e092:	9307      	str	r3, [sp, #28]
 800e094:	9005      	str	r0, [sp, #20]
 800e096:	9203      	str	r2, [sp, #12]
 800e098:	7e0a      	ldrb	r2, [r1, #24]
 800e09a:	000c      	movs	r4, r1
 800e09c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e09e:	2a78      	cmp	r2, #120	@ 0x78
 800e0a0:	d809      	bhi.n	800e0b6 <_printf_i+0x2e>
 800e0a2:	2a62      	cmp	r2, #98	@ 0x62
 800e0a4:	d80b      	bhi.n	800e0be <_printf_i+0x36>
 800e0a6:	2a00      	cmp	r2, #0
 800e0a8:	d100      	bne.n	800e0ac <_printf_i+0x24>
 800e0aa:	e0ba      	b.n	800e222 <_printf_i+0x19a>
 800e0ac:	497a      	ldr	r1, [pc, #488]	@ (800e298 <_printf_i+0x210>)
 800e0ae:	9104      	str	r1, [sp, #16]
 800e0b0:	2a58      	cmp	r2, #88	@ 0x58
 800e0b2:	d100      	bne.n	800e0b6 <_printf_i+0x2e>
 800e0b4:	e08e      	b.n	800e1d4 <_printf_i+0x14c>
 800e0b6:	0025      	movs	r5, r4
 800e0b8:	3542      	adds	r5, #66	@ 0x42
 800e0ba:	702a      	strb	r2, [r5, #0]
 800e0bc:	e022      	b.n	800e104 <_printf_i+0x7c>
 800e0be:	0010      	movs	r0, r2
 800e0c0:	3863      	subs	r0, #99	@ 0x63
 800e0c2:	2815      	cmp	r0, #21
 800e0c4:	d8f7      	bhi.n	800e0b6 <_printf_i+0x2e>
 800e0c6:	f7f2 f831 	bl	800012c <__gnu_thumb1_case_shi>
 800e0ca:	0016      	.short	0x0016
 800e0cc:	fff6001f 	.word	0xfff6001f
 800e0d0:	fff6fff6 	.word	0xfff6fff6
 800e0d4:	001ffff6 	.word	0x001ffff6
 800e0d8:	fff6fff6 	.word	0xfff6fff6
 800e0dc:	fff6fff6 	.word	0xfff6fff6
 800e0e0:	0036009f 	.word	0x0036009f
 800e0e4:	fff6007e 	.word	0xfff6007e
 800e0e8:	00b0fff6 	.word	0x00b0fff6
 800e0ec:	0036fff6 	.word	0x0036fff6
 800e0f0:	fff6fff6 	.word	0xfff6fff6
 800e0f4:	0082      	.short	0x0082
 800e0f6:	0025      	movs	r5, r4
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	3542      	adds	r5, #66	@ 0x42
 800e0fc:	1d11      	adds	r1, r2, #4
 800e0fe:	6019      	str	r1, [r3, #0]
 800e100:	6813      	ldr	r3, [r2, #0]
 800e102:	702b      	strb	r3, [r5, #0]
 800e104:	2301      	movs	r3, #1
 800e106:	e09e      	b.n	800e246 <_printf_i+0x1be>
 800e108:	6818      	ldr	r0, [r3, #0]
 800e10a:	6809      	ldr	r1, [r1, #0]
 800e10c:	1d02      	adds	r2, r0, #4
 800e10e:	060d      	lsls	r5, r1, #24
 800e110:	d50b      	bpl.n	800e12a <_printf_i+0xa2>
 800e112:	6806      	ldr	r6, [r0, #0]
 800e114:	601a      	str	r2, [r3, #0]
 800e116:	2e00      	cmp	r6, #0
 800e118:	da03      	bge.n	800e122 <_printf_i+0x9a>
 800e11a:	232d      	movs	r3, #45	@ 0x2d
 800e11c:	9a03      	ldr	r2, [sp, #12]
 800e11e:	4276      	negs	r6, r6
 800e120:	7013      	strb	r3, [r2, #0]
 800e122:	4b5d      	ldr	r3, [pc, #372]	@ (800e298 <_printf_i+0x210>)
 800e124:	270a      	movs	r7, #10
 800e126:	9304      	str	r3, [sp, #16]
 800e128:	e018      	b.n	800e15c <_printf_i+0xd4>
 800e12a:	6806      	ldr	r6, [r0, #0]
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	0649      	lsls	r1, r1, #25
 800e130:	d5f1      	bpl.n	800e116 <_printf_i+0x8e>
 800e132:	b236      	sxth	r6, r6
 800e134:	e7ef      	b.n	800e116 <_printf_i+0x8e>
 800e136:	6808      	ldr	r0, [r1, #0]
 800e138:	6819      	ldr	r1, [r3, #0]
 800e13a:	c940      	ldmia	r1!, {r6}
 800e13c:	0605      	lsls	r5, r0, #24
 800e13e:	d402      	bmi.n	800e146 <_printf_i+0xbe>
 800e140:	0640      	lsls	r0, r0, #25
 800e142:	d500      	bpl.n	800e146 <_printf_i+0xbe>
 800e144:	b2b6      	uxth	r6, r6
 800e146:	6019      	str	r1, [r3, #0]
 800e148:	4b53      	ldr	r3, [pc, #332]	@ (800e298 <_printf_i+0x210>)
 800e14a:	270a      	movs	r7, #10
 800e14c:	9304      	str	r3, [sp, #16]
 800e14e:	2a6f      	cmp	r2, #111	@ 0x6f
 800e150:	d100      	bne.n	800e154 <_printf_i+0xcc>
 800e152:	3f02      	subs	r7, #2
 800e154:	0023      	movs	r3, r4
 800e156:	2200      	movs	r2, #0
 800e158:	3343      	adds	r3, #67	@ 0x43
 800e15a:	701a      	strb	r2, [r3, #0]
 800e15c:	6863      	ldr	r3, [r4, #4]
 800e15e:	60a3      	str	r3, [r4, #8]
 800e160:	2b00      	cmp	r3, #0
 800e162:	db06      	blt.n	800e172 <_printf_i+0xea>
 800e164:	2104      	movs	r1, #4
 800e166:	6822      	ldr	r2, [r4, #0]
 800e168:	9d03      	ldr	r5, [sp, #12]
 800e16a:	438a      	bics	r2, r1
 800e16c:	6022      	str	r2, [r4, #0]
 800e16e:	4333      	orrs	r3, r6
 800e170:	d00c      	beq.n	800e18c <_printf_i+0x104>
 800e172:	9d03      	ldr	r5, [sp, #12]
 800e174:	0030      	movs	r0, r6
 800e176:	0039      	movs	r1, r7
 800e178:	f7f2 f868 	bl	800024c <__aeabi_uidivmod>
 800e17c:	9b04      	ldr	r3, [sp, #16]
 800e17e:	3d01      	subs	r5, #1
 800e180:	5c5b      	ldrb	r3, [r3, r1]
 800e182:	702b      	strb	r3, [r5, #0]
 800e184:	0033      	movs	r3, r6
 800e186:	0006      	movs	r6, r0
 800e188:	429f      	cmp	r7, r3
 800e18a:	d9f3      	bls.n	800e174 <_printf_i+0xec>
 800e18c:	2f08      	cmp	r7, #8
 800e18e:	d109      	bne.n	800e1a4 <_printf_i+0x11c>
 800e190:	6823      	ldr	r3, [r4, #0]
 800e192:	07db      	lsls	r3, r3, #31
 800e194:	d506      	bpl.n	800e1a4 <_printf_i+0x11c>
 800e196:	6862      	ldr	r2, [r4, #4]
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	dc02      	bgt.n	800e1a4 <_printf_i+0x11c>
 800e19e:	2330      	movs	r3, #48	@ 0x30
 800e1a0:	3d01      	subs	r5, #1
 800e1a2:	702b      	strb	r3, [r5, #0]
 800e1a4:	9b03      	ldr	r3, [sp, #12]
 800e1a6:	1b5b      	subs	r3, r3, r5
 800e1a8:	6123      	str	r3, [r4, #16]
 800e1aa:	9b07      	ldr	r3, [sp, #28]
 800e1ac:	0021      	movs	r1, r4
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	9805      	ldr	r0, [sp, #20]
 800e1b2:	9b06      	ldr	r3, [sp, #24]
 800e1b4:	aa09      	add	r2, sp, #36	@ 0x24
 800e1b6:	f7ff fef7 	bl	800dfa8 <_printf_common>
 800e1ba:	3001      	adds	r0, #1
 800e1bc:	d148      	bne.n	800e250 <_printf_i+0x1c8>
 800e1be:	2001      	movs	r0, #1
 800e1c0:	4240      	negs	r0, r0
 800e1c2:	b00b      	add	sp, #44	@ 0x2c
 800e1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1c6:	2220      	movs	r2, #32
 800e1c8:	6809      	ldr	r1, [r1, #0]
 800e1ca:	430a      	orrs	r2, r1
 800e1cc:	6022      	str	r2, [r4, #0]
 800e1ce:	2278      	movs	r2, #120	@ 0x78
 800e1d0:	4932      	ldr	r1, [pc, #200]	@ (800e29c <_printf_i+0x214>)
 800e1d2:	9104      	str	r1, [sp, #16]
 800e1d4:	0021      	movs	r1, r4
 800e1d6:	3145      	adds	r1, #69	@ 0x45
 800e1d8:	700a      	strb	r2, [r1, #0]
 800e1da:	6819      	ldr	r1, [r3, #0]
 800e1dc:	6822      	ldr	r2, [r4, #0]
 800e1de:	c940      	ldmia	r1!, {r6}
 800e1e0:	0610      	lsls	r0, r2, #24
 800e1e2:	d402      	bmi.n	800e1ea <_printf_i+0x162>
 800e1e4:	0650      	lsls	r0, r2, #25
 800e1e6:	d500      	bpl.n	800e1ea <_printf_i+0x162>
 800e1e8:	b2b6      	uxth	r6, r6
 800e1ea:	6019      	str	r1, [r3, #0]
 800e1ec:	07d3      	lsls	r3, r2, #31
 800e1ee:	d502      	bpl.n	800e1f6 <_printf_i+0x16e>
 800e1f0:	2320      	movs	r3, #32
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	2e00      	cmp	r6, #0
 800e1f8:	d001      	beq.n	800e1fe <_printf_i+0x176>
 800e1fa:	2710      	movs	r7, #16
 800e1fc:	e7aa      	b.n	800e154 <_printf_i+0xcc>
 800e1fe:	2220      	movs	r2, #32
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	4393      	bics	r3, r2
 800e204:	6023      	str	r3, [r4, #0]
 800e206:	e7f8      	b.n	800e1fa <_printf_i+0x172>
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	680d      	ldr	r5, [r1, #0]
 800e20c:	1d10      	adds	r0, r2, #4
 800e20e:	6949      	ldr	r1, [r1, #20]
 800e210:	6018      	str	r0, [r3, #0]
 800e212:	6813      	ldr	r3, [r2, #0]
 800e214:	062e      	lsls	r6, r5, #24
 800e216:	d501      	bpl.n	800e21c <_printf_i+0x194>
 800e218:	6019      	str	r1, [r3, #0]
 800e21a:	e002      	b.n	800e222 <_printf_i+0x19a>
 800e21c:	066d      	lsls	r5, r5, #25
 800e21e:	d5fb      	bpl.n	800e218 <_printf_i+0x190>
 800e220:	8019      	strh	r1, [r3, #0]
 800e222:	2300      	movs	r3, #0
 800e224:	9d03      	ldr	r5, [sp, #12]
 800e226:	6123      	str	r3, [r4, #16]
 800e228:	e7bf      	b.n	800e1aa <_printf_i+0x122>
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	1d11      	adds	r1, r2, #4
 800e22e:	6019      	str	r1, [r3, #0]
 800e230:	6815      	ldr	r5, [r2, #0]
 800e232:	2100      	movs	r1, #0
 800e234:	0028      	movs	r0, r5
 800e236:	6862      	ldr	r2, [r4, #4]
 800e238:	f000 f9c9 	bl	800e5ce <memchr>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d001      	beq.n	800e244 <_printf_i+0x1bc>
 800e240:	1b40      	subs	r0, r0, r5
 800e242:	6060      	str	r0, [r4, #4]
 800e244:	6863      	ldr	r3, [r4, #4]
 800e246:	6123      	str	r3, [r4, #16]
 800e248:	2300      	movs	r3, #0
 800e24a:	9a03      	ldr	r2, [sp, #12]
 800e24c:	7013      	strb	r3, [r2, #0]
 800e24e:	e7ac      	b.n	800e1aa <_printf_i+0x122>
 800e250:	002a      	movs	r2, r5
 800e252:	6923      	ldr	r3, [r4, #16]
 800e254:	9906      	ldr	r1, [sp, #24]
 800e256:	9805      	ldr	r0, [sp, #20]
 800e258:	9d07      	ldr	r5, [sp, #28]
 800e25a:	47a8      	blx	r5
 800e25c:	3001      	adds	r0, #1
 800e25e:	d0ae      	beq.n	800e1be <_printf_i+0x136>
 800e260:	6823      	ldr	r3, [r4, #0]
 800e262:	079b      	lsls	r3, r3, #30
 800e264:	d415      	bmi.n	800e292 <_printf_i+0x20a>
 800e266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e268:	68e0      	ldr	r0, [r4, #12]
 800e26a:	4298      	cmp	r0, r3
 800e26c:	daa9      	bge.n	800e1c2 <_printf_i+0x13a>
 800e26e:	0018      	movs	r0, r3
 800e270:	e7a7      	b.n	800e1c2 <_printf_i+0x13a>
 800e272:	0022      	movs	r2, r4
 800e274:	2301      	movs	r3, #1
 800e276:	9906      	ldr	r1, [sp, #24]
 800e278:	9805      	ldr	r0, [sp, #20]
 800e27a:	9e07      	ldr	r6, [sp, #28]
 800e27c:	3219      	adds	r2, #25
 800e27e:	47b0      	blx	r6
 800e280:	3001      	adds	r0, #1
 800e282:	d09c      	beq.n	800e1be <_printf_i+0x136>
 800e284:	3501      	adds	r5, #1
 800e286:	68e3      	ldr	r3, [r4, #12]
 800e288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e28a:	1a9b      	subs	r3, r3, r2
 800e28c:	42ab      	cmp	r3, r5
 800e28e:	dcf0      	bgt.n	800e272 <_printf_i+0x1ea>
 800e290:	e7e9      	b.n	800e266 <_printf_i+0x1de>
 800e292:	2500      	movs	r5, #0
 800e294:	e7f7      	b.n	800e286 <_printf_i+0x1fe>
 800e296:	46c0      	nop			@ (mov r8, r8)
 800e298:	08010ea2 	.word	0x08010ea2
 800e29c:	08010eb3 	.word	0x08010eb3

0800e2a0 <std>:
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	b510      	push	{r4, lr}
 800e2a4:	0004      	movs	r4, r0
 800e2a6:	6003      	str	r3, [r0, #0]
 800e2a8:	6043      	str	r3, [r0, #4]
 800e2aa:	6083      	str	r3, [r0, #8]
 800e2ac:	8181      	strh	r1, [r0, #12]
 800e2ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800e2b0:	81c2      	strh	r2, [r0, #14]
 800e2b2:	6103      	str	r3, [r0, #16]
 800e2b4:	6143      	str	r3, [r0, #20]
 800e2b6:	6183      	str	r3, [r0, #24]
 800e2b8:	0019      	movs	r1, r3
 800e2ba:	2208      	movs	r2, #8
 800e2bc:	305c      	adds	r0, #92	@ 0x5c
 800e2be:	f000 f8ff 	bl	800e4c0 <memset>
 800e2c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f0 <std+0x50>)
 800e2c4:	6224      	str	r4, [r4, #32]
 800e2c6:	6263      	str	r3, [r4, #36]	@ 0x24
 800e2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e2f4 <std+0x54>)
 800e2ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e2f8 <std+0x58>)
 800e2ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e2fc <std+0x5c>)
 800e2d2:	6323      	str	r3, [r4, #48]	@ 0x30
 800e2d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e300 <std+0x60>)
 800e2d6:	429c      	cmp	r4, r3
 800e2d8:	d005      	beq.n	800e2e6 <std+0x46>
 800e2da:	4b0a      	ldr	r3, [pc, #40]	@ (800e304 <std+0x64>)
 800e2dc:	429c      	cmp	r4, r3
 800e2de:	d002      	beq.n	800e2e6 <std+0x46>
 800e2e0:	4b09      	ldr	r3, [pc, #36]	@ (800e308 <std+0x68>)
 800e2e2:	429c      	cmp	r4, r3
 800e2e4:	d103      	bne.n	800e2ee <std+0x4e>
 800e2e6:	0020      	movs	r0, r4
 800e2e8:	3058      	adds	r0, #88	@ 0x58
 800e2ea:	f000 f96d 	bl	800e5c8 <__retarget_lock_init_recursive>
 800e2ee:	bd10      	pop	{r4, pc}
 800e2f0:	0800e429 	.word	0x0800e429
 800e2f4:	0800e451 	.word	0x0800e451
 800e2f8:	0800e489 	.word	0x0800e489
 800e2fc:	0800e4b5 	.word	0x0800e4b5
 800e300:	20000e94 	.word	0x20000e94
 800e304:	20000efc 	.word	0x20000efc
 800e308:	20000f64 	.word	0x20000f64

0800e30c <stdio_exit_handler>:
 800e30c:	b510      	push	{r4, lr}
 800e30e:	4a03      	ldr	r2, [pc, #12]	@ (800e31c <stdio_exit_handler+0x10>)
 800e310:	4903      	ldr	r1, [pc, #12]	@ (800e320 <stdio_exit_handler+0x14>)
 800e312:	4804      	ldr	r0, [pc, #16]	@ (800e324 <stdio_exit_handler+0x18>)
 800e314:	f000 f86c 	bl	800e3f0 <_fwalk_sglue>
 800e318:	bd10      	pop	{r4, pc}
 800e31a:	46c0      	nop			@ (mov r8, r8)
 800e31c:	20000194 	.word	0x20000194
 800e320:	0800fd21 	.word	0x0800fd21
 800e324:	200001a4 	.word	0x200001a4

0800e328 <cleanup_stdio>:
 800e328:	6841      	ldr	r1, [r0, #4]
 800e32a:	4b0b      	ldr	r3, [pc, #44]	@ (800e358 <cleanup_stdio+0x30>)
 800e32c:	b510      	push	{r4, lr}
 800e32e:	0004      	movs	r4, r0
 800e330:	4299      	cmp	r1, r3
 800e332:	d001      	beq.n	800e338 <cleanup_stdio+0x10>
 800e334:	f001 fcf4 	bl	800fd20 <_fflush_r>
 800e338:	68a1      	ldr	r1, [r4, #8]
 800e33a:	4b08      	ldr	r3, [pc, #32]	@ (800e35c <cleanup_stdio+0x34>)
 800e33c:	4299      	cmp	r1, r3
 800e33e:	d002      	beq.n	800e346 <cleanup_stdio+0x1e>
 800e340:	0020      	movs	r0, r4
 800e342:	f001 fced 	bl	800fd20 <_fflush_r>
 800e346:	68e1      	ldr	r1, [r4, #12]
 800e348:	4b05      	ldr	r3, [pc, #20]	@ (800e360 <cleanup_stdio+0x38>)
 800e34a:	4299      	cmp	r1, r3
 800e34c:	d002      	beq.n	800e354 <cleanup_stdio+0x2c>
 800e34e:	0020      	movs	r0, r4
 800e350:	f001 fce6 	bl	800fd20 <_fflush_r>
 800e354:	bd10      	pop	{r4, pc}
 800e356:	46c0      	nop			@ (mov r8, r8)
 800e358:	20000e94 	.word	0x20000e94
 800e35c:	20000efc 	.word	0x20000efc
 800e360:	20000f64 	.word	0x20000f64

0800e364 <global_stdio_init.part.0>:
 800e364:	b510      	push	{r4, lr}
 800e366:	4b09      	ldr	r3, [pc, #36]	@ (800e38c <global_stdio_init.part.0+0x28>)
 800e368:	4a09      	ldr	r2, [pc, #36]	@ (800e390 <global_stdio_init.part.0+0x2c>)
 800e36a:	2104      	movs	r1, #4
 800e36c:	601a      	str	r2, [r3, #0]
 800e36e:	4809      	ldr	r0, [pc, #36]	@ (800e394 <global_stdio_init.part.0+0x30>)
 800e370:	2200      	movs	r2, #0
 800e372:	f7ff ff95 	bl	800e2a0 <std>
 800e376:	2201      	movs	r2, #1
 800e378:	2109      	movs	r1, #9
 800e37a:	4807      	ldr	r0, [pc, #28]	@ (800e398 <global_stdio_init.part.0+0x34>)
 800e37c:	f7ff ff90 	bl	800e2a0 <std>
 800e380:	2202      	movs	r2, #2
 800e382:	2112      	movs	r1, #18
 800e384:	4805      	ldr	r0, [pc, #20]	@ (800e39c <global_stdio_init.part.0+0x38>)
 800e386:	f7ff ff8b 	bl	800e2a0 <std>
 800e38a:	bd10      	pop	{r4, pc}
 800e38c:	20000fcc 	.word	0x20000fcc
 800e390:	0800e30d 	.word	0x0800e30d
 800e394:	20000e94 	.word	0x20000e94
 800e398:	20000efc 	.word	0x20000efc
 800e39c:	20000f64 	.word	0x20000f64

0800e3a0 <__sfp_lock_acquire>:
 800e3a0:	b510      	push	{r4, lr}
 800e3a2:	4802      	ldr	r0, [pc, #8]	@ (800e3ac <__sfp_lock_acquire+0xc>)
 800e3a4:	f000 f911 	bl	800e5ca <__retarget_lock_acquire_recursive>
 800e3a8:	bd10      	pop	{r4, pc}
 800e3aa:	46c0      	nop			@ (mov r8, r8)
 800e3ac:	20000fd5 	.word	0x20000fd5

0800e3b0 <__sfp_lock_release>:
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	4802      	ldr	r0, [pc, #8]	@ (800e3bc <__sfp_lock_release+0xc>)
 800e3b4:	f000 f90a 	bl	800e5cc <__retarget_lock_release_recursive>
 800e3b8:	bd10      	pop	{r4, pc}
 800e3ba:	46c0      	nop			@ (mov r8, r8)
 800e3bc:	20000fd5 	.word	0x20000fd5

0800e3c0 <__sinit>:
 800e3c0:	b510      	push	{r4, lr}
 800e3c2:	0004      	movs	r4, r0
 800e3c4:	f7ff ffec 	bl	800e3a0 <__sfp_lock_acquire>
 800e3c8:	6a23      	ldr	r3, [r4, #32]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d002      	beq.n	800e3d4 <__sinit+0x14>
 800e3ce:	f7ff ffef 	bl	800e3b0 <__sfp_lock_release>
 800e3d2:	bd10      	pop	{r4, pc}
 800e3d4:	4b04      	ldr	r3, [pc, #16]	@ (800e3e8 <__sinit+0x28>)
 800e3d6:	6223      	str	r3, [r4, #32]
 800e3d8:	4b04      	ldr	r3, [pc, #16]	@ (800e3ec <__sinit+0x2c>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1f6      	bne.n	800e3ce <__sinit+0xe>
 800e3e0:	f7ff ffc0 	bl	800e364 <global_stdio_init.part.0>
 800e3e4:	e7f3      	b.n	800e3ce <__sinit+0xe>
 800e3e6:	46c0      	nop			@ (mov r8, r8)
 800e3e8:	0800e329 	.word	0x0800e329
 800e3ec:	20000fcc 	.word	0x20000fcc

0800e3f0 <_fwalk_sglue>:
 800e3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3f2:	0014      	movs	r4, r2
 800e3f4:	2600      	movs	r6, #0
 800e3f6:	9000      	str	r0, [sp, #0]
 800e3f8:	9101      	str	r1, [sp, #4]
 800e3fa:	68a5      	ldr	r5, [r4, #8]
 800e3fc:	6867      	ldr	r7, [r4, #4]
 800e3fe:	3f01      	subs	r7, #1
 800e400:	d504      	bpl.n	800e40c <_fwalk_sglue+0x1c>
 800e402:	6824      	ldr	r4, [r4, #0]
 800e404:	2c00      	cmp	r4, #0
 800e406:	d1f8      	bne.n	800e3fa <_fwalk_sglue+0xa>
 800e408:	0030      	movs	r0, r6
 800e40a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e40c:	89ab      	ldrh	r3, [r5, #12]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d908      	bls.n	800e424 <_fwalk_sglue+0x34>
 800e412:	220e      	movs	r2, #14
 800e414:	5eab      	ldrsh	r3, [r5, r2]
 800e416:	3301      	adds	r3, #1
 800e418:	d004      	beq.n	800e424 <_fwalk_sglue+0x34>
 800e41a:	0029      	movs	r1, r5
 800e41c:	9800      	ldr	r0, [sp, #0]
 800e41e:	9b01      	ldr	r3, [sp, #4]
 800e420:	4798      	blx	r3
 800e422:	4306      	orrs	r6, r0
 800e424:	3568      	adds	r5, #104	@ 0x68
 800e426:	e7ea      	b.n	800e3fe <_fwalk_sglue+0xe>

0800e428 <__sread>:
 800e428:	b570      	push	{r4, r5, r6, lr}
 800e42a:	000c      	movs	r4, r1
 800e42c:	250e      	movs	r5, #14
 800e42e:	5f49      	ldrsh	r1, [r1, r5]
 800e430:	f000 f878 	bl	800e524 <_read_r>
 800e434:	2800      	cmp	r0, #0
 800e436:	db03      	blt.n	800e440 <__sread+0x18>
 800e438:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e43a:	181b      	adds	r3, r3, r0
 800e43c:	6563      	str	r3, [r4, #84]	@ 0x54
 800e43e:	bd70      	pop	{r4, r5, r6, pc}
 800e440:	89a3      	ldrh	r3, [r4, #12]
 800e442:	4a02      	ldr	r2, [pc, #8]	@ (800e44c <__sread+0x24>)
 800e444:	4013      	ands	r3, r2
 800e446:	81a3      	strh	r3, [r4, #12]
 800e448:	e7f9      	b.n	800e43e <__sread+0x16>
 800e44a:	46c0      	nop			@ (mov r8, r8)
 800e44c:	ffffefff 	.word	0xffffefff

0800e450 <__swrite>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	001f      	movs	r7, r3
 800e454:	898b      	ldrh	r3, [r1, #12]
 800e456:	0005      	movs	r5, r0
 800e458:	000c      	movs	r4, r1
 800e45a:	0016      	movs	r6, r2
 800e45c:	05db      	lsls	r3, r3, #23
 800e45e:	d505      	bpl.n	800e46c <__swrite+0x1c>
 800e460:	230e      	movs	r3, #14
 800e462:	5ec9      	ldrsh	r1, [r1, r3]
 800e464:	2200      	movs	r2, #0
 800e466:	2302      	movs	r3, #2
 800e468:	f000 f848 	bl	800e4fc <_lseek_r>
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	4a05      	ldr	r2, [pc, #20]	@ (800e484 <__swrite+0x34>)
 800e470:	0028      	movs	r0, r5
 800e472:	4013      	ands	r3, r2
 800e474:	81a3      	strh	r3, [r4, #12]
 800e476:	0032      	movs	r2, r6
 800e478:	230e      	movs	r3, #14
 800e47a:	5ee1      	ldrsh	r1, [r4, r3]
 800e47c:	003b      	movs	r3, r7
 800e47e:	f000 f865 	bl	800e54c <_write_r>
 800e482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e484:	ffffefff 	.word	0xffffefff

0800e488 <__sseek>:
 800e488:	b570      	push	{r4, r5, r6, lr}
 800e48a:	000c      	movs	r4, r1
 800e48c:	250e      	movs	r5, #14
 800e48e:	5f49      	ldrsh	r1, [r1, r5]
 800e490:	f000 f834 	bl	800e4fc <_lseek_r>
 800e494:	89a3      	ldrh	r3, [r4, #12]
 800e496:	1c42      	adds	r2, r0, #1
 800e498:	d103      	bne.n	800e4a2 <__sseek+0x1a>
 800e49a:	4a05      	ldr	r2, [pc, #20]	@ (800e4b0 <__sseek+0x28>)
 800e49c:	4013      	ands	r3, r2
 800e49e:	81a3      	strh	r3, [r4, #12]
 800e4a0:	bd70      	pop	{r4, r5, r6, pc}
 800e4a2:	2280      	movs	r2, #128	@ 0x80
 800e4a4:	0152      	lsls	r2, r2, #5
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	81a3      	strh	r3, [r4, #12]
 800e4aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800e4ac:	e7f8      	b.n	800e4a0 <__sseek+0x18>
 800e4ae:	46c0      	nop			@ (mov r8, r8)
 800e4b0:	ffffefff 	.word	0xffffefff

0800e4b4 <__sclose>:
 800e4b4:	b510      	push	{r4, lr}
 800e4b6:	230e      	movs	r3, #14
 800e4b8:	5ec9      	ldrsh	r1, [r1, r3]
 800e4ba:	f000 f80d 	bl	800e4d8 <_close_r>
 800e4be:	bd10      	pop	{r4, pc}

0800e4c0 <memset>:
 800e4c0:	0003      	movs	r3, r0
 800e4c2:	1882      	adds	r2, r0, r2
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d100      	bne.n	800e4ca <memset+0xa>
 800e4c8:	4770      	bx	lr
 800e4ca:	7019      	strb	r1, [r3, #0]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	e7f9      	b.n	800e4c4 <memset+0x4>

0800e4d0 <_localeconv_r>:
 800e4d0:	4800      	ldr	r0, [pc, #0]	@ (800e4d4 <_localeconv_r+0x4>)
 800e4d2:	4770      	bx	lr
 800e4d4:	200002e0 	.word	0x200002e0

0800e4d8 <_close_r>:
 800e4d8:	2300      	movs	r3, #0
 800e4da:	b570      	push	{r4, r5, r6, lr}
 800e4dc:	4d06      	ldr	r5, [pc, #24]	@ (800e4f8 <_close_r+0x20>)
 800e4de:	0004      	movs	r4, r0
 800e4e0:	0008      	movs	r0, r1
 800e4e2:	602b      	str	r3, [r5, #0]
 800e4e4:	f7f4 ff06 	bl	80032f4 <_close>
 800e4e8:	1c43      	adds	r3, r0, #1
 800e4ea:	d103      	bne.n	800e4f4 <_close_r+0x1c>
 800e4ec:	682b      	ldr	r3, [r5, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d000      	beq.n	800e4f4 <_close_r+0x1c>
 800e4f2:	6023      	str	r3, [r4, #0]
 800e4f4:	bd70      	pop	{r4, r5, r6, pc}
 800e4f6:	46c0      	nop			@ (mov r8, r8)
 800e4f8:	20000fd0 	.word	0x20000fd0

0800e4fc <_lseek_r>:
 800e4fc:	b570      	push	{r4, r5, r6, lr}
 800e4fe:	0004      	movs	r4, r0
 800e500:	0008      	movs	r0, r1
 800e502:	0011      	movs	r1, r2
 800e504:	001a      	movs	r2, r3
 800e506:	2300      	movs	r3, #0
 800e508:	4d05      	ldr	r5, [pc, #20]	@ (800e520 <_lseek_r+0x24>)
 800e50a:	602b      	str	r3, [r5, #0]
 800e50c:	f7f4 ff13 	bl	8003336 <_lseek>
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	d103      	bne.n	800e51c <_lseek_r+0x20>
 800e514:	682b      	ldr	r3, [r5, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d000      	beq.n	800e51c <_lseek_r+0x20>
 800e51a:	6023      	str	r3, [r4, #0]
 800e51c:	bd70      	pop	{r4, r5, r6, pc}
 800e51e:	46c0      	nop			@ (mov r8, r8)
 800e520:	20000fd0 	.word	0x20000fd0

0800e524 <_read_r>:
 800e524:	b570      	push	{r4, r5, r6, lr}
 800e526:	0004      	movs	r4, r0
 800e528:	0008      	movs	r0, r1
 800e52a:	0011      	movs	r1, r2
 800e52c:	001a      	movs	r2, r3
 800e52e:	2300      	movs	r3, #0
 800e530:	4d05      	ldr	r5, [pc, #20]	@ (800e548 <_read_r+0x24>)
 800e532:	602b      	str	r3, [r5, #0]
 800e534:	f7f4 fea5 	bl	8003282 <_read>
 800e538:	1c43      	adds	r3, r0, #1
 800e53a:	d103      	bne.n	800e544 <_read_r+0x20>
 800e53c:	682b      	ldr	r3, [r5, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d000      	beq.n	800e544 <_read_r+0x20>
 800e542:	6023      	str	r3, [r4, #0]
 800e544:	bd70      	pop	{r4, r5, r6, pc}
 800e546:	46c0      	nop			@ (mov r8, r8)
 800e548:	20000fd0 	.word	0x20000fd0

0800e54c <_write_r>:
 800e54c:	b570      	push	{r4, r5, r6, lr}
 800e54e:	0004      	movs	r4, r0
 800e550:	0008      	movs	r0, r1
 800e552:	0011      	movs	r1, r2
 800e554:	001a      	movs	r2, r3
 800e556:	2300      	movs	r3, #0
 800e558:	4d05      	ldr	r5, [pc, #20]	@ (800e570 <_write_r+0x24>)
 800e55a:	602b      	str	r3, [r5, #0]
 800e55c:	f7f4 feae 	bl	80032bc <_write>
 800e560:	1c43      	adds	r3, r0, #1
 800e562:	d103      	bne.n	800e56c <_write_r+0x20>
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d000      	beq.n	800e56c <_write_r+0x20>
 800e56a:	6023      	str	r3, [r4, #0]
 800e56c:	bd70      	pop	{r4, r5, r6, pc}
 800e56e:	46c0      	nop			@ (mov r8, r8)
 800e570:	20000fd0 	.word	0x20000fd0

0800e574 <__errno>:
 800e574:	4b01      	ldr	r3, [pc, #4]	@ (800e57c <__errno+0x8>)
 800e576:	6818      	ldr	r0, [r3, #0]
 800e578:	4770      	bx	lr
 800e57a:	46c0      	nop			@ (mov r8, r8)
 800e57c:	200001a0 	.word	0x200001a0

0800e580 <__libc_init_array>:
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	2600      	movs	r6, #0
 800e584:	4c0c      	ldr	r4, [pc, #48]	@ (800e5b8 <__libc_init_array+0x38>)
 800e586:	4d0d      	ldr	r5, [pc, #52]	@ (800e5bc <__libc_init_array+0x3c>)
 800e588:	1b64      	subs	r4, r4, r5
 800e58a:	10a4      	asrs	r4, r4, #2
 800e58c:	42a6      	cmp	r6, r4
 800e58e:	d109      	bne.n	800e5a4 <__libc_init_array+0x24>
 800e590:	2600      	movs	r6, #0
 800e592:	f001 ff4b 	bl	801042c <_init>
 800e596:	4c0a      	ldr	r4, [pc, #40]	@ (800e5c0 <__libc_init_array+0x40>)
 800e598:	4d0a      	ldr	r5, [pc, #40]	@ (800e5c4 <__libc_init_array+0x44>)
 800e59a:	1b64      	subs	r4, r4, r5
 800e59c:	10a4      	asrs	r4, r4, #2
 800e59e:	42a6      	cmp	r6, r4
 800e5a0:	d105      	bne.n	800e5ae <__libc_init_array+0x2e>
 800e5a2:	bd70      	pop	{r4, r5, r6, pc}
 800e5a4:	00b3      	lsls	r3, r6, #2
 800e5a6:	58eb      	ldr	r3, [r5, r3]
 800e5a8:	4798      	blx	r3
 800e5aa:	3601      	adds	r6, #1
 800e5ac:	e7ee      	b.n	800e58c <__libc_init_array+0xc>
 800e5ae:	00b3      	lsls	r3, r6, #2
 800e5b0:	58eb      	ldr	r3, [r5, r3]
 800e5b2:	4798      	blx	r3
 800e5b4:	3601      	adds	r6, #1
 800e5b6:	e7f2      	b.n	800e59e <__libc_init_array+0x1e>
 800e5b8:	08011204 	.word	0x08011204
 800e5bc:	08011204 	.word	0x08011204
 800e5c0:	08011208 	.word	0x08011208
 800e5c4:	08011204 	.word	0x08011204

0800e5c8 <__retarget_lock_init_recursive>:
 800e5c8:	4770      	bx	lr

0800e5ca <__retarget_lock_acquire_recursive>:
 800e5ca:	4770      	bx	lr

0800e5cc <__retarget_lock_release_recursive>:
 800e5cc:	4770      	bx	lr

0800e5ce <memchr>:
 800e5ce:	b2c9      	uxtb	r1, r1
 800e5d0:	1882      	adds	r2, r0, r2
 800e5d2:	4290      	cmp	r0, r2
 800e5d4:	d101      	bne.n	800e5da <memchr+0xc>
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	4770      	bx	lr
 800e5da:	7803      	ldrb	r3, [r0, #0]
 800e5dc:	428b      	cmp	r3, r1
 800e5de:	d0fb      	beq.n	800e5d8 <memchr+0xa>
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	e7f6      	b.n	800e5d2 <memchr+0x4>

0800e5e4 <quorem>:
 800e5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5e6:	6903      	ldr	r3, [r0, #16]
 800e5e8:	690c      	ldr	r4, [r1, #16]
 800e5ea:	b089      	sub	sp, #36	@ 0x24
 800e5ec:	9003      	str	r0, [sp, #12]
 800e5ee:	9106      	str	r1, [sp, #24]
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	42a3      	cmp	r3, r4
 800e5f4:	db63      	blt.n	800e6be <quorem+0xda>
 800e5f6:	000b      	movs	r3, r1
 800e5f8:	3c01      	subs	r4, #1
 800e5fa:	3314      	adds	r3, #20
 800e5fc:	00a5      	lsls	r5, r4, #2
 800e5fe:	9304      	str	r3, [sp, #16]
 800e600:	195b      	adds	r3, r3, r5
 800e602:	9305      	str	r3, [sp, #20]
 800e604:	9b03      	ldr	r3, [sp, #12]
 800e606:	3314      	adds	r3, #20
 800e608:	9301      	str	r3, [sp, #4]
 800e60a:	195d      	adds	r5, r3, r5
 800e60c:	9b05      	ldr	r3, [sp, #20]
 800e60e:	682f      	ldr	r7, [r5, #0]
 800e610:	681e      	ldr	r6, [r3, #0]
 800e612:	0038      	movs	r0, r7
 800e614:	3601      	adds	r6, #1
 800e616:	0031      	movs	r1, r6
 800e618:	f7f1 fd92 	bl	8000140 <__udivsi3>
 800e61c:	9002      	str	r0, [sp, #8]
 800e61e:	42b7      	cmp	r7, r6
 800e620:	d327      	bcc.n	800e672 <quorem+0x8e>
 800e622:	9b04      	ldr	r3, [sp, #16]
 800e624:	2700      	movs	r7, #0
 800e626:	469c      	mov	ip, r3
 800e628:	9e01      	ldr	r6, [sp, #4]
 800e62a:	9707      	str	r7, [sp, #28]
 800e62c:	4662      	mov	r2, ip
 800e62e:	ca08      	ldmia	r2!, {r3}
 800e630:	6830      	ldr	r0, [r6, #0]
 800e632:	4694      	mov	ip, r2
 800e634:	9a02      	ldr	r2, [sp, #8]
 800e636:	b299      	uxth	r1, r3
 800e638:	4351      	muls	r1, r2
 800e63a:	0c1b      	lsrs	r3, r3, #16
 800e63c:	4353      	muls	r3, r2
 800e63e:	19c9      	adds	r1, r1, r7
 800e640:	0c0a      	lsrs	r2, r1, #16
 800e642:	189b      	adds	r3, r3, r2
 800e644:	b289      	uxth	r1, r1
 800e646:	b282      	uxth	r2, r0
 800e648:	1a52      	subs	r2, r2, r1
 800e64a:	9907      	ldr	r1, [sp, #28]
 800e64c:	0c1f      	lsrs	r7, r3, #16
 800e64e:	1852      	adds	r2, r2, r1
 800e650:	0c00      	lsrs	r0, r0, #16
 800e652:	b29b      	uxth	r3, r3
 800e654:	1411      	asrs	r1, r2, #16
 800e656:	1ac3      	subs	r3, r0, r3
 800e658:	185b      	adds	r3, r3, r1
 800e65a:	1419      	asrs	r1, r3, #16
 800e65c:	b292      	uxth	r2, r2
 800e65e:	041b      	lsls	r3, r3, #16
 800e660:	431a      	orrs	r2, r3
 800e662:	9b05      	ldr	r3, [sp, #20]
 800e664:	9107      	str	r1, [sp, #28]
 800e666:	c604      	stmia	r6!, {r2}
 800e668:	4563      	cmp	r3, ip
 800e66a:	d2df      	bcs.n	800e62c <quorem+0x48>
 800e66c:	682b      	ldr	r3, [r5, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d02b      	beq.n	800e6ca <quorem+0xe6>
 800e672:	9906      	ldr	r1, [sp, #24]
 800e674:	9803      	ldr	r0, [sp, #12]
 800e676:	f001 f9b7 	bl	800f9e8 <__mcmp>
 800e67a:	2800      	cmp	r0, #0
 800e67c:	db1e      	blt.n	800e6bc <quorem+0xd8>
 800e67e:	2600      	movs	r6, #0
 800e680:	9d01      	ldr	r5, [sp, #4]
 800e682:	9904      	ldr	r1, [sp, #16]
 800e684:	c901      	ldmia	r1!, {r0}
 800e686:	682b      	ldr	r3, [r5, #0]
 800e688:	b287      	uxth	r7, r0
 800e68a:	b29a      	uxth	r2, r3
 800e68c:	1bd2      	subs	r2, r2, r7
 800e68e:	1992      	adds	r2, r2, r6
 800e690:	0c00      	lsrs	r0, r0, #16
 800e692:	0c1b      	lsrs	r3, r3, #16
 800e694:	1a1b      	subs	r3, r3, r0
 800e696:	1410      	asrs	r0, r2, #16
 800e698:	181b      	adds	r3, r3, r0
 800e69a:	141e      	asrs	r6, r3, #16
 800e69c:	b292      	uxth	r2, r2
 800e69e:	041b      	lsls	r3, r3, #16
 800e6a0:	431a      	orrs	r2, r3
 800e6a2:	9b05      	ldr	r3, [sp, #20]
 800e6a4:	c504      	stmia	r5!, {r2}
 800e6a6:	428b      	cmp	r3, r1
 800e6a8:	d2ec      	bcs.n	800e684 <quorem+0xa0>
 800e6aa:	9a01      	ldr	r2, [sp, #4]
 800e6ac:	00a3      	lsls	r3, r4, #2
 800e6ae:	18d3      	adds	r3, r2, r3
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	2a00      	cmp	r2, #0
 800e6b4:	d014      	beq.n	800e6e0 <quorem+0xfc>
 800e6b6:	9b02      	ldr	r3, [sp, #8]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	9302      	str	r3, [sp, #8]
 800e6bc:	9802      	ldr	r0, [sp, #8]
 800e6be:	b009      	add	sp, #36	@ 0x24
 800e6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6c2:	682b      	ldr	r3, [r5, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d104      	bne.n	800e6d2 <quorem+0xee>
 800e6c8:	3c01      	subs	r4, #1
 800e6ca:	9b01      	ldr	r3, [sp, #4]
 800e6cc:	3d04      	subs	r5, #4
 800e6ce:	42ab      	cmp	r3, r5
 800e6d0:	d3f7      	bcc.n	800e6c2 <quorem+0xde>
 800e6d2:	9b03      	ldr	r3, [sp, #12]
 800e6d4:	611c      	str	r4, [r3, #16]
 800e6d6:	e7cc      	b.n	800e672 <quorem+0x8e>
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	2a00      	cmp	r2, #0
 800e6dc:	d104      	bne.n	800e6e8 <quorem+0x104>
 800e6de:	3c01      	subs	r4, #1
 800e6e0:	9a01      	ldr	r2, [sp, #4]
 800e6e2:	3b04      	subs	r3, #4
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d3f7      	bcc.n	800e6d8 <quorem+0xf4>
 800e6e8:	9b03      	ldr	r3, [sp, #12]
 800e6ea:	611c      	str	r4, [r3, #16]
 800e6ec:	e7e3      	b.n	800e6b6 <quorem+0xd2>
	...

0800e6f0 <_dtoa_r>:
 800e6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6f2:	0014      	movs	r4, r2
 800e6f4:	001d      	movs	r5, r3
 800e6f6:	69c6      	ldr	r6, [r0, #28]
 800e6f8:	b09d      	sub	sp, #116	@ 0x74
 800e6fa:	940a      	str	r4, [sp, #40]	@ 0x28
 800e6fc:	950b      	str	r5, [sp, #44]	@ 0x2c
 800e6fe:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800e700:	9003      	str	r0, [sp, #12]
 800e702:	2e00      	cmp	r6, #0
 800e704:	d10f      	bne.n	800e726 <_dtoa_r+0x36>
 800e706:	2010      	movs	r0, #16
 800e708:	f000 fe2c 	bl	800f364 <malloc>
 800e70c:	9b03      	ldr	r3, [sp, #12]
 800e70e:	1e02      	subs	r2, r0, #0
 800e710:	61d8      	str	r0, [r3, #28]
 800e712:	d104      	bne.n	800e71e <_dtoa_r+0x2e>
 800e714:	21ef      	movs	r1, #239	@ 0xef
 800e716:	4bc7      	ldr	r3, [pc, #796]	@ (800ea34 <_dtoa_r+0x344>)
 800e718:	48c7      	ldr	r0, [pc, #796]	@ (800ea38 <_dtoa_r+0x348>)
 800e71a:	f001 fb49 	bl	800fdb0 <__assert_func>
 800e71e:	6046      	str	r6, [r0, #4]
 800e720:	6086      	str	r6, [r0, #8]
 800e722:	6006      	str	r6, [r0, #0]
 800e724:	60c6      	str	r6, [r0, #12]
 800e726:	9b03      	ldr	r3, [sp, #12]
 800e728:	69db      	ldr	r3, [r3, #28]
 800e72a:	6819      	ldr	r1, [r3, #0]
 800e72c:	2900      	cmp	r1, #0
 800e72e:	d00b      	beq.n	800e748 <_dtoa_r+0x58>
 800e730:	685a      	ldr	r2, [r3, #4]
 800e732:	2301      	movs	r3, #1
 800e734:	4093      	lsls	r3, r2
 800e736:	604a      	str	r2, [r1, #4]
 800e738:	608b      	str	r3, [r1, #8]
 800e73a:	9803      	ldr	r0, [sp, #12]
 800e73c:	f000 ff12 	bl	800f564 <_Bfree>
 800e740:	2200      	movs	r2, #0
 800e742:	9b03      	ldr	r3, [sp, #12]
 800e744:	69db      	ldr	r3, [r3, #28]
 800e746:	601a      	str	r2, [r3, #0]
 800e748:	2d00      	cmp	r5, #0
 800e74a:	da1e      	bge.n	800e78a <_dtoa_r+0x9a>
 800e74c:	2301      	movs	r3, #1
 800e74e:	603b      	str	r3, [r7, #0]
 800e750:	006b      	lsls	r3, r5, #1
 800e752:	085b      	lsrs	r3, r3, #1
 800e754:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e756:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e758:	4bb8      	ldr	r3, [pc, #736]	@ (800ea3c <_dtoa_r+0x34c>)
 800e75a:	4ab8      	ldr	r2, [pc, #736]	@ (800ea3c <_dtoa_r+0x34c>)
 800e75c:	403b      	ands	r3, r7
 800e75e:	4293      	cmp	r3, r2
 800e760:	d116      	bne.n	800e790 <_dtoa_r+0xa0>
 800e762:	4bb7      	ldr	r3, [pc, #732]	@ (800ea40 <_dtoa_r+0x350>)
 800e764:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e766:	6013      	str	r3, [r2, #0]
 800e768:	033b      	lsls	r3, r7, #12
 800e76a:	0b1b      	lsrs	r3, r3, #12
 800e76c:	4323      	orrs	r3, r4
 800e76e:	d101      	bne.n	800e774 <_dtoa_r+0x84>
 800e770:	f000 fd80 	bl	800f274 <_dtoa_r+0xb84>
 800e774:	4bb3      	ldr	r3, [pc, #716]	@ (800ea44 <_dtoa_r+0x354>)
 800e776:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e778:	9308      	str	r3, [sp, #32]
 800e77a:	2a00      	cmp	r2, #0
 800e77c:	d002      	beq.n	800e784 <_dtoa_r+0x94>
 800e77e:	4bb2      	ldr	r3, [pc, #712]	@ (800ea48 <_dtoa_r+0x358>)
 800e780:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e782:	6013      	str	r3, [r2, #0]
 800e784:	9808      	ldr	r0, [sp, #32]
 800e786:	b01d      	add	sp, #116	@ 0x74
 800e788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e78a:	2300      	movs	r3, #0
 800e78c:	603b      	str	r3, [r7, #0]
 800e78e:	e7e2      	b.n	800e756 <_dtoa_r+0x66>
 800e790:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e792:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e794:	9212      	str	r2, [sp, #72]	@ 0x48
 800e796:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e798:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e79a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e79c:	2200      	movs	r2, #0
 800e79e:	2300      	movs	r3, #0
 800e7a0:	f7f1 fe54 	bl	800044c <__aeabi_dcmpeq>
 800e7a4:	1e06      	subs	r6, r0, #0
 800e7a6:	d00b      	beq.n	800e7c0 <_dtoa_r+0xd0>
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e7ac:	6013      	str	r3, [r2, #0]
 800e7ae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d002      	beq.n	800e7ba <_dtoa_r+0xca>
 800e7b4:	4ba5      	ldr	r3, [pc, #660]	@ (800ea4c <_dtoa_r+0x35c>)
 800e7b6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e7b8:	6013      	str	r3, [r2, #0]
 800e7ba:	4ba5      	ldr	r3, [pc, #660]	@ (800ea50 <_dtoa_r+0x360>)
 800e7bc:	9308      	str	r3, [sp, #32]
 800e7be:	e7e1      	b.n	800e784 <_dtoa_r+0x94>
 800e7c0:	ab1a      	add	r3, sp, #104	@ 0x68
 800e7c2:	9301      	str	r3, [sp, #4]
 800e7c4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	9803      	ldr	r0, [sp, #12]
 800e7ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e7cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e7ce:	f001 f9c1 	bl	800fb54 <__d2b>
 800e7d2:	007a      	lsls	r2, r7, #1
 800e7d4:	9005      	str	r0, [sp, #20]
 800e7d6:	0d52      	lsrs	r2, r2, #21
 800e7d8:	d100      	bne.n	800e7dc <_dtoa_r+0xec>
 800e7da:	e07b      	b.n	800e8d4 <_dtoa_r+0x1e4>
 800e7dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e7de:	9618      	str	r6, [sp, #96]	@ 0x60
 800e7e0:	0319      	lsls	r1, r3, #12
 800e7e2:	4b9c      	ldr	r3, [pc, #624]	@ (800ea54 <_dtoa_r+0x364>)
 800e7e4:	0b09      	lsrs	r1, r1, #12
 800e7e6:	430b      	orrs	r3, r1
 800e7e8:	499b      	ldr	r1, [pc, #620]	@ (800ea58 <_dtoa_r+0x368>)
 800e7ea:	1857      	adds	r7, r2, r1
 800e7ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e7ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e7f0:	0019      	movs	r1, r3
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	4b99      	ldr	r3, [pc, #612]	@ (800ea5c <_dtoa_r+0x36c>)
 800e7f6:	f7f3 f93d 	bl	8001a74 <__aeabi_dsub>
 800e7fa:	4a99      	ldr	r2, [pc, #612]	@ (800ea60 <_dtoa_r+0x370>)
 800e7fc:	4b99      	ldr	r3, [pc, #612]	@ (800ea64 <_dtoa_r+0x374>)
 800e7fe:	f7f2 fe53 	bl	80014a8 <__aeabi_dmul>
 800e802:	4a99      	ldr	r2, [pc, #612]	@ (800ea68 <_dtoa_r+0x378>)
 800e804:	4b99      	ldr	r3, [pc, #612]	@ (800ea6c <_dtoa_r+0x37c>)
 800e806:	f7f1 fe4f 	bl	80004a8 <__aeabi_dadd>
 800e80a:	0004      	movs	r4, r0
 800e80c:	0038      	movs	r0, r7
 800e80e:	000d      	movs	r5, r1
 800e810:	f7f3 fd98 	bl	8002344 <__aeabi_i2d>
 800e814:	4a96      	ldr	r2, [pc, #600]	@ (800ea70 <_dtoa_r+0x380>)
 800e816:	4b97      	ldr	r3, [pc, #604]	@ (800ea74 <_dtoa_r+0x384>)
 800e818:	f7f2 fe46 	bl	80014a8 <__aeabi_dmul>
 800e81c:	0002      	movs	r2, r0
 800e81e:	000b      	movs	r3, r1
 800e820:	0020      	movs	r0, r4
 800e822:	0029      	movs	r1, r5
 800e824:	f7f1 fe40 	bl	80004a8 <__aeabi_dadd>
 800e828:	0004      	movs	r4, r0
 800e82a:	000d      	movs	r5, r1
 800e82c:	f7f3 fd4e 	bl	80022cc <__aeabi_d2iz>
 800e830:	2200      	movs	r2, #0
 800e832:	9004      	str	r0, [sp, #16]
 800e834:	2300      	movs	r3, #0
 800e836:	0020      	movs	r0, r4
 800e838:	0029      	movs	r1, r5
 800e83a:	f7f1 fe0d 	bl	8000458 <__aeabi_dcmplt>
 800e83e:	2800      	cmp	r0, #0
 800e840:	d00b      	beq.n	800e85a <_dtoa_r+0x16a>
 800e842:	9804      	ldr	r0, [sp, #16]
 800e844:	f7f3 fd7e 	bl	8002344 <__aeabi_i2d>
 800e848:	002b      	movs	r3, r5
 800e84a:	0022      	movs	r2, r4
 800e84c:	f7f1 fdfe 	bl	800044c <__aeabi_dcmpeq>
 800e850:	4243      	negs	r3, r0
 800e852:	4158      	adcs	r0, r3
 800e854:	9b04      	ldr	r3, [sp, #16]
 800e856:	1a1b      	subs	r3, r3, r0
 800e858:	9304      	str	r3, [sp, #16]
 800e85a:	2301      	movs	r3, #1
 800e85c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e85e:	9b04      	ldr	r3, [sp, #16]
 800e860:	2b16      	cmp	r3, #22
 800e862:	d810      	bhi.n	800e886 <_dtoa_r+0x196>
 800e864:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e866:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e868:	9a04      	ldr	r2, [sp, #16]
 800e86a:	4b83      	ldr	r3, [pc, #524]	@ (800ea78 <_dtoa_r+0x388>)
 800e86c:	00d2      	lsls	r2, r2, #3
 800e86e:	189b      	adds	r3, r3, r2
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	f7f1 fdf0 	bl	8000458 <__aeabi_dcmplt>
 800e878:	2800      	cmp	r0, #0
 800e87a:	d047      	beq.n	800e90c <_dtoa_r+0x21c>
 800e87c:	9b04      	ldr	r3, [sp, #16]
 800e87e:	3b01      	subs	r3, #1
 800e880:	9304      	str	r3, [sp, #16]
 800e882:	2300      	movs	r3, #0
 800e884:	9315      	str	r3, [sp, #84]	@ 0x54
 800e886:	2200      	movs	r2, #0
 800e888:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e88a:	9206      	str	r2, [sp, #24]
 800e88c:	1bdb      	subs	r3, r3, r7
 800e88e:	1e5a      	subs	r2, r3, #1
 800e890:	d53e      	bpl.n	800e910 <_dtoa_r+0x220>
 800e892:	2201      	movs	r2, #1
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	9306      	str	r3, [sp, #24]
 800e898:	2300      	movs	r3, #0
 800e89a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e89c:	9b04      	ldr	r3, [sp, #16]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	db38      	blt.n	800e914 <_dtoa_r+0x224>
 800e8a2:	9a04      	ldr	r2, [sp, #16]
 800e8a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8a6:	4694      	mov	ip, r2
 800e8a8:	4463      	add	r3, ip
 800e8aa:	930d      	str	r3, [sp, #52]	@ 0x34
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	9214      	str	r2, [sp, #80]	@ 0x50
 800e8b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e8b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e8b4:	2401      	movs	r4, #1
 800e8b6:	2b09      	cmp	r3, #9
 800e8b8:	d862      	bhi.n	800e980 <_dtoa_r+0x290>
 800e8ba:	2b05      	cmp	r3, #5
 800e8bc:	dd02      	ble.n	800e8c4 <_dtoa_r+0x1d4>
 800e8be:	2400      	movs	r4, #0
 800e8c0:	3b04      	subs	r3, #4
 800e8c2:	9322      	str	r3, [sp, #136]	@ 0x88
 800e8c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e8c6:	1e98      	subs	r0, r3, #2
 800e8c8:	2803      	cmp	r0, #3
 800e8ca:	d863      	bhi.n	800e994 <_dtoa_r+0x2a4>
 800e8cc:	f7f1 fc24 	bl	8000118 <__gnu_thumb1_case_uqi>
 800e8d0:	2b385654 	.word	0x2b385654
 800e8d4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e8d6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800e8d8:	18f6      	adds	r6, r6, r3
 800e8da:	4b68      	ldr	r3, [pc, #416]	@ (800ea7c <_dtoa_r+0x38c>)
 800e8dc:	18f2      	adds	r2, r6, r3
 800e8de:	2a20      	cmp	r2, #32
 800e8e0:	dd0f      	ble.n	800e902 <_dtoa_r+0x212>
 800e8e2:	2340      	movs	r3, #64	@ 0x40
 800e8e4:	1a9b      	subs	r3, r3, r2
 800e8e6:	409f      	lsls	r7, r3
 800e8e8:	4b65      	ldr	r3, [pc, #404]	@ (800ea80 <_dtoa_r+0x390>)
 800e8ea:	0038      	movs	r0, r7
 800e8ec:	18f3      	adds	r3, r6, r3
 800e8ee:	40dc      	lsrs	r4, r3
 800e8f0:	4320      	orrs	r0, r4
 800e8f2:	f7f3 fd55 	bl	80023a0 <__aeabi_ui2d>
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	4b62      	ldr	r3, [pc, #392]	@ (800ea84 <_dtoa_r+0x394>)
 800e8fa:	1e77      	subs	r7, r6, #1
 800e8fc:	18cb      	adds	r3, r1, r3
 800e8fe:	9218      	str	r2, [sp, #96]	@ 0x60
 800e900:	e776      	b.n	800e7f0 <_dtoa_r+0x100>
 800e902:	2320      	movs	r3, #32
 800e904:	0020      	movs	r0, r4
 800e906:	1a9b      	subs	r3, r3, r2
 800e908:	4098      	lsls	r0, r3
 800e90a:	e7f2      	b.n	800e8f2 <_dtoa_r+0x202>
 800e90c:	9015      	str	r0, [sp, #84]	@ 0x54
 800e90e:	e7ba      	b.n	800e886 <_dtoa_r+0x196>
 800e910:	920d      	str	r2, [sp, #52]	@ 0x34
 800e912:	e7c3      	b.n	800e89c <_dtoa_r+0x1ac>
 800e914:	9b06      	ldr	r3, [sp, #24]
 800e916:	9a04      	ldr	r2, [sp, #16]
 800e918:	1a9b      	subs	r3, r3, r2
 800e91a:	9306      	str	r3, [sp, #24]
 800e91c:	4253      	negs	r3, r2
 800e91e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e920:	2300      	movs	r3, #0
 800e922:	9314      	str	r3, [sp, #80]	@ 0x50
 800e924:	e7c5      	b.n	800e8b2 <_dtoa_r+0x1c2>
 800e926:	2301      	movs	r3, #1
 800e928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e92a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e92c:	4694      	mov	ip, r2
 800e92e:	9b04      	ldr	r3, [sp, #16]
 800e930:	4463      	add	r3, ip
 800e932:	930e      	str	r3, [sp, #56]	@ 0x38
 800e934:	3301      	adds	r3, #1
 800e936:	9309      	str	r3, [sp, #36]	@ 0x24
 800e938:	2b00      	cmp	r3, #0
 800e93a:	dc08      	bgt.n	800e94e <_dtoa_r+0x25e>
 800e93c:	2301      	movs	r3, #1
 800e93e:	e006      	b.n	800e94e <_dtoa_r+0x25e>
 800e940:	2301      	movs	r3, #1
 800e942:	9310      	str	r3, [sp, #64]	@ 0x40
 800e944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e946:	2b00      	cmp	r3, #0
 800e948:	dd28      	ble.n	800e99c <_dtoa_r+0x2ac>
 800e94a:	930e      	str	r3, [sp, #56]	@ 0x38
 800e94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e94e:	9a03      	ldr	r2, [sp, #12]
 800e950:	2100      	movs	r1, #0
 800e952:	69d0      	ldr	r0, [r2, #28]
 800e954:	2204      	movs	r2, #4
 800e956:	0015      	movs	r5, r2
 800e958:	3514      	adds	r5, #20
 800e95a:	429d      	cmp	r5, r3
 800e95c:	d923      	bls.n	800e9a6 <_dtoa_r+0x2b6>
 800e95e:	6041      	str	r1, [r0, #4]
 800e960:	9803      	ldr	r0, [sp, #12]
 800e962:	f000 fdbb 	bl	800f4dc <_Balloc>
 800e966:	9008      	str	r0, [sp, #32]
 800e968:	2800      	cmp	r0, #0
 800e96a:	d11f      	bne.n	800e9ac <_dtoa_r+0x2bc>
 800e96c:	21b0      	movs	r1, #176	@ 0xb0
 800e96e:	4b46      	ldr	r3, [pc, #280]	@ (800ea88 <_dtoa_r+0x398>)
 800e970:	4831      	ldr	r0, [pc, #196]	@ (800ea38 <_dtoa_r+0x348>)
 800e972:	9a08      	ldr	r2, [sp, #32]
 800e974:	31ff      	adds	r1, #255	@ 0xff
 800e976:	e6d0      	b.n	800e71a <_dtoa_r+0x2a>
 800e978:	2300      	movs	r3, #0
 800e97a:	e7e2      	b.n	800e942 <_dtoa_r+0x252>
 800e97c:	2300      	movs	r3, #0
 800e97e:	e7d3      	b.n	800e928 <_dtoa_r+0x238>
 800e980:	2300      	movs	r3, #0
 800e982:	9410      	str	r4, [sp, #64]	@ 0x40
 800e984:	9322      	str	r3, [sp, #136]	@ 0x88
 800e986:	3b01      	subs	r3, #1
 800e988:	2200      	movs	r2, #0
 800e98a:	930e      	str	r3, [sp, #56]	@ 0x38
 800e98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e98e:	3313      	adds	r3, #19
 800e990:	9223      	str	r2, [sp, #140]	@ 0x8c
 800e992:	e7dc      	b.n	800e94e <_dtoa_r+0x25e>
 800e994:	2301      	movs	r3, #1
 800e996:	9310      	str	r3, [sp, #64]	@ 0x40
 800e998:	3b02      	subs	r3, #2
 800e99a:	e7f5      	b.n	800e988 <_dtoa_r+0x298>
 800e99c:	2301      	movs	r3, #1
 800e99e:	001a      	movs	r2, r3
 800e9a0:	930e      	str	r3, [sp, #56]	@ 0x38
 800e9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9a4:	e7f4      	b.n	800e990 <_dtoa_r+0x2a0>
 800e9a6:	3101      	adds	r1, #1
 800e9a8:	0052      	lsls	r2, r2, #1
 800e9aa:	e7d4      	b.n	800e956 <_dtoa_r+0x266>
 800e9ac:	9b03      	ldr	r3, [sp, #12]
 800e9ae:	9a08      	ldr	r2, [sp, #32]
 800e9b0:	69db      	ldr	r3, [r3, #28]
 800e9b2:	601a      	str	r2, [r3, #0]
 800e9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b6:	2b0e      	cmp	r3, #14
 800e9b8:	d900      	bls.n	800e9bc <_dtoa_r+0x2cc>
 800e9ba:	e0d6      	b.n	800eb6a <_dtoa_r+0x47a>
 800e9bc:	2c00      	cmp	r4, #0
 800e9be:	d100      	bne.n	800e9c2 <_dtoa_r+0x2d2>
 800e9c0:	e0d3      	b.n	800eb6a <_dtoa_r+0x47a>
 800e9c2:	9b04      	ldr	r3, [sp, #16]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	dd63      	ble.n	800ea90 <_dtoa_r+0x3a0>
 800e9c8:	210f      	movs	r1, #15
 800e9ca:	9a04      	ldr	r2, [sp, #16]
 800e9cc:	4b2a      	ldr	r3, [pc, #168]	@ (800ea78 <_dtoa_r+0x388>)
 800e9ce:	400a      	ands	r2, r1
 800e9d0:	00d2      	lsls	r2, r2, #3
 800e9d2:	189b      	adds	r3, r3, r2
 800e9d4:	681e      	ldr	r6, [r3, #0]
 800e9d6:	685f      	ldr	r7, [r3, #4]
 800e9d8:	9b04      	ldr	r3, [sp, #16]
 800e9da:	2402      	movs	r4, #2
 800e9dc:	111d      	asrs	r5, r3, #4
 800e9de:	05db      	lsls	r3, r3, #23
 800e9e0:	d50a      	bpl.n	800e9f8 <_dtoa_r+0x308>
 800e9e2:	4b2a      	ldr	r3, [pc, #168]	@ (800ea8c <_dtoa_r+0x39c>)
 800e9e4:	400d      	ands	r5, r1
 800e9e6:	6a1a      	ldr	r2, [r3, #32]
 800e9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9ea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e9ec:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e9ee:	f7f2 f921 	bl	8000c34 <__aeabi_ddiv>
 800e9f2:	900a      	str	r0, [sp, #40]	@ 0x28
 800e9f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e9f6:	3401      	adds	r4, #1
 800e9f8:	4b24      	ldr	r3, [pc, #144]	@ (800ea8c <_dtoa_r+0x39c>)
 800e9fa:	930c      	str	r3, [sp, #48]	@ 0x30
 800e9fc:	2d00      	cmp	r5, #0
 800e9fe:	d108      	bne.n	800ea12 <_dtoa_r+0x322>
 800ea00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ea02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ea04:	0032      	movs	r2, r6
 800ea06:	003b      	movs	r3, r7
 800ea08:	f7f2 f914 	bl	8000c34 <__aeabi_ddiv>
 800ea0c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ea0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ea10:	e059      	b.n	800eac6 <_dtoa_r+0x3d6>
 800ea12:	2301      	movs	r3, #1
 800ea14:	421d      	tst	r5, r3
 800ea16:	d009      	beq.n	800ea2c <_dtoa_r+0x33c>
 800ea18:	18e4      	adds	r4, r4, r3
 800ea1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea1c:	0030      	movs	r0, r6
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	0039      	movs	r1, r7
 800ea24:	f7f2 fd40 	bl	80014a8 <__aeabi_dmul>
 800ea28:	0006      	movs	r6, r0
 800ea2a:	000f      	movs	r7, r1
 800ea2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea2e:	106d      	asrs	r5, r5, #1
 800ea30:	3308      	adds	r3, #8
 800ea32:	e7e2      	b.n	800e9fa <_dtoa_r+0x30a>
 800ea34:	08010ed1 	.word	0x08010ed1
 800ea38:	08010ee8 	.word	0x08010ee8
 800ea3c:	7ff00000 	.word	0x7ff00000
 800ea40:	0000270f 	.word	0x0000270f
 800ea44:	08010ecd 	.word	0x08010ecd
 800ea48:	08010ed0 	.word	0x08010ed0
 800ea4c:	08010ea1 	.word	0x08010ea1
 800ea50:	08010ea0 	.word	0x08010ea0
 800ea54:	3ff00000 	.word	0x3ff00000
 800ea58:	fffffc01 	.word	0xfffffc01
 800ea5c:	3ff80000 	.word	0x3ff80000
 800ea60:	636f4361 	.word	0x636f4361
 800ea64:	3fd287a7 	.word	0x3fd287a7
 800ea68:	8b60c8b3 	.word	0x8b60c8b3
 800ea6c:	3fc68a28 	.word	0x3fc68a28
 800ea70:	509f79fb 	.word	0x509f79fb
 800ea74:	3fd34413 	.word	0x3fd34413
 800ea78:	08011038 	.word	0x08011038
 800ea7c:	00000432 	.word	0x00000432
 800ea80:	00000412 	.word	0x00000412
 800ea84:	fe100000 	.word	0xfe100000
 800ea88:	08010f40 	.word	0x08010f40
 800ea8c:	08011010 	.word	0x08011010
 800ea90:	9b04      	ldr	r3, [sp, #16]
 800ea92:	2402      	movs	r4, #2
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d016      	beq.n	800eac6 <_dtoa_r+0x3d6>
 800ea98:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ea9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ea9c:	220f      	movs	r2, #15
 800ea9e:	425d      	negs	r5, r3
 800eaa0:	402a      	ands	r2, r5
 800eaa2:	4bd5      	ldr	r3, [pc, #852]	@ (800edf8 <_dtoa_r+0x708>)
 800eaa4:	00d2      	lsls	r2, r2, #3
 800eaa6:	189b      	adds	r3, r3, r2
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	f7f2 fcfc 	bl	80014a8 <__aeabi_dmul>
 800eab0:	2701      	movs	r7, #1
 800eab2:	2300      	movs	r3, #0
 800eab4:	900a      	str	r0, [sp, #40]	@ 0x28
 800eab6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eab8:	4ed0      	ldr	r6, [pc, #832]	@ (800edfc <_dtoa_r+0x70c>)
 800eaba:	112d      	asrs	r5, r5, #4
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	d000      	beq.n	800eac2 <_dtoa_r+0x3d2>
 800eac0:	e095      	b.n	800ebee <_dtoa_r+0x4fe>
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1a2      	bne.n	800ea0c <_dtoa_r+0x31c>
 800eac6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800eac8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800eaca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d100      	bne.n	800ead2 <_dtoa_r+0x3e2>
 800ead0:	e098      	b.n	800ec04 <_dtoa_r+0x514>
 800ead2:	2200      	movs	r2, #0
 800ead4:	0030      	movs	r0, r6
 800ead6:	0039      	movs	r1, r7
 800ead8:	4bc9      	ldr	r3, [pc, #804]	@ (800ee00 <_dtoa_r+0x710>)
 800eada:	f7f1 fcbd 	bl	8000458 <__aeabi_dcmplt>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d100      	bne.n	800eae4 <_dtoa_r+0x3f4>
 800eae2:	e08f      	b.n	800ec04 <_dtoa_r+0x514>
 800eae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d100      	bne.n	800eaec <_dtoa_r+0x3fc>
 800eaea:	e08b      	b.n	800ec04 <_dtoa_r+0x514>
 800eaec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	dd37      	ble.n	800eb62 <_dtoa_r+0x472>
 800eaf2:	9b04      	ldr	r3, [sp, #16]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	930c      	str	r3, [sp, #48]	@ 0x30
 800eafa:	0030      	movs	r0, r6
 800eafc:	4bc1      	ldr	r3, [pc, #772]	@ (800ee04 <_dtoa_r+0x714>)
 800eafe:	0039      	movs	r1, r7
 800eb00:	f7f2 fcd2 	bl	80014a8 <__aeabi_dmul>
 800eb04:	900a      	str	r0, [sp, #40]	@ 0x28
 800eb06:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eb08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb0a:	3401      	adds	r4, #1
 800eb0c:	0020      	movs	r0, r4
 800eb0e:	9311      	str	r3, [sp, #68]	@ 0x44
 800eb10:	f7f3 fc18 	bl	8002344 <__aeabi_i2d>
 800eb14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb18:	f7f2 fcc6 	bl	80014a8 <__aeabi_dmul>
 800eb1c:	4bba      	ldr	r3, [pc, #744]	@ (800ee08 <_dtoa_r+0x718>)
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f7f1 fcc2 	bl	80004a8 <__aeabi_dadd>
 800eb24:	4bb9      	ldr	r3, [pc, #740]	@ (800ee0c <_dtoa_r+0x71c>)
 800eb26:	0006      	movs	r6, r0
 800eb28:	18cf      	adds	r7, r1, r3
 800eb2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d16d      	bne.n	800ec0c <_dtoa_r+0x51c>
 800eb30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800eb32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb34:	2200      	movs	r2, #0
 800eb36:	4bb6      	ldr	r3, [pc, #728]	@ (800ee10 <_dtoa_r+0x720>)
 800eb38:	f7f2 ff9c 	bl	8001a74 <__aeabi_dsub>
 800eb3c:	0032      	movs	r2, r6
 800eb3e:	003b      	movs	r3, r7
 800eb40:	0004      	movs	r4, r0
 800eb42:	000d      	movs	r5, r1
 800eb44:	f7f1 fc9c 	bl	8000480 <__aeabi_dcmpgt>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d000      	beq.n	800eb4e <_dtoa_r+0x45e>
 800eb4c:	e2b6      	b.n	800f0bc <_dtoa_r+0x9cc>
 800eb4e:	2180      	movs	r1, #128	@ 0x80
 800eb50:	0609      	lsls	r1, r1, #24
 800eb52:	187b      	adds	r3, r7, r1
 800eb54:	0032      	movs	r2, r6
 800eb56:	0020      	movs	r0, r4
 800eb58:	0029      	movs	r1, r5
 800eb5a:	f7f1 fc7d 	bl	8000458 <__aeabi_dcmplt>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d128      	bne.n	800ebb4 <_dtoa_r+0x4c4>
 800eb62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eb64:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800eb66:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb68:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eb6a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	da00      	bge.n	800eb72 <_dtoa_r+0x482>
 800eb70:	e174      	b.n	800ee5c <_dtoa_r+0x76c>
 800eb72:	9a04      	ldr	r2, [sp, #16]
 800eb74:	2a0e      	cmp	r2, #14
 800eb76:	dd00      	ble.n	800eb7a <_dtoa_r+0x48a>
 800eb78:	e170      	b.n	800ee5c <_dtoa_r+0x76c>
 800eb7a:	4b9f      	ldr	r3, [pc, #636]	@ (800edf8 <_dtoa_r+0x708>)
 800eb7c:	00d2      	lsls	r2, r2, #3
 800eb7e:	189b      	adds	r3, r3, r2
 800eb80:	685c      	ldr	r4, [r3, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	9306      	str	r3, [sp, #24]
 800eb86:	9407      	str	r4, [sp, #28]
 800eb88:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	db00      	blt.n	800eb90 <_dtoa_r+0x4a0>
 800eb8e:	e0e7      	b.n	800ed60 <_dtoa_r+0x670>
 800eb90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	dd00      	ble.n	800eb98 <_dtoa_r+0x4a8>
 800eb96:	e0e3      	b.n	800ed60 <_dtoa_r+0x670>
 800eb98:	d10c      	bne.n	800ebb4 <_dtoa_r+0x4c4>
 800eb9a:	9806      	ldr	r0, [sp, #24]
 800eb9c:	9907      	ldr	r1, [sp, #28]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	4b9b      	ldr	r3, [pc, #620]	@ (800ee10 <_dtoa_r+0x720>)
 800eba2:	f7f2 fc81 	bl	80014a8 <__aeabi_dmul>
 800eba6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eba8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebaa:	f7f1 fc73 	bl	8000494 <__aeabi_dcmpge>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d100      	bne.n	800ebb4 <_dtoa_r+0x4c4>
 800ebb2:	e286      	b.n	800f0c2 <_dtoa_r+0x9d2>
 800ebb4:	2600      	movs	r6, #0
 800ebb6:	0037      	movs	r7, r6
 800ebb8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ebba:	9c08      	ldr	r4, [sp, #32]
 800ebbc:	43db      	mvns	r3, r3
 800ebbe:	930c      	str	r3, [sp, #48]	@ 0x30
 800ebc0:	9704      	str	r7, [sp, #16]
 800ebc2:	2700      	movs	r7, #0
 800ebc4:	0031      	movs	r1, r6
 800ebc6:	9803      	ldr	r0, [sp, #12]
 800ebc8:	f000 fccc 	bl	800f564 <_Bfree>
 800ebcc:	9b04      	ldr	r3, [sp, #16]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d100      	bne.n	800ebd4 <_dtoa_r+0x4e4>
 800ebd2:	e0bb      	b.n	800ed4c <_dtoa_r+0x65c>
 800ebd4:	2f00      	cmp	r7, #0
 800ebd6:	d005      	beq.n	800ebe4 <_dtoa_r+0x4f4>
 800ebd8:	429f      	cmp	r7, r3
 800ebda:	d003      	beq.n	800ebe4 <_dtoa_r+0x4f4>
 800ebdc:	0039      	movs	r1, r7
 800ebde:	9803      	ldr	r0, [sp, #12]
 800ebe0:	f000 fcc0 	bl	800f564 <_Bfree>
 800ebe4:	9904      	ldr	r1, [sp, #16]
 800ebe6:	9803      	ldr	r0, [sp, #12]
 800ebe8:	f000 fcbc 	bl	800f564 <_Bfree>
 800ebec:	e0ae      	b.n	800ed4c <_dtoa_r+0x65c>
 800ebee:	423d      	tst	r5, r7
 800ebf0:	d005      	beq.n	800ebfe <_dtoa_r+0x50e>
 800ebf2:	6832      	ldr	r2, [r6, #0]
 800ebf4:	6873      	ldr	r3, [r6, #4]
 800ebf6:	f7f2 fc57 	bl	80014a8 <__aeabi_dmul>
 800ebfa:	003b      	movs	r3, r7
 800ebfc:	3401      	adds	r4, #1
 800ebfe:	106d      	asrs	r5, r5, #1
 800ec00:	3608      	adds	r6, #8
 800ec02:	e75b      	b.n	800eabc <_dtoa_r+0x3cc>
 800ec04:	9b04      	ldr	r3, [sp, #16]
 800ec06:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec0a:	e77f      	b.n	800eb0c <_dtoa_r+0x41c>
 800ec0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ec0e:	4b7a      	ldr	r3, [pc, #488]	@ (800edf8 <_dtoa_r+0x708>)
 800ec10:	3a01      	subs	r2, #1
 800ec12:	00d2      	lsls	r2, r2, #3
 800ec14:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ec16:	189b      	adds	r3, r3, r2
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	2900      	cmp	r1, #0
 800ec1e:	d04c      	beq.n	800ecba <_dtoa_r+0x5ca>
 800ec20:	2000      	movs	r0, #0
 800ec22:	497c      	ldr	r1, [pc, #496]	@ (800ee14 <_dtoa_r+0x724>)
 800ec24:	f7f2 f806 	bl	8000c34 <__aeabi_ddiv>
 800ec28:	0032      	movs	r2, r6
 800ec2a:	003b      	movs	r3, r7
 800ec2c:	f7f2 ff22 	bl	8001a74 <__aeabi_dsub>
 800ec30:	9a08      	ldr	r2, [sp, #32]
 800ec32:	0006      	movs	r6, r0
 800ec34:	4694      	mov	ip, r2
 800ec36:	000f      	movs	r7, r1
 800ec38:	9b08      	ldr	r3, [sp, #32]
 800ec3a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ec3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec3e:	4463      	add	r3, ip
 800ec40:	9311      	str	r3, [sp, #68]	@ 0x44
 800ec42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ec44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec46:	f7f3 fb41 	bl	80022cc <__aeabi_d2iz>
 800ec4a:	0005      	movs	r5, r0
 800ec4c:	f7f3 fb7a 	bl	8002344 <__aeabi_i2d>
 800ec50:	0002      	movs	r2, r0
 800ec52:	000b      	movs	r3, r1
 800ec54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ec56:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec58:	f7f2 ff0c 	bl	8001a74 <__aeabi_dsub>
 800ec5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ec5e:	3530      	adds	r5, #48	@ 0x30
 800ec60:	1c5c      	adds	r4, r3, #1
 800ec62:	701d      	strb	r5, [r3, #0]
 800ec64:	0032      	movs	r2, r6
 800ec66:	003b      	movs	r3, r7
 800ec68:	900a      	str	r0, [sp, #40]	@ 0x28
 800ec6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ec6c:	f7f1 fbf4 	bl	8000458 <__aeabi_dcmplt>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d16b      	bne.n	800ed4c <_dtoa_r+0x65c>
 800ec74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ec76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec78:	2000      	movs	r0, #0
 800ec7a:	4961      	ldr	r1, [pc, #388]	@ (800ee00 <_dtoa_r+0x710>)
 800ec7c:	f7f2 fefa 	bl	8001a74 <__aeabi_dsub>
 800ec80:	0032      	movs	r2, r6
 800ec82:	003b      	movs	r3, r7
 800ec84:	f7f1 fbe8 	bl	8000458 <__aeabi_dcmplt>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d000      	beq.n	800ec8e <_dtoa_r+0x59e>
 800ec8c:	e0c6      	b.n	800ee1c <_dtoa_r+0x72c>
 800ec8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec90:	42a3      	cmp	r3, r4
 800ec92:	d100      	bne.n	800ec96 <_dtoa_r+0x5a6>
 800ec94:	e765      	b.n	800eb62 <_dtoa_r+0x472>
 800ec96:	2200      	movs	r2, #0
 800ec98:	0030      	movs	r0, r6
 800ec9a:	0039      	movs	r1, r7
 800ec9c:	4b59      	ldr	r3, [pc, #356]	@ (800ee04 <_dtoa_r+0x714>)
 800ec9e:	f7f2 fc03 	bl	80014a8 <__aeabi_dmul>
 800eca2:	2200      	movs	r2, #0
 800eca4:	0006      	movs	r6, r0
 800eca6:	000f      	movs	r7, r1
 800eca8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ecaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ecac:	4b55      	ldr	r3, [pc, #340]	@ (800ee04 <_dtoa_r+0x714>)
 800ecae:	f7f2 fbfb 	bl	80014a8 <__aeabi_dmul>
 800ecb2:	9416      	str	r4, [sp, #88]	@ 0x58
 800ecb4:	900a      	str	r0, [sp, #40]	@ 0x28
 800ecb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ecb8:	e7c3      	b.n	800ec42 <_dtoa_r+0x552>
 800ecba:	0030      	movs	r0, r6
 800ecbc:	0039      	movs	r1, r7
 800ecbe:	f7f2 fbf3 	bl	80014a8 <__aeabi_dmul>
 800ecc2:	9d08      	ldr	r5, [sp, #32]
 800ecc4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ecc6:	002b      	movs	r3, r5
 800ecc8:	4694      	mov	ip, r2
 800ecca:	9016      	str	r0, [sp, #88]	@ 0x58
 800eccc:	9117      	str	r1, [sp, #92]	@ 0x5c
 800ecce:	4463      	add	r3, ip
 800ecd0:	9319      	str	r3, [sp, #100]	@ 0x64
 800ecd2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ecd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ecd6:	f7f3 faf9 	bl	80022cc <__aeabi_d2iz>
 800ecda:	0004      	movs	r4, r0
 800ecdc:	f7f3 fb32 	bl	8002344 <__aeabi_i2d>
 800ece0:	000b      	movs	r3, r1
 800ece2:	0002      	movs	r2, r0
 800ece4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ece6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ece8:	f7f2 fec4 	bl	8001a74 <__aeabi_dsub>
 800ecec:	3430      	adds	r4, #48	@ 0x30
 800ecee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecf0:	702c      	strb	r4, [r5, #0]
 800ecf2:	3501      	adds	r5, #1
 800ecf4:	0006      	movs	r6, r0
 800ecf6:	000f      	movs	r7, r1
 800ecf8:	42ab      	cmp	r3, r5
 800ecfa:	d12a      	bne.n	800ed52 <_dtoa_r+0x662>
 800ecfc:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800ecfe:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ed00:	9b08      	ldr	r3, [sp, #32]
 800ed02:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800ed04:	469c      	mov	ip, r3
 800ed06:	2200      	movs	r2, #0
 800ed08:	4b42      	ldr	r3, [pc, #264]	@ (800ee14 <_dtoa_r+0x724>)
 800ed0a:	4464      	add	r4, ip
 800ed0c:	f7f1 fbcc 	bl	80004a8 <__aeabi_dadd>
 800ed10:	0002      	movs	r2, r0
 800ed12:	000b      	movs	r3, r1
 800ed14:	0030      	movs	r0, r6
 800ed16:	0039      	movs	r1, r7
 800ed18:	f7f1 fbb2 	bl	8000480 <__aeabi_dcmpgt>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d000      	beq.n	800ed22 <_dtoa_r+0x632>
 800ed20:	e07c      	b.n	800ee1c <_dtoa_r+0x72c>
 800ed22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ed24:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ed26:	2000      	movs	r0, #0
 800ed28:	493a      	ldr	r1, [pc, #232]	@ (800ee14 <_dtoa_r+0x724>)
 800ed2a:	f7f2 fea3 	bl	8001a74 <__aeabi_dsub>
 800ed2e:	0002      	movs	r2, r0
 800ed30:	000b      	movs	r3, r1
 800ed32:	0030      	movs	r0, r6
 800ed34:	0039      	movs	r1, r7
 800ed36:	f7f1 fb8f 	bl	8000458 <__aeabi_dcmplt>
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	d100      	bne.n	800ed40 <_dtoa_r+0x650>
 800ed3e:	e710      	b.n	800eb62 <_dtoa_r+0x472>
 800ed40:	0023      	movs	r3, r4
 800ed42:	3c01      	subs	r4, #1
 800ed44:	7822      	ldrb	r2, [r4, #0]
 800ed46:	2a30      	cmp	r2, #48	@ 0x30
 800ed48:	d0fa      	beq.n	800ed40 <_dtoa_r+0x650>
 800ed4a:	001c      	movs	r4, r3
 800ed4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed4e:	9304      	str	r3, [sp, #16]
 800ed50:	e042      	b.n	800edd8 <_dtoa_r+0x6e8>
 800ed52:	2200      	movs	r2, #0
 800ed54:	4b2b      	ldr	r3, [pc, #172]	@ (800ee04 <_dtoa_r+0x714>)
 800ed56:	f7f2 fba7 	bl	80014a8 <__aeabi_dmul>
 800ed5a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ed5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ed5e:	e7b8      	b.n	800ecd2 <_dtoa_r+0x5e2>
 800ed60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed62:	9d08      	ldr	r5, [sp, #32]
 800ed64:	3b01      	subs	r3, #1
 800ed66:	195b      	adds	r3, r3, r5
 800ed68:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ed6a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ed6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed6e:	9a06      	ldr	r2, [sp, #24]
 800ed70:	9b07      	ldr	r3, [sp, #28]
 800ed72:	0030      	movs	r0, r6
 800ed74:	0039      	movs	r1, r7
 800ed76:	f7f1 ff5d 	bl	8000c34 <__aeabi_ddiv>
 800ed7a:	f7f3 faa7 	bl	80022cc <__aeabi_d2iz>
 800ed7e:	9009      	str	r0, [sp, #36]	@ 0x24
 800ed80:	f7f3 fae0 	bl	8002344 <__aeabi_i2d>
 800ed84:	9a06      	ldr	r2, [sp, #24]
 800ed86:	9b07      	ldr	r3, [sp, #28]
 800ed88:	f7f2 fb8e 	bl	80014a8 <__aeabi_dmul>
 800ed8c:	0002      	movs	r2, r0
 800ed8e:	000b      	movs	r3, r1
 800ed90:	0030      	movs	r0, r6
 800ed92:	0039      	movs	r1, r7
 800ed94:	f7f2 fe6e 	bl	8001a74 <__aeabi_dsub>
 800ed98:	002b      	movs	r3, r5
 800ed9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed9c:	3501      	adds	r5, #1
 800ed9e:	3230      	adds	r2, #48	@ 0x30
 800eda0:	701a      	strb	r2, [r3, #0]
 800eda2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eda4:	002c      	movs	r4, r5
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d14b      	bne.n	800ee42 <_dtoa_r+0x752>
 800edaa:	0002      	movs	r2, r0
 800edac:	000b      	movs	r3, r1
 800edae:	f7f1 fb7b 	bl	80004a8 <__aeabi_dadd>
 800edb2:	9a06      	ldr	r2, [sp, #24]
 800edb4:	9b07      	ldr	r3, [sp, #28]
 800edb6:	0006      	movs	r6, r0
 800edb8:	000f      	movs	r7, r1
 800edba:	f7f1 fb61 	bl	8000480 <__aeabi_dcmpgt>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d12a      	bne.n	800ee18 <_dtoa_r+0x728>
 800edc2:	9a06      	ldr	r2, [sp, #24]
 800edc4:	9b07      	ldr	r3, [sp, #28]
 800edc6:	0030      	movs	r0, r6
 800edc8:	0039      	movs	r1, r7
 800edca:	f7f1 fb3f 	bl	800044c <__aeabi_dcmpeq>
 800edce:	2800      	cmp	r0, #0
 800edd0:	d002      	beq.n	800edd8 <_dtoa_r+0x6e8>
 800edd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edd4:	07dd      	lsls	r5, r3, #31
 800edd6:	d41f      	bmi.n	800ee18 <_dtoa_r+0x728>
 800edd8:	9905      	ldr	r1, [sp, #20]
 800edda:	9803      	ldr	r0, [sp, #12]
 800eddc:	f000 fbc2 	bl	800f564 <_Bfree>
 800ede0:	2300      	movs	r3, #0
 800ede2:	7023      	strb	r3, [r4, #0]
 800ede4:	9b04      	ldr	r3, [sp, #16]
 800ede6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ede8:	3301      	adds	r3, #1
 800edea:	6013      	str	r3, [r2, #0]
 800edec:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d100      	bne.n	800edf4 <_dtoa_r+0x704>
 800edf2:	e4c7      	b.n	800e784 <_dtoa_r+0x94>
 800edf4:	601c      	str	r4, [r3, #0]
 800edf6:	e4c5      	b.n	800e784 <_dtoa_r+0x94>
 800edf8:	08011038 	.word	0x08011038
 800edfc:	08011010 	.word	0x08011010
 800ee00:	3ff00000 	.word	0x3ff00000
 800ee04:	40240000 	.word	0x40240000
 800ee08:	401c0000 	.word	0x401c0000
 800ee0c:	fcc00000 	.word	0xfcc00000
 800ee10:	40140000 	.word	0x40140000
 800ee14:	3fe00000 	.word	0x3fe00000
 800ee18:	9b04      	ldr	r3, [sp, #16]
 800ee1a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee1c:	0023      	movs	r3, r4
 800ee1e:	001c      	movs	r4, r3
 800ee20:	3b01      	subs	r3, #1
 800ee22:	781a      	ldrb	r2, [r3, #0]
 800ee24:	2a39      	cmp	r2, #57	@ 0x39
 800ee26:	d108      	bne.n	800ee3a <_dtoa_r+0x74a>
 800ee28:	9a08      	ldr	r2, [sp, #32]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d1f7      	bne.n	800ee1e <_dtoa_r+0x72e>
 800ee2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ee30:	9908      	ldr	r1, [sp, #32]
 800ee32:	3201      	adds	r2, #1
 800ee34:	920c      	str	r2, [sp, #48]	@ 0x30
 800ee36:	2230      	movs	r2, #48	@ 0x30
 800ee38:	700a      	strb	r2, [r1, #0]
 800ee3a:	781a      	ldrb	r2, [r3, #0]
 800ee3c:	3201      	adds	r2, #1
 800ee3e:	701a      	strb	r2, [r3, #0]
 800ee40:	e784      	b.n	800ed4c <_dtoa_r+0x65c>
 800ee42:	2200      	movs	r2, #0
 800ee44:	4bc6      	ldr	r3, [pc, #792]	@ (800f160 <_dtoa_r+0xa70>)
 800ee46:	f7f2 fb2f 	bl	80014a8 <__aeabi_dmul>
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	0006      	movs	r6, r0
 800ee50:	000f      	movs	r7, r1
 800ee52:	f7f1 fafb 	bl	800044c <__aeabi_dcmpeq>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d089      	beq.n	800ed6e <_dtoa_r+0x67e>
 800ee5a:	e7bd      	b.n	800edd8 <_dtoa_r+0x6e8>
 800ee5c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800ee5e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ee60:	9c06      	ldr	r4, [sp, #24]
 800ee62:	2f00      	cmp	r7, #0
 800ee64:	d014      	beq.n	800ee90 <_dtoa_r+0x7a0>
 800ee66:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ee68:	2a01      	cmp	r2, #1
 800ee6a:	dd00      	ble.n	800ee6e <_dtoa_r+0x77e>
 800ee6c:	e0e4      	b.n	800f038 <_dtoa_r+0x948>
 800ee6e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ee70:	2a00      	cmp	r2, #0
 800ee72:	d100      	bne.n	800ee76 <_dtoa_r+0x786>
 800ee74:	e0da      	b.n	800f02c <_dtoa_r+0x93c>
 800ee76:	4abb      	ldr	r2, [pc, #748]	@ (800f164 <_dtoa_r+0xa74>)
 800ee78:	189b      	adds	r3, r3, r2
 800ee7a:	9a06      	ldr	r2, [sp, #24]
 800ee7c:	2101      	movs	r1, #1
 800ee7e:	18d2      	adds	r2, r2, r3
 800ee80:	9206      	str	r2, [sp, #24]
 800ee82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee84:	9803      	ldr	r0, [sp, #12]
 800ee86:	18d3      	adds	r3, r2, r3
 800ee88:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee8a:	f000 fc23 	bl	800f6d4 <__i2b>
 800ee8e:	0007      	movs	r7, r0
 800ee90:	2c00      	cmp	r4, #0
 800ee92:	d00e      	beq.n	800eeb2 <_dtoa_r+0x7c2>
 800ee94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	dd0b      	ble.n	800eeb2 <_dtoa_r+0x7c2>
 800ee9a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee9c:	0023      	movs	r3, r4
 800ee9e:	4294      	cmp	r4, r2
 800eea0:	dd00      	ble.n	800eea4 <_dtoa_r+0x7b4>
 800eea2:	0013      	movs	r3, r2
 800eea4:	9a06      	ldr	r2, [sp, #24]
 800eea6:	1ae4      	subs	r4, r4, r3
 800eea8:	1ad2      	subs	r2, r2, r3
 800eeaa:	9206      	str	r2, [sp, #24]
 800eeac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	930d      	str	r3, [sp, #52]	@ 0x34
 800eeb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d021      	beq.n	800eefc <_dtoa_r+0x80c>
 800eeb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d100      	bne.n	800eec0 <_dtoa_r+0x7d0>
 800eebe:	e0d3      	b.n	800f068 <_dtoa_r+0x978>
 800eec0:	9e05      	ldr	r6, [sp, #20]
 800eec2:	2d00      	cmp	r5, #0
 800eec4:	d014      	beq.n	800eef0 <_dtoa_r+0x800>
 800eec6:	0039      	movs	r1, r7
 800eec8:	002a      	movs	r2, r5
 800eeca:	9803      	ldr	r0, [sp, #12]
 800eecc:	f000 fcc4 	bl	800f858 <__pow5mult>
 800eed0:	9a05      	ldr	r2, [sp, #20]
 800eed2:	0001      	movs	r1, r0
 800eed4:	0007      	movs	r7, r0
 800eed6:	9803      	ldr	r0, [sp, #12]
 800eed8:	f000 fc14 	bl	800f704 <__multiply>
 800eedc:	0006      	movs	r6, r0
 800eede:	9905      	ldr	r1, [sp, #20]
 800eee0:	9803      	ldr	r0, [sp, #12]
 800eee2:	f000 fb3f 	bl	800f564 <_Bfree>
 800eee6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eee8:	9605      	str	r6, [sp, #20]
 800eeea:	1b5b      	subs	r3, r3, r5
 800eeec:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eeee:	d005      	beq.n	800eefc <_dtoa_r+0x80c>
 800eef0:	0031      	movs	r1, r6
 800eef2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eef4:	9803      	ldr	r0, [sp, #12]
 800eef6:	f000 fcaf 	bl	800f858 <__pow5mult>
 800eefa:	9005      	str	r0, [sp, #20]
 800eefc:	2101      	movs	r1, #1
 800eefe:	9803      	ldr	r0, [sp, #12]
 800ef00:	f000 fbe8 	bl	800f6d4 <__i2b>
 800ef04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ef06:	0006      	movs	r6, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d100      	bne.n	800ef0e <_dtoa_r+0x81e>
 800ef0c:	e1bc      	b.n	800f288 <_dtoa_r+0xb98>
 800ef0e:	001a      	movs	r2, r3
 800ef10:	0001      	movs	r1, r0
 800ef12:	9803      	ldr	r0, [sp, #12]
 800ef14:	f000 fca0 	bl	800f858 <__pow5mult>
 800ef18:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ef1a:	0006      	movs	r6, r0
 800ef1c:	2500      	movs	r5, #0
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	dc16      	bgt.n	800ef50 <_dtoa_r+0x860>
 800ef22:	2500      	movs	r5, #0
 800ef24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef26:	42ab      	cmp	r3, r5
 800ef28:	d10e      	bne.n	800ef48 <_dtoa_r+0x858>
 800ef2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef2c:	031b      	lsls	r3, r3, #12
 800ef2e:	42ab      	cmp	r3, r5
 800ef30:	d10a      	bne.n	800ef48 <_dtoa_r+0x858>
 800ef32:	4b8d      	ldr	r3, [pc, #564]	@ (800f168 <_dtoa_r+0xa78>)
 800ef34:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ef36:	4213      	tst	r3, r2
 800ef38:	d006      	beq.n	800ef48 <_dtoa_r+0x858>
 800ef3a:	9b06      	ldr	r3, [sp, #24]
 800ef3c:	3501      	adds	r5, #1
 800ef3e:	3301      	adds	r3, #1
 800ef40:	9306      	str	r3, [sp, #24]
 800ef42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef44:	3301      	adds	r3, #1
 800ef46:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ef4a:	2001      	movs	r0, #1
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d008      	beq.n	800ef62 <_dtoa_r+0x872>
 800ef50:	6933      	ldr	r3, [r6, #16]
 800ef52:	3303      	adds	r3, #3
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	18f3      	adds	r3, r6, r3
 800ef58:	6858      	ldr	r0, [r3, #4]
 800ef5a:	f000 fb6b 	bl	800f634 <__hi0bits>
 800ef5e:	2320      	movs	r3, #32
 800ef60:	1a18      	subs	r0, r3, r0
 800ef62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef64:	1818      	adds	r0, r3, r0
 800ef66:	0002      	movs	r2, r0
 800ef68:	231f      	movs	r3, #31
 800ef6a:	401a      	ands	r2, r3
 800ef6c:	4218      	tst	r0, r3
 800ef6e:	d100      	bne.n	800ef72 <_dtoa_r+0x882>
 800ef70:	e081      	b.n	800f076 <_dtoa_r+0x986>
 800ef72:	3301      	adds	r3, #1
 800ef74:	1a9b      	subs	r3, r3, r2
 800ef76:	2b04      	cmp	r3, #4
 800ef78:	dd79      	ble.n	800f06e <_dtoa_r+0x97e>
 800ef7a:	231c      	movs	r3, #28
 800ef7c:	1a9b      	subs	r3, r3, r2
 800ef7e:	9a06      	ldr	r2, [sp, #24]
 800ef80:	18e4      	adds	r4, r4, r3
 800ef82:	18d2      	adds	r2, r2, r3
 800ef84:	9206      	str	r2, [sp, #24]
 800ef86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef88:	18d3      	adds	r3, r2, r3
 800ef8a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef8c:	9b06      	ldr	r3, [sp, #24]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	dd05      	ble.n	800ef9e <_dtoa_r+0x8ae>
 800ef92:	001a      	movs	r2, r3
 800ef94:	9905      	ldr	r1, [sp, #20]
 800ef96:	9803      	ldr	r0, [sp, #12]
 800ef98:	f000 fcba 	bl	800f910 <__lshift>
 800ef9c:	9005      	str	r0, [sp, #20]
 800ef9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	dd05      	ble.n	800efb0 <_dtoa_r+0x8c0>
 800efa4:	0031      	movs	r1, r6
 800efa6:	001a      	movs	r2, r3
 800efa8:	9803      	ldr	r0, [sp, #12]
 800efaa:	f000 fcb1 	bl	800f910 <__lshift>
 800efae:	0006      	movs	r6, r0
 800efb0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d061      	beq.n	800f07a <_dtoa_r+0x98a>
 800efb6:	0031      	movs	r1, r6
 800efb8:	9805      	ldr	r0, [sp, #20]
 800efba:	f000 fd15 	bl	800f9e8 <__mcmp>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	da5b      	bge.n	800f07a <_dtoa_r+0x98a>
 800efc2:	9b04      	ldr	r3, [sp, #16]
 800efc4:	220a      	movs	r2, #10
 800efc6:	3b01      	subs	r3, #1
 800efc8:	930c      	str	r3, [sp, #48]	@ 0x30
 800efca:	9905      	ldr	r1, [sp, #20]
 800efcc:	2300      	movs	r3, #0
 800efce:	9803      	ldr	r0, [sp, #12]
 800efd0:	f000 faec 	bl	800f5ac <__multadd>
 800efd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efd6:	9005      	str	r0, [sp, #20]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d100      	bne.n	800efde <_dtoa_r+0x8ee>
 800efdc:	e15b      	b.n	800f296 <_dtoa_r+0xba6>
 800efde:	2300      	movs	r3, #0
 800efe0:	0039      	movs	r1, r7
 800efe2:	220a      	movs	r2, #10
 800efe4:	9803      	ldr	r0, [sp, #12]
 800efe6:	f000 fae1 	bl	800f5ac <__multadd>
 800efea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efec:	0007      	movs	r7, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	dc4d      	bgt.n	800f08e <_dtoa_r+0x99e>
 800eff2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800eff4:	2b02      	cmp	r3, #2
 800eff6:	dd46      	ble.n	800f086 <_dtoa_r+0x996>
 800eff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800effa:	2b00      	cmp	r3, #0
 800effc:	d000      	beq.n	800f000 <_dtoa_r+0x910>
 800effe:	e5db      	b.n	800ebb8 <_dtoa_r+0x4c8>
 800f000:	0031      	movs	r1, r6
 800f002:	2205      	movs	r2, #5
 800f004:	9803      	ldr	r0, [sp, #12]
 800f006:	f000 fad1 	bl	800f5ac <__multadd>
 800f00a:	0006      	movs	r6, r0
 800f00c:	0001      	movs	r1, r0
 800f00e:	9805      	ldr	r0, [sp, #20]
 800f010:	f000 fcea 	bl	800f9e8 <__mcmp>
 800f014:	2800      	cmp	r0, #0
 800f016:	dc00      	bgt.n	800f01a <_dtoa_r+0x92a>
 800f018:	e5ce      	b.n	800ebb8 <_dtoa_r+0x4c8>
 800f01a:	9b08      	ldr	r3, [sp, #32]
 800f01c:	9a08      	ldr	r2, [sp, #32]
 800f01e:	1c5c      	adds	r4, r3, #1
 800f020:	2331      	movs	r3, #49	@ 0x31
 800f022:	7013      	strb	r3, [r2, #0]
 800f024:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f026:	3301      	adds	r3, #1
 800f028:	930c      	str	r3, [sp, #48]	@ 0x30
 800f02a:	e5c9      	b.n	800ebc0 <_dtoa_r+0x4d0>
 800f02c:	2336      	movs	r3, #54	@ 0x36
 800f02e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f030:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800f032:	1a9b      	subs	r3, r3, r2
 800f034:	9c06      	ldr	r4, [sp, #24]
 800f036:	e720      	b.n	800ee7a <_dtoa_r+0x78a>
 800f038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f03a:	1e5d      	subs	r5, r3, #1
 800f03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f03e:	42ab      	cmp	r3, r5
 800f040:	db08      	blt.n	800f054 <_dtoa_r+0x964>
 800f042:	1b5d      	subs	r5, r3, r5
 800f044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f046:	2b00      	cmp	r3, #0
 800f048:	daf4      	bge.n	800f034 <_dtoa_r+0x944>
 800f04a:	9b06      	ldr	r3, [sp, #24]
 800f04c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f04e:	1a9c      	subs	r4, r3, r2
 800f050:	2300      	movs	r3, #0
 800f052:	e712      	b.n	800ee7a <_dtoa_r+0x78a>
 800f054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f056:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f058:	1aeb      	subs	r3, r5, r3
 800f05a:	18d3      	adds	r3, r2, r3
 800f05c:	9314      	str	r3, [sp, #80]	@ 0x50
 800f05e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f060:	9c06      	ldr	r4, [sp, #24]
 800f062:	2500      	movs	r5, #0
 800f064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f066:	e708      	b.n	800ee7a <_dtoa_r+0x78a>
 800f068:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f06a:	9905      	ldr	r1, [sp, #20]
 800f06c:	e742      	b.n	800eef4 <_dtoa_r+0x804>
 800f06e:	2b04      	cmp	r3, #4
 800f070:	d08c      	beq.n	800ef8c <_dtoa_r+0x89c>
 800f072:	331c      	adds	r3, #28
 800f074:	e783      	b.n	800ef7e <_dtoa_r+0x88e>
 800f076:	0013      	movs	r3, r2
 800f078:	e7fb      	b.n	800f072 <_dtoa_r+0x982>
 800f07a:	9b04      	ldr	r3, [sp, #16]
 800f07c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f080:	930e      	str	r3, [sp, #56]	@ 0x38
 800f082:	2b00      	cmp	r3, #0
 800f084:	ddb5      	ble.n	800eff2 <_dtoa_r+0x902>
 800f086:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d100      	bne.n	800f08e <_dtoa_r+0x99e>
 800f08c:	e107      	b.n	800f29e <_dtoa_r+0xbae>
 800f08e:	2c00      	cmp	r4, #0
 800f090:	dd05      	ble.n	800f09e <_dtoa_r+0x9ae>
 800f092:	0039      	movs	r1, r7
 800f094:	0022      	movs	r2, r4
 800f096:	9803      	ldr	r0, [sp, #12]
 800f098:	f000 fc3a 	bl	800f910 <__lshift>
 800f09c:	0007      	movs	r7, r0
 800f09e:	9704      	str	r7, [sp, #16]
 800f0a0:	2d00      	cmp	r5, #0
 800f0a2:	d020      	beq.n	800f0e6 <_dtoa_r+0x9f6>
 800f0a4:	6879      	ldr	r1, [r7, #4]
 800f0a6:	9803      	ldr	r0, [sp, #12]
 800f0a8:	f000 fa18 	bl	800f4dc <_Balloc>
 800f0ac:	1e04      	subs	r4, r0, #0
 800f0ae:	d10c      	bne.n	800f0ca <_dtoa_r+0x9da>
 800f0b0:	0022      	movs	r2, r4
 800f0b2:	4b2e      	ldr	r3, [pc, #184]	@ (800f16c <_dtoa_r+0xa7c>)
 800f0b4:	482e      	ldr	r0, [pc, #184]	@ (800f170 <_dtoa_r+0xa80>)
 800f0b6:	492f      	ldr	r1, [pc, #188]	@ (800f174 <_dtoa_r+0xa84>)
 800f0b8:	f7ff fb2f 	bl	800e71a <_dtoa_r+0x2a>
 800f0bc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800f0be:	0037      	movs	r7, r6
 800f0c0:	e7ab      	b.n	800f01a <_dtoa_r+0x92a>
 800f0c2:	9b04      	ldr	r3, [sp, #16]
 800f0c4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800f0c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f0c8:	e7f9      	b.n	800f0be <_dtoa_r+0x9ce>
 800f0ca:	0039      	movs	r1, r7
 800f0cc:	693a      	ldr	r2, [r7, #16]
 800f0ce:	310c      	adds	r1, #12
 800f0d0:	3202      	adds	r2, #2
 800f0d2:	0092      	lsls	r2, r2, #2
 800f0d4:	300c      	adds	r0, #12
 800f0d6:	f000 fe61 	bl	800fd9c <memcpy>
 800f0da:	2201      	movs	r2, #1
 800f0dc:	0021      	movs	r1, r4
 800f0de:	9803      	ldr	r0, [sp, #12]
 800f0e0:	f000 fc16 	bl	800f910 <__lshift>
 800f0e4:	9004      	str	r0, [sp, #16]
 800f0e6:	9b08      	ldr	r3, [sp, #32]
 800f0e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0ea:	9306      	str	r3, [sp, #24]
 800f0ec:	3b01      	subs	r3, #1
 800f0ee:	189b      	adds	r3, r3, r2
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0f6:	4013      	ands	r3, r2
 800f0f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800f0fa:	0031      	movs	r1, r6
 800f0fc:	9805      	ldr	r0, [sp, #20]
 800f0fe:	f7ff fa71 	bl	800e5e4 <quorem>
 800f102:	0039      	movs	r1, r7
 800f104:	0005      	movs	r5, r0
 800f106:	900a      	str	r0, [sp, #40]	@ 0x28
 800f108:	9805      	ldr	r0, [sp, #20]
 800f10a:	f000 fc6d 	bl	800f9e8 <__mcmp>
 800f10e:	9a04      	ldr	r2, [sp, #16]
 800f110:	900d      	str	r0, [sp, #52]	@ 0x34
 800f112:	0031      	movs	r1, r6
 800f114:	9803      	ldr	r0, [sp, #12]
 800f116:	f000 fc83 	bl	800fa20 <__mdiff>
 800f11a:	2201      	movs	r2, #1
 800f11c:	68c3      	ldr	r3, [r0, #12]
 800f11e:	0004      	movs	r4, r0
 800f120:	3530      	adds	r5, #48	@ 0x30
 800f122:	9209      	str	r2, [sp, #36]	@ 0x24
 800f124:	2b00      	cmp	r3, #0
 800f126:	d104      	bne.n	800f132 <_dtoa_r+0xa42>
 800f128:	0001      	movs	r1, r0
 800f12a:	9805      	ldr	r0, [sp, #20]
 800f12c:	f000 fc5c 	bl	800f9e8 <__mcmp>
 800f130:	9009      	str	r0, [sp, #36]	@ 0x24
 800f132:	0021      	movs	r1, r4
 800f134:	9803      	ldr	r0, [sp, #12]
 800f136:	f000 fa15 	bl	800f564 <_Bfree>
 800f13a:	9b06      	ldr	r3, [sp, #24]
 800f13c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f13e:	1c5c      	adds	r4, r3, #1
 800f140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f142:	4313      	orrs	r3, r2
 800f144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f146:	4313      	orrs	r3, r2
 800f148:	d116      	bne.n	800f178 <_dtoa_r+0xa88>
 800f14a:	2d39      	cmp	r5, #57	@ 0x39
 800f14c:	d02f      	beq.n	800f1ae <_dtoa_r+0xabe>
 800f14e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f150:	2b00      	cmp	r3, #0
 800f152:	dd01      	ble.n	800f158 <_dtoa_r+0xa68>
 800f154:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800f156:	3531      	adds	r5, #49	@ 0x31
 800f158:	9b06      	ldr	r3, [sp, #24]
 800f15a:	701d      	strb	r5, [r3, #0]
 800f15c:	e532      	b.n	800ebc4 <_dtoa_r+0x4d4>
 800f15e:	46c0      	nop			@ (mov r8, r8)
 800f160:	40240000 	.word	0x40240000
 800f164:	00000433 	.word	0x00000433
 800f168:	7ff00000 	.word	0x7ff00000
 800f16c:	08010f40 	.word	0x08010f40
 800f170:	08010ee8 	.word	0x08010ee8
 800f174:	000002ef 	.word	0x000002ef
 800f178:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	db04      	blt.n	800f188 <_dtoa_r+0xa98>
 800f17e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f180:	4313      	orrs	r3, r2
 800f182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f184:	4313      	orrs	r3, r2
 800f186:	d11e      	bne.n	800f1c6 <_dtoa_r+0xad6>
 800f188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	dde4      	ble.n	800f158 <_dtoa_r+0xa68>
 800f18e:	9905      	ldr	r1, [sp, #20]
 800f190:	2201      	movs	r2, #1
 800f192:	9803      	ldr	r0, [sp, #12]
 800f194:	f000 fbbc 	bl	800f910 <__lshift>
 800f198:	0031      	movs	r1, r6
 800f19a:	9005      	str	r0, [sp, #20]
 800f19c:	f000 fc24 	bl	800f9e8 <__mcmp>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	dc02      	bgt.n	800f1aa <_dtoa_r+0xaba>
 800f1a4:	d1d8      	bne.n	800f158 <_dtoa_r+0xa68>
 800f1a6:	07eb      	lsls	r3, r5, #31
 800f1a8:	d5d6      	bpl.n	800f158 <_dtoa_r+0xa68>
 800f1aa:	2d39      	cmp	r5, #57	@ 0x39
 800f1ac:	d1d2      	bne.n	800f154 <_dtoa_r+0xa64>
 800f1ae:	2339      	movs	r3, #57	@ 0x39
 800f1b0:	9a06      	ldr	r2, [sp, #24]
 800f1b2:	7013      	strb	r3, [r2, #0]
 800f1b4:	0023      	movs	r3, r4
 800f1b6:	001c      	movs	r4, r3
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	781a      	ldrb	r2, [r3, #0]
 800f1bc:	2a39      	cmp	r2, #57	@ 0x39
 800f1be:	d050      	beq.n	800f262 <_dtoa_r+0xb72>
 800f1c0:	3201      	adds	r2, #1
 800f1c2:	701a      	strb	r2, [r3, #0]
 800f1c4:	e4fe      	b.n	800ebc4 <_dtoa_r+0x4d4>
 800f1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	dd03      	ble.n	800f1d4 <_dtoa_r+0xae4>
 800f1cc:	2d39      	cmp	r5, #57	@ 0x39
 800f1ce:	d0ee      	beq.n	800f1ae <_dtoa_r+0xabe>
 800f1d0:	3501      	adds	r5, #1
 800f1d2:	e7c1      	b.n	800f158 <_dtoa_r+0xa68>
 800f1d4:	9b06      	ldr	r3, [sp, #24]
 800f1d6:	9a06      	ldr	r2, [sp, #24]
 800f1d8:	701d      	strb	r5, [r3, #0]
 800f1da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d02b      	beq.n	800f238 <_dtoa_r+0xb48>
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	220a      	movs	r2, #10
 800f1e4:	9905      	ldr	r1, [sp, #20]
 800f1e6:	9803      	ldr	r0, [sp, #12]
 800f1e8:	f000 f9e0 	bl	800f5ac <__multadd>
 800f1ec:	9b04      	ldr	r3, [sp, #16]
 800f1ee:	9005      	str	r0, [sp, #20]
 800f1f0:	429f      	cmp	r7, r3
 800f1f2:	d109      	bne.n	800f208 <_dtoa_r+0xb18>
 800f1f4:	0039      	movs	r1, r7
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	220a      	movs	r2, #10
 800f1fa:	9803      	ldr	r0, [sp, #12]
 800f1fc:	f000 f9d6 	bl	800f5ac <__multadd>
 800f200:	0007      	movs	r7, r0
 800f202:	9004      	str	r0, [sp, #16]
 800f204:	9406      	str	r4, [sp, #24]
 800f206:	e778      	b.n	800f0fa <_dtoa_r+0xa0a>
 800f208:	0039      	movs	r1, r7
 800f20a:	2300      	movs	r3, #0
 800f20c:	220a      	movs	r2, #10
 800f20e:	9803      	ldr	r0, [sp, #12]
 800f210:	f000 f9cc 	bl	800f5ac <__multadd>
 800f214:	2300      	movs	r3, #0
 800f216:	0007      	movs	r7, r0
 800f218:	220a      	movs	r2, #10
 800f21a:	9904      	ldr	r1, [sp, #16]
 800f21c:	9803      	ldr	r0, [sp, #12]
 800f21e:	f000 f9c5 	bl	800f5ac <__multadd>
 800f222:	9004      	str	r0, [sp, #16]
 800f224:	e7ee      	b.n	800f204 <_dtoa_r+0xb14>
 800f226:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f228:	2401      	movs	r4, #1
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	dd00      	ble.n	800f230 <_dtoa_r+0xb40>
 800f22e:	001c      	movs	r4, r3
 800f230:	9704      	str	r7, [sp, #16]
 800f232:	2700      	movs	r7, #0
 800f234:	9b08      	ldr	r3, [sp, #32]
 800f236:	191c      	adds	r4, r3, r4
 800f238:	9905      	ldr	r1, [sp, #20]
 800f23a:	2201      	movs	r2, #1
 800f23c:	9803      	ldr	r0, [sp, #12]
 800f23e:	f000 fb67 	bl	800f910 <__lshift>
 800f242:	0031      	movs	r1, r6
 800f244:	9005      	str	r0, [sp, #20]
 800f246:	f000 fbcf 	bl	800f9e8 <__mcmp>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	dcb2      	bgt.n	800f1b4 <_dtoa_r+0xac4>
 800f24e:	d101      	bne.n	800f254 <_dtoa_r+0xb64>
 800f250:	07ed      	lsls	r5, r5, #31
 800f252:	d4af      	bmi.n	800f1b4 <_dtoa_r+0xac4>
 800f254:	0023      	movs	r3, r4
 800f256:	001c      	movs	r4, r3
 800f258:	3b01      	subs	r3, #1
 800f25a:	781a      	ldrb	r2, [r3, #0]
 800f25c:	2a30      	cmp	r2, #48	@ 0x30
 800f25e:	d0fa      	beq.n	800f256 <_dtoa_r+0xb66>
 800f260:	e4b0      	b.n	800ebc4 <_dtoa_r+0x4d4>
 800f262:	9a08      	ldr	r2, [sp, #32]
 800f264:	429a      	cmp	r2, r3
 800f266:	d1a6      	bne.n	800f1b6 <_dtoa_r+0xac6>
 800f268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f26a:	3301      	adds	r3, #1
 800f26c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f26e:	2331      	movs	r3, #49	@ 0x31
 800f270:	7013      	strb	r3, [r2, #0]
 800f272:	e4a7      	b.n	800ebc4 <_dtoa_r+0x4d4>
 800f274:	4b14      	ldr	r3, [pc, #80]	@ (800f2c8 <_dtoa_r+0xbd8>)
 800f276:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f278:	9308      	str	r3, [sp, #32]
 800f27a:	4b14      	ldr	r3, [pc, #80]	@ (800f2cc <_dtoa_r+0xbdc>)
 800f27c:	2a00      	cmp	r2, #0
 800f27e:	d001      	beq.n	800f284 <_dtoa_r+0xb94>
 800f280:	f7ff fa7e 	bl	800e780 <_dtoa_r+0x90>
 800f284:	f7ff fa7e 	bl	800e784 <_dtoa_r+0x94>
 800f288:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	dc00      	bgt.n	800f290 <_dtoa_r+0xba0>
 800f28e:	e648      	b.n	800ef22 <_dtoa_r+0x832>
 800f290:	2001      	movs	r0, #1
 800f292:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f294:	e665      	b.n	800ef62 <_dtoa_r+0x872>
 800f296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f298:	2b00      	cmp	r3, #0
 800f29a:	dc00      	bgt.n	800f29e <_dtoa_r+0xbae>
 800f29c:	e6a9      	b.n	800eff2 <_dtoa_r+0x902>
 800f29e:	2400      	movs	r4, #0
 800f2a0:	0031      	movs	r1, r6
 800f2a2:	9805      	ldr	r0, [sp, #20]
 800f2a4:	f7ff f99e 	bl	800e5e4 <quorem>
 800f2a8:	9b08      	ldr	r3, [sp, #32]
 800f2aa:	3030      	adds	r0, #48	@ 0x30
 800f2ac:	5518      	strb	r0, [r3, r4]
 800f2ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2b0:	3401      	adds	r4, #1
 800f2b2:	0005      	movs	r5, r0
 800f2b4:	42a3      	cmp	r3, r4
 800f2b6:	ddb6      	ble.n	800f226 <_dtoa_r+0xb36>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	220a      	movs	r2, #10
 800f2bc:	9905      	ldr	r1, [sp, #20]
 800f2be:	9803      	ldr	r0, [sp, #12]
 800f2c0:	f000 f974 	bl	800f5ac <__multadd>
 800f2c4:	9005      	str	r0, [sp, #20]
 800f2c6:	e7eb      	b.n	800f2a0 <_dtoa_r+0xbb0>
 800f2c8:	08010ec4 	.word	0x08010ec4
 800f2cc:	08010ecc 	.word	0x08010ecc

0800f2d0 <_free_r>:
 800f2d0:	b570      	push	{r4, r5, r6, lr}
 800f2d2:	0005      	movs	r5, r0
 800f2d4:	1e0c      	subs	r4, r1, #0
 800f2d6:	d010      	beq.n	800f2fa <_free_r+0x2a>
 800f2d8:	3c04      	subs	r4, #4
 800f2da:	6823      	ldr	r3, [r4, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	da00      	bge.n	800f2e2 <_free_r+0x12>
 800f2e0:	18e4      	adds	r4, r4, r3
 800f2e2:	0028      	movs	r0, r5
 800f2e4:	f000 f8ea 	bl	800f4bc <__malloc_lock>
 800f2e8:	4a1d      	ldr	r2, [pc, #116]	@ (800f360 <_free_r+0x90>)
 800f2ea:	6813      	ldr	r3, [r2, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d105      	bne.n	800f2fc <_free_r+0x2c>
 800f2f0:	6063      	str	r3, [r4, #4]
 800f2f2:	6014      	str	r4, [r2, #0]
 800f2f4:	0028      	movs	r0, r5
 800f2f6:	f000 f8e9 	bl	800f4cc <__malloc_unlock>
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	42a3      	cmp	r3, r4
 800f2fe:	d908      	bls.n	800f312 <_free_r+0x42>
 800f300:	6820      	ldr	r0, [r4, #0]
 800f302:	1821      	adds	r1, r4, r0
 800f304:	428b      	cmp	r3, r1
 800f306:	d1f3      	bne.n	800f2f0 <_free_r+0x20>
 800f308:	6819      	ldr	r1, [r3, #0]
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	1809      	adds	r1, r1, r0
 800f30e:	6021      	str	r1, [r4, #0]
 800f310:	e7ee      	b.n	800f2f0 <_free_r+0x20>
 800f312:	001a      	movs	r2, r3
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d001      	beq.n	800f31e <_free_r+0x4e>
 800f31a:	42a3      	cmp	r3, r4
 800f31c:	d9f9      	bls.n	800f312 <_free_r+0x42>
 800f31e:	6811      	ldr	r1, [r2, #0]
 800f320:	1850      	adds	r0, r2, r1
 800f322:	42a0      	cmp	r0, r4
 800f324:	d10b      	bne.n	800f33e <_free_r+0x6e>
 800f326:	6820      	ldr	r0, [r4, #0]
 800f328:	1809      	adds	r1, r1, r0
 800f32a:	1850      	adds	r0, r2, r1
 800f32c:	6011      	str	r1, [r2, #0]
 800f32e:	4283      	cmp	r3, r0
 800f330:	d1e0      	bne.n	800f2f4 <_free_r+0x24>
 800f332:	6818      	ldr	r0, [r3, #0]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	1841      	adds	r1, r0, r1
 800f338:	6011      	str	r1, [r2, #0]
 800f33a:	6053      	str	r3, [r2, #4]
 800f33c:	e7da      	b.n	800f2f4 <_free_r+0x24>
 800f33e:	42a0      	cmp	r0, r4
 800f340:	d902      	bls.n	800f348 <_free_r+0x78>
 800f342:	230c      	movs	r3, #12
 800f344:	602b      	str	r3, [r5, #0]
 800f346:	e7d5      	b.n	800f2f4 <_free_r+0x24>
 800f348:	6820      	ldr	r0, [r4, #0]
 800f34a:	1821      	adds	r1, r4, r0
 800f34c:	428b      	cmp	r3, r1
 800f34e:	d103      	bne.n	800f358 <_free_r+0x88>
 800f350:	6819      	ldr	r1, [r3, #0]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	1809      	adds	r1, r1, r0
 800f356:	6021      	str	r1, [r4, #0]
 800f358:	6063      	str	r3, [r4, #4]
 800f35a:	6054      	str	r4, [r2, #4]
 800f35c:	e7ca      	b.n	800f2f4 <_free_r+0x24>
 800f35e:	46c0      	nop			@ (mov r8, r8)
 800f360:	20000fdc 	.word	0x20000fdc

0800f364 <malloc>:
 800f364:	b510      	push	{r4, lr}
 800f366:	4b03      	ldr	r3, [pc, #12]	@ (800f374 <malloc+0x10>)
 800f368:	0001      	movs	r1, r0
 800f36a:	6818      	ldr	r0, [r3, #0]
 800f36c:	f000 f826 	bl	800f3bc <_malloc_r>
 800f370:	bd10      	pop	{r4, pc}
 800f372:	46c0      	nop			@ (mov r8, r8)
 800f374:	200001a0 	.word	0x200001a0

0800f378 <sbrk_aligned>:
 800f378:	b570      	push	{r4, r5, r6, lr}
 800f37a:	4e0f      	ldr	r6, [pc, #60]	@ (800f3b8 <sbrk_aligned+0x40>)
 800f37c:	000d      	movs	r5, r1
 800f37e:	6831      	ldr	r1, [r6, #0]
 800f380:	0004      	movs	r4, r0
 800f382:	2900      	cmp	r1, #0
 800f384:	d102      	bne.n	800f38c <sbrk_aligned+0x14>
 800f386:	f000 fcf7 	bl	800fd78 <_sbrk_r>
 800f38a:	6030      	str	r0, [r6, #0]
 800f38c:	0029      	movs	r1, r5
 800f38e:	0020      	movs	r0, r4
 800f390:	f000 fcf2 	bl	800fd78 <_sbrk_r>
 800f394:	1c43      	adds	r3, r0, #1
 800f396:	d103      	bne.n	800f3a0 <sbrk_aligned+0x28>
 800f398:	2501      	movs	r5, #1
 800f39a:	426d      	negs	r5, r5
 800f39c:	0028      	movs	r0, r5
 800f39e:	bd70      	pop	{r4, r5, r6, pc}
 800f3a0:	2303      	movs	r3, #3
 800f3a2:	1cc5      	adds	r5, r0, #3
 800f3a4:	439d      	bics	r5, r3
 800f3a6:	42a8      	cmp	r0, r5
 800f3a8:	d0f8      	beq.n	800f39c <sbrk_aligned+0x24>
 800f3aa:	1a29      	subs	r1, r5, r0
 800f3ac:	0020      	movs	r0, r4
 800f3ae:	f000 fce3 	bl	800fd78 <_sbrk_r>
 800f3b2:	3001      	adds	r0, #1
 800f3b4:	d1f2      	bne.n	800f39c <sbrk_aligned+0x24>
 800f3b6:	e7ef      	b.n	800f398 <sbrk_aligned+0x20>
 800f3b8:	20000fd8 	.word	0x20000fd8

0800f3bc <_malloc_r>:
 800f3bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3be:	2203      	movs	r2, #3
 800f3c0:	1ccb      	adds	r3, r1, #3
 800f3c2:	4393      	bics	r3, r2
 800f3c4:	3308      	adds	r3, #8
 800f3c6:	0005      	movs	r5, r0
 800f3c8:	001f      	movs	r7, r3
 800f3ca:	2b0c      	cmp	r3, #12
 800f3cc:	d234      	bcs.n	800f438 <_malloc_r+0x7c>
 800f3ce:	270c      	movs	r7, #12
 800f3d0:	42b9      	cmp	r1, r7
 800f3d2:	d833      	bhi.n	800f43c <_malloc_r+0x80>
 800f3d4:	0028      	movs	r0, r5
 800f3d6:	f000 f871 	bl	800f4bc <__malloc_lock>
 800f3da:	4e37      	ldr	r6, [pc, #220]	@ (800f4b8 <_malloc_r+0xfc>)
 800f3dc:	6833      	ldr	r3, [r6, #0]
 800f3de:	001c      	movs	r4, r3
 800f3e0:	2c00      	cmp	r4, #0
 800f3e2:	d12f      	bne.n	800f444 <_malloc_r+0x88>
 800f3e4:	0039      	movs	r1, r7
 800f3e6:	0028      	movs	r0, r5
 800f3e8:	f7ff ffc6 	bl	800f378 <sbrk_aligned>
 800f3ec:	0004      	movs	r4, r0
 800f3ee:	1c43      	adds	r3, r0, #1
 800f3f0:	d15f      	bne.n	800f4b2 <_malloc_r+0xf6>
 800f3f2:	6834      	ldr	r4, [r6, #0]
 800f3f4:	9400      	str	r4, [sp, #0]
 800f3f6:	9b00      	ldr	r3, [sp, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d14a      	bne.n	800f492 <_malloc_r+0xd6>
 800f3fc:	2c00      	cmp	r4, #0
 800f3fe:	d052      	beq.n	800f4a6 <_malloc_r+0xea>
 800f400:	6823      	ldr	r3, [r4, #0]
 800f402:	0028      	movs	r0, r5
 800f404:	18e3      	adds	r3, r4, r3
 800f406:	9900      	ldr	r1, [sp, #0]
 800f408:	9301      	str	r3, [sp, #4]
 800f40a:	f000 fcb5 	bl	800fd78 <_sbrk_r>
 800f40e:	9b01      	ldr	r3, [sp, #4]
 800f410:	4283      	cmp	r3, r0
 800f412:	d148      	bne.n	800f4a6 <_malloc_r+0xea>
 800f414:	6823      	ldr	r3, [r4, #0]
 800f416:	0028      	movs	r0, r5
 800f418:	1aff      	subs	r7, r7, r3
 800f41a:	0039      	movs	r1, r7
 800f41c:	f7ff ffac 	bl	800f378 <sbrk_aligned>
 800f420:	3001      	adds	r0, #1
 800f422:	d040      	beq.n	800f4a6 <_malloc_r+0xea>
 800f424:	6823      	ldr	r3, [r4, #0]
 800f426:	19db      	adds	r3, r3, r7
 800f428:	6023      	str	r3, [r4, #0]
 800f42a:	6833      	ldr	r3, [r6, #0]
 800f42c:	685a      	ldr	r2, [r3, #4]
 800f42e:	2a00      	cmp	r2, #0
 800f430:	d133      	bne.n	800f49a <_malloc_r+0xde>
 800f432:	9b00      	ldr	r3, [sp, #0]
 800f434:	6033      	str	r3, [r6, #0]
 800f436:	e019      	b.n	800f46c <_malloc_r+0xb0>
 800f438:	2b00      	cmp	r3, #0
 800f43a:	dac9      	bge.n	800f3d0 <_malloc_r+0x14>
 800f43c:	230c      	movs	r3, #12
 800f43e:	602b      	str	r3, [r5, #0]
 800f440:	2000      	movs	r0, #0
 800f442:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f444:	6821      	ldr	r1, [r4, #0]
 800f446:	1bc9      	subs	r1, r1, r7
 800f448:	d420      	bmi.n	800f48c <_malloc_r+0xd0>
 800f44a:	290b      	cmp	r1, #11
 800f44c:	d90a      	bls.n	800f464 <_malloc_r+0xa8>
 800f44e:	19e2      	adds	r2, r4, r7
 800f450:	6027      	str	r7, [r4, #0]
 800f452:	42a3      	cmp	r3, r4
 800f454:	d104      	bne.n	800f460 <_malloc_r+0xa4>
 800f456:	6032      	str	r2, [r6, #0]
 800f458:	6863      	ldr	r3, [r4, #4]
 800f45a:	6011      	str	r1, [r2, #0]
 800f45c:	6053      	str	r3, [r2, #4]
 800f45e:	e005      	b.n	800f46c <_malloc_r+0xb0>
 800f460:	605a      	str	r2, [r3, #4]
 800f462:	e7f9      	b.n	800f458 <_malloc_r+0x9c>
 800f464:	6862      	ldr	r2, [r4, #4]
 800f466:	42a3      	cmp	r3, r4
 800f468:	d10e      	bne.n	800f488 <_malloc_r+0xcc>
 800f46a:	6032      	str	r2, [r6, #0]
 800f46c:	0028      	movs	r0, r5
 800f46e:	f000 f82d 	bl	800f4cc <__malloc_unlock>
 800f472:	0020      	movs	r0, r4
 800f474:	2207      	movs	r2, #7
 800f476:	300b      	adds	r0, #11
 800f478:	1d23      	adds	r3, r4, #4
 800f47a:	4390      	bics	r0, r2
 800f47c:	1ac2      	subs	r2, r0, r3
 800f47e:	4298      	cmp	r0, r3
 800f480:	d0df      	beq.n	800f442 <_malloc_r+0x86>
 800f482:	1a1b      	subs	r3, r3, r0
 800f484:	50a3      	str	r3, [r4, r2]
 800f486:	e7dc      	b.n	800f442 <_malloc_r+0x86>
 800f488:	605a      	str	r2, [r3, #4]
 800f48a:	e7ef      	b.n	800f46c <_malloc_r+0xb0>
 800f48c:	0023      	movs	r3, r4
 800f48e:	6864      	ldr	r4, [r4, #4]
 800f490:	e7a6      	b.n	800f3e0 <_malloc_r+0x24>
 800f492:	9c00      	ldr	r4, [sp, #0]
 800f494:	6863      	ldr	r3, [r4, #4]
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	e7ad      	b.n	800f3f6 <_malloc_r+0x3a>
 800f49a:	001a      	movs	r2, r3
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	42a3      	cmp	r3, r4
 800f4a0:	d1fb      	bne.n	800f49a <_malloc_r+0xde>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	e7da      	b.n	800f45c <_malloc_r+0xa0>
 800f4a6:	230c      	movs	r3, #12
 800f4a8:	0028      	movs	r0, r5
 800f4aa:	602b      	str	r3, [r5, #0]
 800f4ac:	f000 f80e 	bl	800f4cc <__malloc_unlock>
 800f4b0:	e7c6      	b.n	800f440 <_malloc_r+0x84>
 800f4b2:	6007      	str	r7, [r0, #0]
 800f4b4:	e7da      	b.n	800f46c <_malloc_r+0xb0>
 800f4b6:	46c0      	nop			@ (mov r8, r8)
 800f4b8:	20000fdc 	.word	0x20000fdc

0800f4bc <__malloc_lock>:
 800f4bc:	b510      	push	{r4, lr}
 800f4be:	4802      	ldr	r0, [pc, #8]	@ (800f4c8 <__malloc_lock+0xc>)
 800f4c0:	f7ff f883 	bl	800e5ca <__retarget_lock_acquire_recursive>
 800f4c4:	bd10      	pop	{r4, pc}
 800f4c6:	46c0      	nop			@ (mov r8, r8)
 800f4c8:	20000fd4 	.word	0x20000fd4

0800f4cc <__malloc_unlock>:
 800f4cc:	b510      	push	{r4, lr}
 800f4ce:	4802      	ldr	r0, [pc, #8]	@ (800f4d8 <__malloc_unlock+0xc>)
 800f4d0:	f7ff f87c 	bl	800e5cc <__retarget_lock_release_recursive>
 800f4d4:	bd10      	pop	{r4, pc}
 800f4d6:	46c0      	nop			@ (mov r8, r8)
 800f4d8:	20000fd4 	.word	0x20000fd4

0800f4dc <_Balloc>:
 800f4dc:	b570      	push	{r4, r5, r6, lr}
 800f4de:	69c5      	ldr	r5, [r0, #28]
 800f4e0:	0006      	movs	r6, r0
 800f4e2:	000c      	movs	r4, r1
 800f4e4:	2d00      	cmp	r5, #0
 800f4e6:	d10e      	bne.n	800f506 <_Balloc+0x2a>
 800f4e8:	2010      	movs	r0, #16
 800f4ea:	f7ff ff3b 	bl	800f364 <malloc>
 800f4ee:	1e02      	subs	r2, r0, #0
 800f4f0:	61f0      	str	r0, [r6, #28]
 800f4f2:	d104      	bne.n	800f4fe <_Balloc+0x22>
 800f4f4:	216b      	movs	r1, #107	@ 0x6b
 800f4f6:	4b19      	ldr	r3, [pc, #100]	@ (800f55c <_Balloc+0x80>)
 800f4f8:	4819      	ldr	r0, [pc, #100]	@ (800f560 <_Balloc+0x84>)
 800f4fa:	f000 fc59 	bl	800fdb0 <__assert_func>
 800f4fe:	6045      	str	r5, [r0, #4]
 800f500:	6085      	str	r5, [r0, #8]
 800f502:	6005      	str	r5, [r0, #0]
 800f504:	60c5      	str	r5, [r0, #12]
 800f506:	69f5      	ldr	r5, [r6, #28]
 800f508:	68eb      	ldr	r3, [r5, #12]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d013      	beq.n	800f536 <_Balloc+0x5a>
 800f50e:	69f3      	ldr	r3, [r6, #28]
 800f510:	00a2      	lsls	r2, r4, #2
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	189b      	adds	r3, r3, r2
 800f516:	6818      	ldr	r0, [r3, #0]
 800f518:	2800      	cmp	r0, #0
 800f51a:	d118      	bne.n	800f54e <_Balloc+0x72>
 800f51c:	2101      	movs	r1, #1
 800f51e:	000d      	movs	r5, r1
 800f520:	40a5      	lsls	r5, r4
 800f522:	1d6a      	adds	r2, r5, #5
 800f524:	0030      	movs	r0, r6
 800f526:	0092      	lsls	r2, r2, #2
 800f528:	f000 fc60 	bl	800fdec <_calloc_r>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	d00c      	beq.n	800f54a <_Balloc+0x6e>
 800f530:	6044      	str	r4, [r0, #4]
 800f532:	6085      	str	r5, [r0, #8]
 800f534:	e00d      	b.n	800f552 <_Balloc+0x76>
 800f536:	2221      	movs	r2, #33	@ 0x21
 800f538:	2104      	movs	r1, #4
 800f53a:	0030      	movs	r0, r6
 800f53c:	f000 fc56 	bl	800fdec <_calloc_r>
 800f540:	69f3      	ldr	r3, [r6, #28]
 800f542:	60e8      	str	r0, [r5, #12]
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1e1      	bne.n	800f50e <_Balloc+0x32>
 800f54a:	2000      	movs	r0, #0
 800f54c:	bd70      	pop	{r4, r5, r6, pc}
 800f54e:	6802      	ldr	r2, [r0, #0]
 800f550:	601a      	str	r2, [r3, #0]
 800f552:	2300      	movs	r3, #0
 800f554:	6103      	str	r3, [r0, #16]
 800f556:	60c3      	str	r3, [r0, #12]
 800f558:	e7f8      	b.n	800f54c <_Balloc+0x70>
 800f55a:	46c0      	nop			@ (mov r8, r8)
 800f55c:	08010ed1 	.word	0x08010ed1
 800f560:	08010f51 	.word	0x08010f51

0800f564 <_Bfree>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	69c6      	ldr	r6, [r0, #28]
 800f568:	0005      	movs	r5, r0
 800f56a:	000c      	movs	r4, r1
 800f56c:	2e00      	cmp	r6, #0
 800f56e:	d10e      	bne.n	800f58e <_Bfree+0x2a>
 800f570:	2010      	movs	r0, #16
 800f572:	f7ff fef7 	bl	800f364 <malloc>
 800f576:	1e02      	subs	r2, r0, #0
 800f578:	61e8      	str	r0, [r5, #28]
 800f57a:	d104      	bne.n	800f586 <_Bfree+0x22>
 800f57c:	218f      	movs	r1, #143	@ 0x8f
 800f57e:	4b09      	ldr	r3, [pc, #36]	@ (800f5a4 <_Bfree+0x40>)
 800f580:	4809      	ldr	r0, [pc, #36]	@ (800f5a8 <_Bfree+0x44>)
 800f582:	f000 fc15 	bl	800fdb0 <__assert_func>
 800f586:	6046      	str	r6, [r0, #4]
 800f588:	6086      	str	r6, [r0, #8]
 800f58a:	6006      	str	r6, [r0, #0]
 800f58c:	60c6      	str	r6, [r0, #12]
 800f58e:	2c00      	cmp	r4, #0
 800f590:	d007      	beq.n	800f5a2 <_Bfree+0x3e>
 800f592:	69eb      	ldr	r3, [r5, #28]
 800f594:	6862      	ldr	r2, [r4, #4]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	0092      	lsls	r2, r2, #2
 800f59a:	189b      	adds	r3, r3, r2
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	6022      	str	r2, [r4, #0]
 800f5a0:	601c      	str	r4, [r3, #0]
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}
 800f5a4:	08010ed1 	.word	0x08010ed1
 800f5a8:	08010f51 	.word	0x08010f51

0800f5ac <__multadd>:
 800f5ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5ae:	000f      	movs	r7, r1
 800f5b0:	9001      	str	r0, [sp, #4]
 800f5b2:	000c      	movs	r4, r1
 800f5b4:	001e      	movs	r6, r3
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	690d      	ldr	r5, [r1, #16]
 800f5ba:	3714      	adds	r7, #20
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	3001      	adds	r0, #1
 800f5c0:	b299      	uxth	r1, r3
 800f5c2:	4351      	muls	r1, r2
 800f5c4:	0c1b      	lsrs	r3, r3, #16
 800f5c6:	4353      	muls	r3, r2
 800f5c8:	1989      	adds	r1, r1, r6
 800f5ca:	0c0e      	lsrs	r6, r1, #16
 800f5cc:	199b      	adds	r3, r3, r6
 800f5ce:	0c1e      	lsrs	r6, r3, #16
 800f5d0:	b289      	uxth	r1, r1
 800f5d2:	041b      	lsls	r3, r3, #16
 800f5d4:	185b      	adds	r3, r3, r1
 800f5d6:	c708      	stmia	r7!, {r3}
 800f5d8:	4285      	cmp	r5, r0
 800f5da:	dcef      	bgt.n	800f5bc <__multadd+0x10>
 800f5dc:	2e00      	cmp	r6, #0
 800f5de:	d022      	beq.n	800f626 <__multadd+0x7a>
 800f5e0:	68a3      	ldr	r3, [r4, #8]
 800f5e2:	42ab      	cmp	r3, r5
 800f5e4:	dc19      	bgt.n	800f61a <__multadd+0x6e>
 800f5e6:	6861      	ldr	r1, [r4, #4]
 800f5e8:	9801      	ldr	r0, [sp, #4]
 800f5ea:	3101      	adds	r1, #1
 800f5ec:	f7ff ff76 	bl	800f4dc <_Balloc>
 800f5f0:	1e07      	subs	r7, r0, #0
 800f5f2:	d105      	bne.n	800f600 <__multadd+0x54>
 800f5f4:	003a      	movs	r2, r7
 800f5f6:	21ba      	movs	r1, #186	@ 0xba
 800f5f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f62c <__multadd+0x80>)
 800f5fa:	480d      	ldr	r0, [pc, #52]	@ (800f630 <__multadd+0x84>)
 800f5fc:	f000 fbd8 	bl	800fdb0 <__assert_func>
 800f600:	0021      	movs	r1, r4
 800f602:	6922      	ldr	r2, [r4, #16]
 800f604:	310c      	adds	r1, #12
 800f606:	3202      	adds	r2, #2
 800f608:	0092      	lsls	r2, r2, #2
 800f60a:	300c      	adds	r0, #12
 800f60c:	f000 fbc6 	bl	800fd9c <memcpy>
 800f610:	0021      	movs	r1, r4
 800f612:	9801      	ldr	r0, [sp, #4]
 800f614:	f7ff ffa6 	bl	800f564 <_Bfree>
 800f618:	003c      	movs	r4, r7
 800f61a:	1d2b      	adds	r3, r5, #4
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	18e3      	adds	r3, r4, r3
 800f620:	3501      	adds	r5, #1
 800f622:	605e      	str	r6, [r3, #4]
 800f624:	6125      	str	r5, [r4, #16]
 800f626:	0020      	movs	r0, r4
 800f628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f62a:	46c0      	nop			@ (mov r8, r8)
 800f62c:	08010f40 	.word	0x08010f40
 800f630:	08010f51 	.word	0x08010f51

0800f634 <__hi0bits>:
 800f634:	2280      	movs	r2, #128	@ 0x80
 800f636:	0003      	movs	r3, r0
 800f638:	0252      	lsls	r2, r2, #9
 800f63a:	2000      	movs	r0, #0
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d201      	bcs.n	800f644 <__hi0bits+0x10>
 800f640:	041b      	lsls	r3, r3, #16
 800f642:	3010      	adds	r0, #16
 800f644:	2280      	movs	r2, #128	@ 0x80
 800f646:	0452      	lsls	r2, r2, #17
 800f648:	4293      	cmp	r3, r2
 800f64a:	d201      	bcs.n	800f650 <__hi0bits+0x1c>
 800f64c:	3008      	adds	r0, #8
 800f64e:	021b      	lsls	r3, r3, #8
 800f650:	2280      	movs	r2, #128	@ 0x80
 800f652:	0552      	lsls	r2, r2, #21
 800f654:	4293      	cmp	r3, r2
 800f656:	d201      	bcs.n	800f65c <__hi0bits+0x28>
 800f658:	3004      	adds	r0, #4
 800f65a:	011b      	lsls	r3, r3, #4
 800f65c:	2280      	movs	r2, #128	@ 0x80
 800f65e:	05d2      	lsls	r2, r2, #23
 800f660:	4293      	cmp	r3, r2
 800f662:	d201      	bcs.n	800f668 <__hi0bits+0x34>
 800f664:	3002      	adds	r0, #2
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	2b00      	cmp	r3, #0
 800f66a:	db03      	blt.n	800f674 <__hi0bits+0x40>
 800f66c:	3001      	adds	r0, #1
 800f66e:	4213      	tst	r3, r2
 800f670:	d100      	bne.n	800f674 <__hi0bits+0x40>
 800f672:	2020      	movs	r0, #32
 800f674:	4770      	bx	lr

0800f676 <__lo0bits>:
 800f676:	6803      	ldr	r3, [r0, #0]
 800f678:	0001      	movs	r1, r0
 800f67a:	2207      	movs	r2, #7
 800f67c:	0018      	movs	r0, r3
 800f67e:	4010      	ands	r0, r2
 800f680:	4213      	tst	r3, r2
 800f682:	d00d      	beq.n	800f6a0 <__lo0bits+0x2a>
 800f684:	3a06      	subs	r2, #6
 800f686:	2000      	movs	r0, #0
 800f688:	4213      	tst	r3, r2
 800f68a:	d105      	bne.n	800f698 <__lo0bits+0x22>
 800f68c:	3002      	adds	r0, #2
 800f68e:	4203      	tst	r3, r0
 800f690:	d003      	beq.n	800f69a <__lo0bits+0x24>
 800f692:	40d3      	lsrs	r3, r2
 800f694:	0010      	movs	r0, r2
 800f696:	600b      	str	r3, [r1, #0]
 800f698:	4770      	bx	lr
 800f69a:	089b      	lsrs	r3, r3, #2
 800f69c:	600b      	str	r3, [r1, #0]
 800f69e:	e7fb      	b.n	800f698 <__lo0bits+0x22>
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	2a00      	cmp	r2, #0
 800f6a4:	d101      	bne.n	800f6aa <__lo0bits+0x34>
 800f6a6:	2010      	movs	r0, #16
 800f6a8:	0c1b      	lsrs	r3, r3, #16
 800f6aa:	b2da      	uxtb	r2, r3
 800f6ac:	2a00      	cmp	r2, #0
 800f6ae:	d101      	bne.n	800f6b4 <__lo0bits+0x3e>
 800f6b0:	3008      	adds	r0, #8
 800f6b2:	0a1b      	lsrs	r3, r3, #8
 800f6b4:	071a      	lsls	r2, r3, #28
 800f6b6:	d101      	bne.n	800f6bc <__lo0bits+0x46>
 800f6b8:	3004      	adds	r0, #4
 800f6ba:	091b      	lsrs	r3, r3, #4
 800f6bc:	079a      	lsls	r2, r3, #30
 800f6be:	d101      	bne.n	800f6c4 <__lo0bits+0x4e>
 800f6c0:	3002      	adds	r0, #2
 800f6c2:	089b      	lsrs	r3, r3, #2
 800f6c4:	07da      	lsls	r2, r3, #31
 800f6c6:	d4e9      	bmi.n	800f69c <__lo0bits+0x26>
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	085b      	lsrs	r3, r3, #1
 800f6cc:	d1e6      	bne.n	800f69c <__lo0bits+0x26>
 800f6ce:	2020      	movs	r0, #32
 800f6d0:	e7e2      	b.n	800f698 <__lo0bits+0x22>
	...

0800f6d4 <__i2b>:
 800f6d4:	b510      	push	{r4, lr}
 800f6d6:	000c      	movs	r4, r1
 800f6d8:	2101      	movs	r1, #1
 800f6da:	f7ff feff 	bl	800f4dc <_Balloc>
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d107      	bne.n	800f6f2 <__i2b+0x1e>
 800f6e2:	2146      	movs	r1, #70	@ 0x46
 800f6e4:	4c05      	ldr	r4, [pc, #20]	@ (800f6fc <__i2b+0x28>)
 800f6e6:	0002      	movs	r2, r0
 800f6e8:	4b05      	ldr	r3, [pc, #20]	@ (800f700 <__i2b+0x2c>)
 800f6ea:	0020      	movs	r0, r4
 800f6ec:	31ff      	adds	r1, #255	@ 0xff
 800f6ee:	f000 fb5f 	bl	800fdb0 <__assert_func>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	6144      	str	r4, [r0, #20]
 800f6f6:	6103      	str	r3, [r0, #16]
 800f6f8:	bd10      	pop	{r4, pc}
 800f6fa:	46c0      	nop			@ (mov r8, r8)
 800f6fc:	08010f51 	.word	0x08010f51
 800f700:	08010f40 	.word	0x08010f40

0800f704 <__multiply>:
 800f704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f706:	0014      	movs	r4, r2
 800f708:	690a      	ldr	r2, [r1, #16]
 800f70a:	6923      	ldr	r3, [r4, #16]
 800f70c:	000d      	movs	r5, r1
 800f70e:	b089      	sub	sp, #36	@ 0x24
 800f710:	429a      	cmp	r2, r3
 800f712:	db02      	blt.n	800f71a <__multiply+0x16>
 800f714:	0023      	movs	r3, r4
 800f716:	000c      	movs	r4, r1
 800f718:	001d      	movs	r5, r3
 800f71a:	6927      	ldr	r7, [r4, #16]
 800f71c:	692e      	ldr	r6, [r5, #16]
 800f71e:	6861      	ldr	r1, [r4, #4]
 800f720:	19bb      	adds	r3, r7, r6
 800f722:	9300      	str	r3, [sp, #0]
 800f724:	68a3      	ldr	r3, [r4, #8]
 800f726:	19ba      	adds	r2, r7, r6
 800f728:	4293      	cmp	r3, r2
 800f72a:	da00      	bge.n	800f72e <__multiply+0x2a>
 800f72c:	3101      	adds	r1, #1
 800f72e:	f7ff fed5 	bl	800f4dc <_Balloc>
 800f732:	4684      	mov	ip, r0
 800f734:	2800      	cmp	r0, #0
 800f736:	d106      	bne.n	800f746 <__multiply+0x42>
 800f738:	21b1      	movs	r1, #177	@ 0xb1
 800f73a:	4662      	mov	r2, ip
 800f73c:	4b44      	ldr	r3, [pc, #272]	@ (800f850 <__multiply+0x14c>)
 800f73e:	4845      	ldr	r0, [pc, #276]	@ (800f854 <__multiply+0x150>)
 800f740:	0049      	lsls	r1, r1, #1
 800f742:	f000 fb35 	bl	800fdb0 <__assert_func>
 800f746:	0002      	movs	r2, r0
 800f748:	19bb      	adds	r3, r7, r6
 800f74a:	3214      	adds	r2, #20
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	18d3      	adds	r3, r2, r3
 800f750:	9301      	str	r3, [sp, #4]
 800f752:	2100      	movs	r1, #0
 800f754:	0013      	movs	r3, r2
 800f756:	9801      	ldr	r0, [sp, #4]
 800f758:	4283      	cmp	r3, r0
 800f75a:	d328      	bcc.n	800f7ae <__multiply+0xaa>
 800f75c:	0023      	movs	r3, r4
 800f75e:	00bf      	lsls	r7, r7, #2
 800f760:	3314      	adds	r3, #20
 800f762:	9304      	str	r3, [sp, #16]
 800f764:	3514      	adds	r5, #20
 800f766:	19db      	adds	r3, r3, r7
 800f768:	00b6      	lsls	r6, r6, #2
 800f76a:	9302      	str	r3, [sp, #8]
 800f76c:	19ab      	adds	r3, r5, r6
 800f76e:	9307      	str	r3, [sp, #28]
 800f770:	2304      	movs	r3, #4
 800f772:	9305      	str	r3, [sp, #20]
 800f774:	0023      	movs	r3, r4
 800f776:	9902      	ldr	r1, [sp, #8]
 800f778:	3315      	adds	r3, #21
 800f77a:	4299      	cmp	r1, r3
 800f77c:	d305      	bcc.n	800f78a <__multiply+0x86>
 800f77e:	1b0c      	subs	r4, r1, r4
 800f780:	3c15      	subs	r4, #21
 800f782:	08a4      	lsrs	r4, r4, #2
 800f784:	3401      	adds	r4, #1
 800f786:	00a3      	lsls	r3, r4, #2
 800f788:	9305      	str	r3, [sp, #20]
 800f78a:	9b07      	ldr	r3, [sp, #28]
 800f78c:	429d      	cmp	r5, r3
 800f78e:	d310      	bcc.n	800f7b2 <__multiply+0xae>
 800f790:	9b00      	ldr	r3, [sp, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	dd05      	ble.n	800f7a2 <__multiply+0x9e>
 800f796:	9b01      	ldr	r3, [sp, #4]
 800f798:	3b04      	subs	r3, #4
 800f79a:	9301      	str	r3, [sp, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d052      	beq.n	800f848 <__multiply+0x144>
 800f7a2:	4663      	mov	r3, ip
 800f7a4:	4660      	mov	r0, ip
 800f7a6:	9a00      	ldr	r2, [sp, #0]
 800f7a8:	611a      	str	r2, [r3, #16]
 800f7aa:	b009      	add	sp, #36	@ 0x24
 800f7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ae:	c302      	stmia	r3!, {r1}
 800f7b0:	e7d1      	b.n	800f756 <__multiply+0x52>
 800f7b2:	682c      	ldr	r4, [r5, #0]
 800f7b4:	b2a4      	uxth	r4, r4
 800f7b6:	2c00      	cmp	r4, #0
 800f7b8:	d01f      	beq.n	800f7fa <__multiply+0xf6>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	0017      	movs	r7, r2
 800f7be:	9e04      	ldr	r6, [sp, #16]
 800f7c0:	9303      	str	r3, [sp, #12]
 800f7c2:	ce08      	ldmia	r6!, {r3}
 800f7c4:	6839      	ldr	r1, [r7, #0]
 800f7c6:	9306      	str	r3, [sp, #24]
 800f7c8:	466b      	mov	r3, sp
 800f7ca:	8b1b      	ldrh	r3, [r3, #24]
 800f7cc:	b288      	uxth	r0, r1
 800f7ce:	4363      	muls	r3, r4
 800f7d0:	181b      	adds	r3, r3, r0
 800f7d2:	9803      	ldr	r0, [sp, #12]
 800f7d4:	0c09      	lsrs	r1, r1, #16
 800f7d6:	181b      	adds	r3, r3, r0
 800f7d8:	9806      	ldr	r0, [sp, #24]
 800f7da:	0c00      	lsrs	r0, r0, #16
 800f7dc:	4360      	muls	r0, r4
 800f7de:	1840      	adds	r0, r0, r1
 800f7e0:	0c19      	lsrs	r1, r3, #16
 800f7e2:	1841      	adds	r1, r0, r1
 800f7e4:	0c08      	lsrs	r0, r1, #16
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	0409      	lsls	r1, r1, #16
 800f7ea:	4319      	orrs	r1, r3
 800f7ec:	9b02      	ldr	r3, [sp, #8]
 800f7ee:	9003      	str	r0, [sp, #12]
 800f7f0:	c702      	stmia	r7!, {r1}
 800f7f2:	42b3      	cmp	r3, r6
 800f7f4:	d8e5      	bhi.n	800f7c2 <__multiply+0xbe>
 800f7f6:	9b05      	ldr	r3, [sp, #20]
 800f7f8:	50d0      	str	r0, [r2, r3]
 800f7fa:	682c      	ldr	r4, [r5, #0]
 800f7fc:	0c24      	lsrs	r4, r4, #16
 800f7fe:	d020      	beq.n	800f842 <__multiply+0x13e>
 800f800:	2100      	movs	r1, #0
 800f802:	0010      	movs	r0, r2
 800f804:	6813      	ldr	r3, [r2, #0]
 800f806:	9e04      	ldr	r6, [sp, #16]
 800f808:	9103      	str	r1, [sp, #12]
 800f80a:	6831      	ldr	r1, [r6, #0]
 800f80c:	6807      	ldr	r7, [r0, #0]
 800f80e:	b289      	uxth	r1, r1
 800f810:	4361      	muls	r1, r4
 800f812:	0c3f      	lsrs	r7, r7, #16
 800f814:	19c9      	adds	r1, r1, r7
 800f816:	9f03      	ldr	r7, [sp, #12]
 800f818:	b29b      	uxth	r3, r3
 800f81a:	19c9      	adds	r1, r1, r7
 800f81c:	040f      	lsls	r7, r1, #16
 800f81e:	431f      	orrs	r7, r3
 800f820:	6007      	str	r7, [r0, #0]
 800f822:	ce80      	ldmia	r6!, {r7}
 800f824:	6843      	ldr	r3, [r0, #4]
 800f826:	0c3f      	lsrs	r7, r7, #16
 800f828:	4367      	muls	r7, r4
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	0c09      	lsrs	r1, r1, #16
 800f82e:	18fb      	adds	r3, r7, r3
 800f830:	185b      	adds	r3, r3, r1
 800f832:	0c19      	lsrs	r1, r3, #16
 800f834:	9103      	str	r1, [sp, #12]
 800f836:	9902      	ldr	r1, [sp, #8]
 800f838:	3004      	adds	r0, #4
 800f83a:	42b1      	cmp	r1, r6
 800f83c:	d8e5      	bhi.n	800f80a <__multiply+0x106>
 800f83e:	9905      	ldr	r1, [sp, #20]
 800f840:	5053      	str	r3, [r2, r1]
 800f842:	3504      	adds	r5, #4
 800f844:	3204      	adds	r2, #4
 800f846:	e7a0      	b.n	800f78a <__multiply+0x86>
 800f848:	9b00      	ldr	r3, [sp, #0]
 800f84a:	3b01      	subs	r3, #1
 800f84c:	9300      	str	r3, [sp, #0]
 800f84e:	e79f      	b.n	800f790 <__multiply+0x8c>
 800f850:	08010f40 	.word	0x08010f40
 800f854:	08010f51 	.word	0x08010f51

0800f858 <__pow5mult>:
 800f858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f85a:	2303      	movs	r3, #3
 800f85c:	0015      	movs	r5, r2
 800f85e:	0007      	movs	r7, r0
 800f860:	000e      	movs	r6, r1
 800f862:	401a      	ands	r2, r3
 800f864:	421d      	tst	r5, r3
 800f866:	d008      	beq.n	800f87a <__pow5mult+0x22>
 800f868:	4925      	ldr	r1, [pc, #148]	@ (800f900 <__pow5mult+0xa8>)
 800f86a:	3a01      	subs	r2, #1
 800f86c:	0092      	lsls	r2, r2, #2
 800f86e:	5852      	ldr	r2, [r2, r1]
 800f870:	2300      	movs	r3, #0
 800f872:	0031      	movs	r1, r6
 800f874:	f7ff fe9a 	bl	800f5ac <__multadd>
 800f878:	0006      	movs	r6, r0
 800f87a:	10ad      	asrs	r5, r5, #2
 800f87c:	d03d      	beq.n	800f8fa <__pow5mult+0xa2>
 800f87e:	69fc      	ldr	r4, [r7, #28]
 800f880:	2c00      	cmp	r4, #0
 800f882:	d10f      	bne.n	800f8a4 <__pow5mult+0x4c>
 800f884:	2010      	movs	r0, #16
 800f886:	f7ff fd6d 	bl	800f364 <malloc>
 800f88a:	1e02      	subs	r2, r0, #0
 800f88c:	61f8      	str	r0, [r7, #28]
 800f88e:	d105      	bne.n	800f89c <__pow5mult+0x44>
 800f890:	21b4      	movs	r1, #180	@ 0xb4
 800f892:	4b1c      	ldr	r3, [pc, #112]	@ (800f904 <__pow5mult+0xac>)
 800f894:	481c      	ldr	r0, [pc, #112]	@ (800f908 <__pow5mult+0xb0>)
 800f896:	31ff      	adds	r1, #255	@ 0xff
 800f898:	f000 fa8a 	bl	800fdb0 <__assert_func>
 800f89c:	6044      	str	r4, [r0, #4]
 800f89e:	6084      	str	r4, [r0, #8]
 800f8a0:	6004      	str	r4, [r0, #0]
 800f8a2:	60c4      	str	r4, [r0, #12]
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	689c      	ldr	r4, [r3, #8]
 800f8a8:	9301      	str	r3, [sp, #4]
 800f8aa:	2c00      	cmp	r4, #0
 800f8ac:	d108      	bne.n	800f8c0 <__pow5mult+0x68>
 800f8ae:	0038      	movs	r0, r7
 800f8b0:	4916      	ldr	r1, [pc, #88]	@ (800f90c <__pow5mult+0xb4>)
 800f8b2:	f7ff ff0f 	bl	800f6d4 <__i2b>
 800f8b6:	9b01      	ldr	r3, [sp, #4]
 800f8b8:	0004      	movs	r4, r0
 800f8ba:	6098      	str	r0, [r3, #8]
 800f8bc:	2300      	movs	r3, #0
 800f8be:	6003      	str	r3, [r0, #0]
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	421d      	tst	r5, r3
 800f8c4:	d00a      	beq.n	800f8dc <__pow5mult+0x84>
 800f8c6:	0031      	movs	r1, r6
 800f8c8:	0022      	movs	r2, r4
 800f8ca:	0038      	movs	r0, r7
 800f8cc:	f7ff ff1a 	bl	800f704 <__multiply>
 800f8d0:	0031      	movs	r1, r6
 800f8d2:	9001      	str	r0, [sp, #4]
 800f8d4:	0038      	movs	r0, r7
 800f8d6:	f7ff fe45 	bl	800f564 <_Bfree>
 800f8da:	9e01      	ldr	r6, [sp, #4]
 800f8dc:	106d      	asrs	r5, r5, #1
 800f8de:	d00c      	beq.n	800f8fa <__pow5mult+0xa2>
 800f8e0:	6820      	ldr	r0, [r4, #0]
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	d107      	bne.n	800f8f6 <__pow5mult+0x9e>
 800f8e6:	0022      	movs	r2, r4
 800f8e8:	0021      	movs	r1, r4
 800f8ea:	0038      	movs	r0, r7
 800f8ec:	f7ff ff0a 	bl	800f704 <__multiply>
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	6020      	str	r0, [r4, #0]
 800f8f4:	6003      	str	r3, [r0, #0]
 800f8f6:	0004      	movs	r4, r0
 800f8f8:	e7e2      	b.n	800f8c0 <__pow5mult+0x68>
 800f8fa:	0030      	movs	r0, r6
 800f8fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f8fe:	46c0      	nop			@ (mov r8, r8)
 800f900:	08011004 	.word	0x08011004
 800f904:	08010ed1 	.word	0x08010ed1
 800f908:	08010f51 	.word	0x08010f51
 800f90c:	00000271 	.word	0x00000271

0800f910 <__lshift>:
 800f910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f912:	000c      	movs	r4, r1
 800f914:	0016      	movs	r6, r2
 800f916:	6923      	ldr	r3, [r4, #16]
 800f918:	1157      	asrs	r7, r2, #5
 800f91a:	b085      	sub	sp, #20
 800f91c:	18fb      	adds	r3, r7, r3
 800f91e:	9301      	str	r3, [sp, #4]
 800f920:	3301      	adds	r3, #1
 800f922:	9300      	str	r3, [sp, #0]
 800f924:	6849      	ldr	r1, [r1, #4]
 800f926:	68a3      	ldr	r3, [r4, #8]
 800f928:	9002      	str	r0, [sp, #8]
 800f92a:	9a00      	ldr	r2, [sp, #0]
 800f92c:	4293      	cmp	r3, r2
 800f92e:	db10      	blt.n	800f952 <__lshift+0x42>
 800f930:	9802      	ldr	r0, [sp, #8]
 800f932:	f7ff fdd3 	bl	800f4dc <_Balloc>
 800f936:	2300      	movs	r3, #0
 800f938:	0001      	movs	r1, r0
 800f93a:	0005      	movs	r5, r0
 800f93c:	001a      	movs	r2, r3
 800f93e:	3114      	adds	r1, #20
 800f940:	4298      	cmp	r0, r3
 800f942:	d10c      	bne.n	800f95e <__lshift+0x4e>
 800f944:	21ef      	movs	r1, #239	@ 0xef
 800f946:	002a      	movs	r2, r5
 800f948:	4b25      	ldr	r3, [pc, #148]	@ (800f9e0 <__lshift+0xd0>)
 800f94a:	4826      	ldr	r0, [pc, #152]	@ (800f9e4 <__lshift+0xd4>)
 800f94c:	0049      	lsls	r1, r1, #1
 800f94e:	f000 fa2f 	bl	800fdb0 <__assert_func>
 800f952:	3101      	adds	r1, #1
 800f954:	005b      	lsls	r3, r3, #1
 800f956:	e7e8      	b.n	800f92a <__lshift+0x1a>
 800f958:	0098      	lsls	r0, r3, #2
 800f95a:	500a      	str	r2, [r1, r0]
 800f95c:	3301      	adds	r3, #1
 800f95e:	42bb      	cmp	r3, r7
 800f960:	dbfa      	blt.n	800f958 <__lshift+0x48>
 800f962:	43fb      	mvns	r3, r7
 800f964:	17db      	asrs	r3, r3, #31
 800f966:	401f      	ands	r7, r3
 800f968:	00bf      	lsls	r7, r7, #2
 800f96a:	0023      	movs	r3, r4
 800f96c:	201f      	movs	r0, #31
 800f96e:	19c9      	adds	r1, r1, r7
 800f970:	0037      	movs	r7, r6
 800f972:	6922      	ldr	r2, [r4, #16]
 800f974:	3314      	adds	r3, #20
 800f976:	0092      	lsls	r2, r2, #2
 800f978:	189a      	adds	r2, r3, r2
 800f97a:	4007      	ands	r7, r0
 800f97c:	4206      	tst	r6, r0
 800f97e:	d029      	beq.n	800f9d4 <__lshift+0xc4>
 800f980:	3001      	adds	r0, #1
 800f982:	1bc0      	subs	r0, r0, r7
 800f984:	9003      	str	r0, [sp, #12]
 800f986:	468c      	mov	ip, r1
 800f988:	2000      	movs	r0, #0
 800f98a:	681e      	ldr	r6, [r3, #0]
 800f98c:	40be      	lsls	r6, r7
 800f98e:	4306      	orrs	r6, r0
 800f990:	4660      	mov	r0, ip
 800f992:	c040      	stmia	r0!, {r6}
 800f994:	4684      	mov	ip, r0
 800f996:	9e03      	ldr	r6, [sp, #12]
 800f998:	cb01      	ldmia	r3!, {r0}
 800f99a:	40f0      	lsrs	r0, r6
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d8f4      	bhi.n	800f98a <__lshift+0x7a>
 800f9a0:	0026      	movs	r6, r4
 800f9a2:	3615      	adds	r6, #21
 800f9a4:	2304      	movs	r3, #4
 800f9a6:	42b2      	cmp	r2, r6
 800f9a8:	d304      	bcc.n	800f9b4 <__lshift+0xa4>
 800f9aa:	1b13      	subs	r3, r2, r4
 800f9ac:	3b15      	subs	r3, #21
 800f9ae:	089b      	lsrs	r3, r3, #2
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	50c8      	str	r0, [r1, r3]
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d002      	beq.n	800f9c0 <__lshift+0xb0>
 800f9ba:	9b01      	ldr	r3, [sp, #4]
 800f9bc:	3302      	adds	r3, #2
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	9b00      	ldr	r3, [sp, #0]
 800f9c2:	9802      	ldr	r0, [sp, #8]
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	0021      	movs	r1, r4
 800f9c8:	612b      	str	r3, [r5, #16]
 800f9ca:	f7ff fdcb 	bl	800f564 <_Bfree>
 800f9ce:	0028      	movs	r0, r5
 800f9d0:	b005      	add	sp, #20
 800f9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9d4:	cb01      	ldmia	r3!, {r0}
 800f9d6:	c101      	stmia	r1!, {r0}
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d8fb      	bhi.n	800f9d4 <__lshift+0xc4>
 800f9dc:	e7f0      	b.n	800f9c0 <__lshift+0xb0>
 800f9de:	46c0      	nop			@ (mov r8, r8)
 800f9e0:	08010f40 	.word	0x08010f40
 800f9e4:	08010f51 	.word	0x08010f51

0800f9e8 <__mcmp>:
 800f9e8:	b530      	push	{r4, r5, lr}
 800f9ea:	690b      	ldr	r3, [r1, #16]
 800f9ec:	6904      	ldr	r4, [r0, #16]
 800f9ee:	0002      	movs	r2, r0
 800f9f0:	1ae0      	subs	r0, r4, r3
 800f9f2:	429c      	cmp	r4, r3
 800f9f4:	d10f      	bne.n	800fa16 <__mcmp+0x2e>
 800f9f6:	3214      	adds	r2, #20
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	3114      	adds	r1, #20
 800f9fc:	0014      	movs	r4, r2
 800f9fe:	18c9      	adds	r1, r1, r3
 800fa00:	18d2      	adds	r2, r2, r3
 800fa02:	3a04      	subs	r2, #4
 800fa04:	3904      	subs	r1, #4
 800fa06:	6815      	ldr	r5, [r2, #0]
 800fa08:	680b      	ldr	r3, [r1, #0]
 800fa0a:	429d      	cmp	r5, r3
 800fa0c:	d004      	beq.n	800fa18 <__mcmp+0x30>
 800fa0e:	2001      	movs	r0, #1
 800fa10:	429d      	cmp	r5, r3
 800fa12:	d200      	bcs.n	800fa16 <__mcmp+0x2e>
 800fa14:	3802      	subs	r0, #2
 800fa16:	bd30      	pop	{r4, r5, pc}
 800fa18:	4294      	cmp	r4, r2
 800fa1a:	d3f2      	bcc.n	800fa02 <__mcmp+0x1a>
 800fa1c:	e7fb      	b.n	800fa16 <__mcmp+0x2e>
	...

0800fa20 <__mdiff>:
 800fa20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa22:	000c      	movs	r4, r1
 800fa24:	b087      	sub	sp, #28
 800fa26:	9000      	str	r0, [sp, #0]
 800fa28:	0011      	movs	r1, r2
 800fa2a:	0020      	movs	r0, r4
 800fa2c:	0017      	movs	r7, r2
 800fa2e:	f7ff ffdb 	bl	800f9e8 <__mcmp>
 800fa32:	1e05      	subs	r5, r0, #0
 800fa34:	d110      	bne.n	800fa58 <__mdiff+0x38>
 800fa36:	0001      	movs	r1, r0
 800fa38:	9800      	ldr	r0, [sp, #0]
 800fa3a:	f7ff fd4f 	bl	800f4dc <_Balloc>
 800fa3e:	1e02      	subs	r2, r0, #0
 800fa40:	d104      	bne.n	800fa4c <__mdiff+0x2c>
 800fa42:	4b40      	ldr	r3, [pc, #256]	@ (800fb44 <__mdiff+0x124>)
 800fa44:	4840      	ldr	r0, [pc, #256]	@ (800fb48 <__mdiff+0x128>)
 800fa46:	4941      	ldr	r1, [pc, #260]	@ (800fb4c <__mdiff+0x12c>)
 800fa48:	f000 f9b2 	bl	800fdb0 <__assert_func>
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	6145      	str	r5, [r0, #20]
 800fa50:	6103      	str	r3, [r0, #16]
 800fa52:	0010      	movs	r0, r2
 800fa54:	b007      	add	sp, #28
 800fa56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa58:	2600      	movs	r6, #0
 800fa5a:	42b0      	cmp	r0, r6
 800fa5c:	da03      	bge.n	800fa66 <__mdiff+0x46>
 800fa5e:	0023      	movs	r3, r4
 800fa60:	003c      	movs	r4, r7
 800fa62:	001f      	movs	r7, r3
 800fa64:	3601      	adds	r6, #1
 800fa66:	6861      	ldr	r1, [r4, #4]
 800fa68:	9800      	ldr	r0, [sp, #0]
 800fa6a:	f7ff fd37 	bl	800f4dc <_Balloc>
 800fa6e:	1e02      	subs	r2, r0, #0
 800fa70:	d103      	bne.n	800fa7a <__mdiff+0x5a>
 800fa72:	4b34      	ldr	r3, [pc, #208]	@ (800fb44 <__mdiff+0x124>)
 800fa74:	4834      	ldr	r0, [pc, #208]	@ (800fb48 <__mdiff+0x128>)
 800fa76:	4936      	ldr	r1, [pc, #216]	@ (800fb50 <__mdiff+0x130>)
 800fa78:	e7e6      	b.n	800fa48 <__mdiff+0x28>
 800fa7a:	6923      	ldr	r3, [r4, #16]
 800fa7c:	3414      	adds	r4, #20
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	18e3      	adds	r3, r4, r3
 800fa84:	0021      	movs	r1, r4
 800fa86:	9401      	str	r4, [sp, #4]
 800fa88:	003c      	movs	r4, r7
 800fa8a:	9302      	str	r3, [sp, #8]
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	3414      	adds	r4, #20
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	18e3      	adds	r3, r4, r3
 800fa94:	9303      	str	r3, [sp, #12]
 800fa96:	0003      	movs	r3, r0
 800fa98:	60c6      	str	r6, [r0, #12]
 800fa9a:	468c      	mov	ip, r1
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	3314      	adds	r3, #20
 800faa0:	9304      	str	r3, [sp, #16]
 800faa2:	9305      	str	r3, [sp, #20]
 800faa4:	4663      	mov	r3, ip
 800faa6:	cb20      	ldmia	r3!, {r5}
 800faa8:	b2a9      	uxth	r1, r5
 800faaa:	000e      	movs	r6, r1
 800faac:	469c      	mov	ip, r3
 800faae:	cc08      	ldmia	r4!, {r3}
 800fab0:	0c2d      	lsrs	r5, r5, #16
 800fab2:	b299      	uxth	r1, r3
 800fab4:	1a71      	subs	r1, r6, r1
 800fab6:	1809      	adds	r1, r1, r0
 800fab8:	0c1b      	lsrs	r3, r3, #16
 800faba:	1408      	asrs	r0, r1, #16
 800fabc:	1aeb      	subs	r3, r5, r3
 800fabe:	181b      	adds	r3, r3, r0
 800fac0:	1418      	asrs	r0, r3, #16
 800fac2:	b289      	uxth	r1, r1
 800fac4:	041b      	lsls	r3, r3, #16
 800fac6:	4319      	orrs	r1, r3
 800fac8:	9b05      	ldr	r3, [sp, #20]
 800faca:	c302      	stmia	r3!, {r1}
 800facc:	9305      	str	r3, [sp, #20]
 800face:	9b03      	ldr	r3, [sp, #12]
 800fad0:	42a3      	cmp	r3, r4
 800fad2:	d8e7      	bhi.n	800faa4 <__mdiff+0x84>
 800fad4:	0039      	movs	r1, r7
 800fad6:	9c03      	ldr	r4, [sp, #12]
 800fad8:	3115      	adds	r1, #21
 800fada:	2304      	movs	r3, #4
 800fadc:	428c      	cmp	r4, r1
 800fade:	d304      	bcc.n	800faea <__mdiff+0xca>
 800fae0:	1be3      	subs	r3, r4, r7
 800fae2:	3b15      	subs	r3, #21
 800fae4:	089b      	lsrs	r3, r3, #2
 800fae6:	3301      	adds	r3, #1
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	9901      	ldr	r1, [sp, #4]
 800faec:	18cd      	adds	r5, r1, r3
 800faee:	9904      	ldr	r1, [sp, #16]
 800faf0:	002e      	movs	r6, r5
 800faf2:	18cb      	adds	r3, r1, r3
 800faf4:	001f      	movs	r7, r3
 800faf6:	9902      	ldr	r1, [sp, #8]
 800faf8:	428e      	cmp	r6, r1
 800fafa:	d311      	bcc.n	800fb20 <__mdiff+0x100>
 800fafc:	9c02      	ldr	r4, [sp, #8]
 800fafe:	1ee9      	subs	r1, r5, #3
 800fb00:	2000      	movs	r0, #0
 800fb02:	428c      	cmp	r4, r1
 800fb04:	d304      	bcc.n	800fb10 <__mdiff+0xf0>
 800fb06:	0021      	movs	r1, r4
 800fb08:	3103      	adds	r1, #3
 800fb0a:	1b49      	subs	r1, r1, r5
 800fb0c:	0889      	lsrs	r1, r1, #2
 800fb0e:	0088      	lsls	r0, r1, #2
 800fb10:	181b      	adds	r3, r3, r0
 800fb12:	3b04      	subs	r3, #4
 800fb14:	6819      	ldr	r1, [r3, #0]
 800fb16:	2900      	cmp	r1, #0
 800fb18:	d010      	beq.n	800fb3c <__mdiff+0x11c>
 800fb1a:	9b00      	ldr	r3, [sp, #0]
 800fb1c:	6113      	str	r3, [r2, #16]
 800fb1e:	e798      	b.n	800fa52 <__mdiff+0x32>
 800fb20:	4684      	mov	ip, r0
 800fb22:	ce02      	ldmia	r6!, {r1}
 800fb24:	b288      	uxth	r0, r1
 800fb26:	4460      	add	r0, ip
 800fb28:	1400      	asrs	r0, r0, #16
 800fb2a:	0c0c      	lsrs	r4, r1, #16
 800fb2c:	1904      	adds	r4, r0, r4
 800fb2e:	4461      	add	r1, ip
 800fb30:	1420      	asrs	r0, r4, #16
 800fb32:	b289      	uxth	r1, r1
 800fb34:	0424      	lsls	r4, r4, #16
 800fb36:	4321      	orrs	r1, r4
 800fb38:	c702      	stmia	r7!, {r1}
 800fb3a:	e7dc      	b.n	800faf6 <__mdiff+0xd6>
 800fb3c:	9900      	ldr	r1, [sp, #0]
 800fb3e:	3901      	subs	r1, #1
 800fb40:	9100      	str	r1, [sp, #0]
 800fb42:	e7e6      	b.n	800fb12 <__mdiff+0xf2>
 800fb44:	08010f40 	.word	0x08010f40
 800fb48:	08010f51 	.word	0x08010f51
 800fb4c:	00000237 	.word	0x00000237
 800fb50:	00000245 	.word	0x00000245

0800fb54 <__d2b>:
 800fb54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb56:	2101      	movs	r1, #1
 800fb58:	0016      	movs	r6, r2
 800fb5a:	001f      	movs	r7, r3
 800fb5c:	f7ff fcbe 	bl	800f4dc <_Balloc>
 800fb60:	1e04      	subs	r4, r0, #0
 800fb62:	d105      	bne.n	800fb70 <__d2b+0x1c>
 800fb64:	0022      	movs	r2, r4
 800fb66:	4b25      	ldr	r3, [pc, #148]	@ (800fbfc <__d2b+0xa8>)
 800fb68:	4825      	ldr	r0, [pc, #148]	@ (800fc00 <__d2b+0xac>)
 800fb6a:	4926      	ldr	r1, [pc, #152]	@ (800fc04 <__d2b+0xb0>)
 800fb6c:	f000 f920 	bl	800fdb0 <__assert_func>
 800fb70:	033b      	lsls	r3, r7, #12
 800fb72:	007d      	lsls	r5, r7, #1
 800fb74:	0b1b      	lsrs	r3, r3, #12
 800fb76:	0d6d      	lsrs	r5, r5, #21
 800fb78:	d002      	beq.n	800fb80 <__d2b+0x2c>
 800fb7a:	2280      	movs	r2, #128	@ 0x80
 800fb7c:	0352      	lsls	r2, r2, #13
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	9301      	str	r3, [sp, #4]
 800fb82:	2e00      	cmp	r6, #0
 800fb84:	d025      	beq.n	800fbd2 <__d2b+0x7e>
 800fb86:	4668      	mov	r0, sp
 800fb88:	9600      	str	r6, [sp, #0]
 800fb8a:	f7ff fd74 	bl	800f676 <__lo0bits>
 800fb8e:	9b01      	ldr	r3, [sp, #4]
 800fb90:	9900      	ldr	r1, [sp, #0]
 800fb92:	2800      	cmp	r0, #0
 800fb94:	d01b      	beq.n	800fbce <__d2b+0x7a>
 800fb96:	2220      	movs	r2, #32
 800fb98:	001e      	movs	r6, r3
 800fb9a:	1a12      	subs	r2, r2, r0
 800fb9c:	4096      	lsls	r6, r2
 800fb9e:	0032      	movs	r2, r6
 800fba0:	40c3      	lsrs	r3, r0
 800fba2:	430a      	orrs	r2, r1
 800fba4:	6162      	str	r2, [r4, #20]
 800fba6:	9301      	str	r3, [sp, #4]
 800fba8:	9e01      	ldr	r6, [sp, #4]
 800fbaa:	61a6      	str	r6, [r4, #24]
 800fbac:	1e73      	subs	r3, r6, #1
 800fbae:	419e      	sbcs	r6, r3
 800fbb0:	3601      	adds	r6, #1
 800fbb2:	6126      	str	r6, [r4, #16]
 800fbb4:	2d00      	cmp	r5, #0
 800fbb6:	d014      	beq.n	800fbe2 <__d2b+0x8e>
 800fbb8:	2635      	movs	r6, #53	@ 0x35
 800fbba:	4b13      	ldr	r3, [pc, #76]	@ (800fc08 <__d2b+0xb4>)
 800fbbc:	18ed      	adds	r5, r5, r3
 800fbbe:	9b08      	ldr	r3, [sp, #32]
 800fbc0:	182d      	adds	r5, r5, r0
 800fbc2:	601d      	str	r5, [r3, #0]
 800fbc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbc6:	1a36      	subs	r6, r6, r0
 800fbc8:	601e      	str	r6, [r3, #0]
 800fbca:	0020      	movs	r0, r4
 800fbcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fbce:	6161      	str	r1, [r4, #20]
 800fbd0:	e7ea      	b.n	800fba8 <__d2b+0x54>
 800fbd2:	a801      	add	r0, sp, #4
 800fbd4:	f7ff fd4f 	bl	800f676 <__lo0bits>
 800fbd8:	9b01      	ldr	r3, [sp, #4]
 800fbda:	2601      	movs	r6, #1
 800fbdc:	6163      	str	r3, [r4, #20]
 800fbde:	3020      	adds	r0, #32
 800fbe0:	e7e7      	b.n	800fbb2 <__d2b+0x5e>
 800fbe2:	4b0a      	ldr	r3, [pc, #40]	@ (800fc0c <__d2b+0xb8>)
 800fbe4:	18c0      	adds	r0, r0, r3
 800fbe6:	9b08      	ldr	r3, [sp, #32]
 800fbe8:	6018      	str	r0, [r3, #0]
 800fbea:	4b09      	ldr	r3, [pc, #36]	@ (800fc10 <__d2b+0xbc>)
 800fbec:	18f3      	adds	r3, r6, r3
 800fbee:	009b      	lsls	r3, r3, #2
 800fbf0:	18e3      	adds	r3, r4, r3
 800fbf2:	6958      	ldr	r0, [r3, #20]
 800fbf4:	f7ff fd1e 	bl	800f634 <__hi0bits>
 800fbf8:	0176      	lsls	r6, r6, #5
 800fbfa:	e7e3      	b.n	800fbc4 <__d2b+0x70>
 800fbfc:	08010f40 	.word	0x08010f40
 800fc00:	08010f51 	.word	0x08010f51
 800fc04:	0000030f 	.word	0x0000030f
 800fc08:	fffffbcd 	.word	0xfffffbcd
 800fc0c:	fffffbce 	.word	0xfffffbce
 800fc10:	3fffffff 	.word	0x3fffffff

0800fc14 <__sflush_r>:
 800fc14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc16:	220c      	movs	r2, #12
 800fc18:	5e8b      	ldrsh	r3, [r1, r2]
 800fc1a:	0005      	movs	r5, r0
 800fc1c:	000c      	movs	r4, r1
 800fc1e:	071a      	lsls	r2, r3, #28
 800fc20:	d456      	bmi.n	800fcd0 <__sflush_r+0xbc>
 800fc22:	684a      	ldr	r2, [r1, #4]
 800fc24:	2a00      	cmp	r2, #0
 800fc26:	dc02      	bgt.n	800fc2e <__sflush_r+0x1a>
 800fc28:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800fc2a:	2a00      	cmp	r2, #0
 800fc2c:	dd4e      	ble.n	800fccc <__sflush_r+0xb8>
 800fc2e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800fc30:	2f00      	cmp	r7, #0
 800fc32:	d04b      	beq.n	800fccc <__sflush_r+0xb8>
 800fc34:	2200      	movs	r2, #0
 800fc36:	2080      	movs	r0, #128	@ 0x80
 800fc38:	682e      	ldr	r6, [r5, #0]
 800fc3a:	602a      	str	r2, [r5, #0]
 800fc3c:	001a      	movs	r2, r3
 800fc3e:	0140      	lsls	r0, r0, #5
 800fc40:	6a21      	ldr	r1, [r4, #32]
 800fc42:	4002      	ands	r2, r0
 800fc44:	4203      	tst	r3, r0
 800fc46:	d033      	beq.n	800fcb0 <__sflush_r+0x9c>
 800fc48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fc4a:	89a3      	ldrh	r3, [r4, #12]
 800fc4c:	075b      	lsls	r3, r3, #29
 800fc4e:	d506      	bpl.n	800fc5e <__sflush_r+0x4a>
 800fc50:	6863      	ldr	r3, [r4, #4]
 800fc52:	1ad2      	subs	r2, r2, r3
 800fc54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d001      	beq.n	800fc5e <__sflush_r+0x4a>
 800fc5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc5c:	1ad2      	subs	r2, r2, r3
 800fc5e:	2300      	movs	r3, #0
 800fc60:	0028      	movs	r0, r5
 800fc62:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800fc64:	6a21      	ldr	r1, [r4, #32]
 800fc66:	47b8      	blx	r7
 800fc68:	89a2      	ldrh	r2, [r4, #12]
 800fc6a:	1c43      	adds	r3, r0, #1
 800fc6c:	d106      	bne.n	800fc7c <__sflush_r+0x68>
 800fc6e:	6829      	ldr	r1, [r5, #0]
 800fc70:	291d      	cmp	r1, #29
 800fc72:	d846      	bhi.n	800fd02 <__sflush_r+0xee>
 800fc74:	4b29      	ldr	r3, [pc, #164]	@ (800fd1c <__sflush_r+0x108>)
 800fc76:	40cb      	lsrs	r3, r1
 800fc78:	07db      	lsls	r3, r3, #31
 800fc7a:	d542      	bpl.n	800fd02 <__sflush_r+0xee>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	6063      	str	r3, [r4, #4]
 800fc80:	6923      	ldr	r3, [r4, #16]
 800fc82:	6023      	str	r3, [r4, #0]
 800fc84:	04d2      	lsls	r2, r2, #19
 800fc86:	d505      	bpl.n	800fc94 <__sflush_r+0x80>
 800fc88:	1c43      	adds	r3, r0, #1
 800fc8a:	d102      	bne.n	800fc92 <__sflush_r+0x7e>
 800fc8c:	682b      	ldr	r3, [r5, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d100      	bne.n	800fc94 <__sflush_r+0x80>
 800fc92:	6560      	str	r0, [r4, #84]	@ 0x54
 800fc94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc96:	602e      	str	r6, [r5, #0]
 800fc98:	2900      	cmp	r1, #0
 800fc9a:	d017      	beq.n	800fccc <__sflush_r+0xb8>
 800fc9c:	0023      	movs	r3, r4
 800fc9e:	3344      	adds	r3, #68	@ 0x44
 800fca0:	4299      	cmp	r1, r3
 800fca2:	d002      	beq.n	800fcaa <__sflush_r+0x96>
 800fca4:	0028      	movs	r0, r5
 800fca6:	f7ff fb13 	bl	800f2d0 <_free_r>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	6363      	str	r3, [r4, #52]	@ 0x34
 800fcae:	e00d      	b.n	800fccc <__sflush_r+0xb8>
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	0028      	movs	r0, r5
 800fcb4:	47b8      	blx	r7
 800fcb6:	0002      	movs	r2, r0
 800fcb8:	1c43      	adds	r3, r0, #1
 800fcba:	d1c6      	bne.n	800fc4a <__sflush_r+0x36>
 800fcbc:	682b      	ldr	r3, [r5, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d0c3      	beq.n	800fc4a <__sflush_r+0x36>
 800fcc2:	2b1d      	cmp	r3, #29
 800fcc4:	d001      	beq.n	800fcca <__sflush_r+0xb6>
 800fcc6:	2b16      	cmp	r3, #22
 800fcc8:	d11a      	bne.n	800fd00 <__sflush_r+0xec>
 800fcca:	602e      	str	r6, [r5, #0]
 800fccc:	2000      	movs	r0, #0
 800fcce:	e01e      	b.n	800fd0e <__sflush_r+0xfa>
 800fcd0:	690e      	ldr	r6, [r1, #16]
 800fcd2:	2e00      	cmp	r6, #0
 800fcd4:	d0fa      	beq.n	800fccc <__sflush_r+0xb8>
 800fcd6:	680f      	ldr	r7, [r1, #0]
 800fcd8:	600e      	str	r6, [r1, #0]
 800fcda:	1bba      	subs	r2, r7, r6
 800fcdc:	9201      	str	r2, [sp, #4]
 800fcde:	2200      	movs	r2, #0
 800fce0:	079b      	lsls	r3, r3, #30
 800fce2:	d100      	bne.n	800fce6 <__sflush_r+0xd2>
 800fce4:	694a      	ldr	r2, [r1, #20]
 800fce6:	60a2      	str	r2, [r4, #8]
 800fce8:	9b01      	ldr	r3, [sp, #4]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	ddee      	ble.n	800fccc <__sflush_r+0xb8>
 800fcee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800fcf0:	0032      	movs	r2, r6
 800fcf2:	001f      	movs	r7, r3
 800fcf4:	0028      	movs	r0, r5
 800fcf6:	9b01      	ldr	r3, [sp, #4]
 800fcf8:	6a21      	ldr	r1, [r4, #32]
 800fcfa:	47b8      	blx	r7
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	dc07      	bgt.n	800fd10 <__sflush_r+0xfc>
 800fd00:	89a2      	ldrh	r2, [r4, #12]
 800fd02:	2340      	movs	r3, #64	@ 0x40
 800fd04:	2001      	movs	r0, #1
 800fd06:	4313      	orrs	r3, r2
 800fd08:	b21b      	sxth	r3, r3
 800fd0a:	81a3      	strh	r3, [r4, #12]
 800fd0c:	4240      	negs	r0, r0
 800fd0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fd10:	9b01      	ldr	r3, [sp, #4]
 800fd12:	1836      	adds	r6, r6, r0
 800fd14:	1a1b      	subs	r3, r3, r0
 800fd16:	9301      	str	r3, [sp, #4]
 800fd18:	e7e6      	b.n	800fce8 <__sflush_r+0xd4>
 800fd1a:	46c0      	nop			@ (mov r8, r8)
 800fd1c:	20400001 	.word	0x20400001

0800fd20 <_fflush_r>:
 800fd20:	690b      	ldr	r3, [r1, #16]
 800fd22:	b570      	push	{r4, r5, r6, lr}
 800fd24:	0005      	movs	r5, r0
 800fd26:	000c      	movs	r4, r1
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d102      	bne.n	800fd32 <_fflush_r+0x12>
 800fd2c:	2500      	movs	r5, #0
 800fd2e:	0028      	movs	r0, r5
 800fd30:	bd70      	pop	{r4, r5, r6, pc}
 800fd32:	2800      	cmp	r0, #0
 800fd34:	d004      	beq.n	800fd40 <_fflush_r+0x20>
 800fd36:	6a03      	ldr	r3, [r0, #32]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d101      	bne.n	800fd40 <_fflush_r+0x20>
 800fd3c:	f7fe fb40 	bl	800e3c0 <__sinit>
 800fd40:	220c      	movs	r2, #12
 800fd42:	5ea3      	ldrsh	r3, [r4, r2]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d0f1      	beq.n	800fd2c <_fflush_r+0xc>
 800fd48:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fd4a:	07d2      	lsls	r2, r2, #31
 800fd4c:	d404      	bmi.n	800fd58 <_fflush_r+0x38>
 800fd4e:	059b      	lsls	r3, r3, #22
 800fd50:	d402      	bmi.n	800fd58 <_fflush_r+0x38>
 800fd52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd54:	f7fe fc39 	bl	800e5ca <__retarget_lock_acquire_recursive>
 800fd58:	0028      	movs	r0, r5
 800fd5a:	0021      	movs	r1, r4
 800fd5c:	f7ff ff5a 	bl	800fc14 <__sflush_r>
 800fd60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd62:	0005      	movs	r5, r0
 800fd64:	07db      	lsls	r3, r3, #31
 800fd66:	d4e2      	bmi.n	800fd2e <_fflush_r+0xe>
 800fd68:	89a3      	ldrh	r3, [r4, #12]
 800fd6a:	059b      	lsls	r3, r3, #22
 800fd6c:	d4df      	bmi.n	800fd2e <_fflush_r+0xe>
 800fd6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd70:	f7fe fc2c 	bl	800e5cc <__retarget_lock_release_recursive>
 800fd74:	e7db      	b.n	800fd2e <_fflush_r+0xe>
	...

0800fd78 <_sbrk_r>:
 800fd78:	2300      	movs	r3, #0
 800fd7a:	b570      	push	{r4, r5, r6, lr}
 800fd7c:	4d06      	ldr	r5, [pc, #24]	@ (800fd98 <_sbrk_r+0x20>)
 800fd7e:	0004      	movs	r4, r0
 800fd80:	0008      	movs	r0, r1
 800fd82:	602b      	str	r3, [r5, #0]
 800fd84:	f7f3 fae2 	bl	800334c <_sbrk>
 800fd88:	1c43      	adds	r3, r0, #1
 800fd8a:	d103      	bne.n	800fd94 <_sbrk_r+0x1c>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d000      	beq.n	800fd94 <_sbrk_r+0x1c>
 800fd92:	6023      	str	r3, [r4, #0]
 800fd94:	bd70      	pop	{r4, r5, r6, pc}
 800fd96:	46c0      	nop			@ (mov r8, r8)
 800fd98:	20000fd0 	.word	0x20000fd0

0800fd9c <memcpy>:
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	b510      	push	{r4, lr}
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d100      	bne.n	800fda6 <memcpy+0xa>
 800fda4:	bd10      	pop	{r4, pc}
 800fda6:	5ccc      	ldrb	r4, [r1, r3]
 800fda8:	54c4      	strb	r4, [r0, r3]
 800fdaa:	3301      	adds	r3, #1
 800fdac:	e7f8      	b.n	800fda0 <memcpy+0x4>
	...

0800fdb0 <__assert_func>:
 800fdb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fdb2:	0014      	movs	r4, r2
 800fdb4:	001a      	movs	r2, r3
 800fdb6:	4b09      	ldr	r3, [pc, #36]	@ (800fddc <__assert_func+0x2c>)
 800fdb8:	0005      	movs	r5, r0
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	000e      	movs	r6, r1
 800fdbe:	68d8      	ldr	r0, [r3, #12]
 800fdc0:	4b07      	ldr	r3, [pc, #28]	@ (800fde0 <__assert_func+0x30>)
 800fdc2:	2c00      	cmp	r4, #0
 800fdc4:	d101      	bne.n	800fdca <__assert_func+0x1a>
 800fdc6:	4b07      	ldr	r3, [pc, #28]	@ (800fde4 <__assert_func+0x34>)
 800fdc8:	001c      	movs	r4, r3
 800fdca:	4907      	ldr	r1, [pc, #28]	@ (800fde8 <__assert_func+0x38>)
 800fdcc:	9301      	str	r3, [sp, #4]
 800fdce:	9402      	str	r4, [sp, #8]
 800fdd0:	002b      	movs	r3, r5
 800fdd2:	9600      	str	r6, [sp, #0]
 800fdd4:	f000 f856 	bl	800fe84 <fiprintf>
 800fdd8:	f000 f864 	bl	800fea4 <abort>
 800fddc:	200001a0 	.word	0x200001a0
 800fde0:	08010fb4 	.word	0x08010fb4
 800fde4:	08010fef 	.word	0x08010fef
 800fde8:	08010fc1 	.word	0x08010fc1

0800fdec <_calloc_r>:
 800fdec:	b570      	push	{r4, r5, r6, lr}
 800fdee:	0c0b      	lsrs	r3, r1, #16
 800fdf0:	0c15      	lsrs	r5, r2, #16
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d11e      	bne.n	800fe34 <_calloc_r+0x48>
 800fdf6:	2d00      	cmp	r5, #0
 800fdf8:	d10c      	bne.n	800fe14 <_calloc_r+0x28>
 800fdfa:	b289      	uxth	r1, r1
 800fdfc:	b294      	uxth	r4, r2
 800fdfe:	434c      	muls	r4, r1
 800fe00:	0021      	movs	r1, r4
 800fe02:	f7ff fadb 	bl	800f3bc <_malloc_r>
 800fe06:	1e05      	subs	r5, r0, #0
 800fe08:	d01b      	beq.n	800fe42 <_calloc_r+0x56>
 800fe0a:	0022      	movs	r2, r4
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	f7fe fb57 	bl	800e4c0 <memset>
 800fe12:	e016      	b.n	800fe42 <_calloc_r+0x56>
 800fe14:	1c2b      	adds	r3, r5, #0
 800fe16:	1c0c      	adds	r4, r1, #0
 800fe18:	b289      	uxth	r1, r1
 800fe1a:	b292      	uxth	r2, r2
 800fe1c:	434a      	muls	r2, r1
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	b2a1      	uxth	r1, r4
 800fe22:	4359      	muls	r1, r3
 800fe24:	0c14      	lsrs	r4, r2, #16
 800fe26:	190c      	adds	r4, r1, r4
 800fe28:	0c23      	lsrs	r3, r4, #16
 800fe2a:	d107      	bne.n	800fe3c <_calloc_r+0x50>
 800fe2c:	0424      	lsls	r4, r4, #16
 800fe2e:	b292      	uxth	r2, r2
 800fe30:	4314      	orrs	r4, r2
 800fe32:	e7e5      	b.n	800fe00 <_calloc_r+0x14>
 800fe34:	2d00      	cmp	r5, #0
 800fe36:	d101      	bne.n	800fe3c <_calloc_r+0x50>
 800fe38:	1c14      	adds	r4, r2, #0
 800fe3a:	e7ed      	b.n	800fe18 <_calloc_r+0x2c>
 800fe3c:	230c      	movs	r3, #12
 800fe3e:	2500      	movs	r5, #0
 800fe40:	6003      	str	r3, [r0, #0]
 800fe42:	0028      	movs	r0, r5
 800fe44:	bd70      	pop	{r4, r5, r6, pc}

0800fe46 <__ascii_mbtowc>:
 800fe46:	b082      	sub	sp, #8
 800fe48:	2900      	cmp	r1, #0
 800fe4a:	d100      	bne.n	800fe4e <__ascii_mbtowc+0x8>
 800fe4c:	a901      	add	r1, sp, #4
 800fe4e:	1e10      	subs	r0, r2, #0
 800fe50:	d006      	beq.n	800fe60 <__ascii_mbtowc+0x1a>
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d006      	beq.n	800fe64 <__ascii_mbtowc+0x1e>
 800fe56:	7813      	ldrb	r3, [r2, #0]
 800fe58:	600b      	str	r3, [r1, #0]
 800fe5a:	7810      	ldrb	r0, [r2, #0]
 800fe5c:	1e43      	subs	r3, r0, #1
 800fe5e:	4198      	sbcs	r0, r3
 800fe60:	b002      	add	sp, #8
 800fe62:	4770      	bx	lr
 800fe64:	2002      	movs	r0, #2
 800fe66:	4240      	negs	r0, r0
 800fe68:	e7fa      	b.n	800fe60 <__ascii_mbtowc+0x1a>

0800fe6a <__ascii_wctomb>:
 800fe6a:	0003      	movs	r3, r0
 800fe6c:	1e08      	subs	r0, r1, #0
 800fe6e:	d005      	beq.n	800fe7c <__ascii_wctomb+0x12>
 800fe70:	2aff      	cmp	r2, #255	@ 0xff
 800fe72:	d904      	bls.n	800fe7e <__ascii_wctomb+0x14>
 800fe74:	228a      	movs	r2, #138	@ 0x8a
 800fe76:	2001      	movs	r0, #1
 800fe78:	601a      	str	r2, [r3, #0]
 800fe7a:	4240      	negs	r0, r0
 800fe7c:	4770      	bx	lr
 800fe7e:	2001      	movs	r0, #1
 800fe80:	700a      	strb	r2, [r1, #0]
 800fe82:	e7fb      	b.n	800fe7c <__ascii_wctomb+0x12>

0800fe84 <fiprintf>:
 800fe84:	b40e      	push	{r1, r2, r3}
 800fe86:	b517      	push	{r0, r1, r2, r4, lr}
 800fe88:	4c05      	ldr	r4, [pc, #20]	@ (800fea0 <fiprintf+0x1c>)
 800fe8a:	ab05      	add	r3, sp, #20
 800fe8c:	cb04      	ldmia	r3!, {r2}
 800fe8e:	0001      	movs	r1, r0
 800fe90:	6820      	ldr	r0, [r4, #0]
 800fe92:	9301      	str	r3, [sp, #4]
 800fe94:	f000 f834 	bl	800ff00 <_vfiprintf_r>
 800fe98:	bc1e      	pop	{r1, r2, r3, r4}
 800fe9a:	bc08      	pop	{r3}
 800fe9c:	b003      	add	sp, #12
 800fe9e:	4718      	bx	r3
 800fea0:	200001a0 	.word	0x200001a0

0800fea4 <abort>:
 800fea4:	2006      	movs	r0, #6
 800fea6:	b510      	push	{r4, lr}
 800fea8:	f000 fa10 	bl	80102cc <raise>
 800feac:	2001      	movs	r0, #1
 800feae:	f7f3 f9db 	bl	8003268 <_exit>

0800feb2 <__sfputc_r>:
 800feb2:	6893      	ldr	r3, [r2, #8]
 800feb4:	b510      	push	{r4, lr}
 800feb6:	3b01      	subs	r3, #1
 800feb8:	6093      	str	r3, [r2, #8]
 800feba:	2b00      	cmp	r3, #0
 800febc:	da04      	bge.n	800fec8 <__sfputc_r+0x16>
 800febe:	6994      	ldr	r4, [r2, #24]
 800fec0:	42a3      	cmp	r3, r4
 800fec2:	db07      	blt.n	800fed4 <__sfputc_r+0x22>
 800fec4:	290a      	cmp	r1, #10
 800fec6:	d005      	beq.n	800fed4 <__sfputc_r+0x22>
 800fec8:	6813      	ldr	r3, [r2, #0]
 800feca:	1c58      	adds	r0, r3, #1
 800fecc:	6010      	str	r0, [r2, #0]
 800fece:	7019      	strb	r1, [r3, #0]
 800fed0:	0008      	movs	r0, r1
 800fed2:	bd10      	pop	{r4, pc}
 800fed4:	f000 f930 	bl	8010138 <__swbuf_r>
 800fed8:	0001      	movs	r1, r0
 800feda:	e7f9      	b.n	800fed0 <__sfputc_r+0x1e>

0800fedc <__sfputs_r>:
 800fedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fede:	0006      	movs	r6, r0
 800fee0:	000f      	movs	r7, r1
 800fee2:	0014      	movs	r4, r2
 800fee4:	18d5      	adds	r5, r2, r3
 800fee6:	42ac      	cmp	r4, r5
 800fee8:	d101      	bne.n	800feee <__sfputs_r+0x12>
 800feea:	2000      	movs	r0, #0
 800feec:	e007      	b.n	800fefe <__sfputs_r+0x22>
 800feee:	7821      	ldrb	r1, [r4, #0]
 800fef0:	003a      	movs	r2, r7
 800fef2:	0030      	movs	r0, r6
 800fef4:	f7ff ffdd 	bl	800feb2 <__sfputc_r>
 800fef8:	3401      	adds	r4, #1
 800fefa:	1c43      	adds	r3, r0, #1
 800fefc:	d1f3      	bne.n	800fee6 <__sfputs_r+0xa>
 800fefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff00 <_vfiprintf_r>:
 800ff00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff02:	b0a1      	sub	sp, #132	@ 0x84
 800ff04:	000f      	movs	r7, r1
 800ff06:	0015      	movs	r5, r2
 800ff08:	001e      	movs	r6, r3
 800ff0a:	9003      	str	r0, [sp, #12]
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d004      	beq.n	800ff1a <_vfiprintf_r+0x1a>
 800ff10:	6a03      	ldr	r3, [r0, #32]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d101      	bne.n	800ff1a <_vfiprintf_r+0x1a>
 800ff16:	f7fe fa53 	bl	800e3c0 <__sinit>
 800ff1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff1c:	07db      	lsls	r3, r3, #31
 800ff1e:	d405      	bmi.n	800ff2c <_vfiprintf_r+0x2c>
 800ff20:	89bb      	ldrh	r3, [r7, #12]
 800ff22:	059b      	lsls	r3, r3, #22
 800ff24:	d402      	bmi.n	800ff2c <_vfiprintf_r+0x2c>
 800ff26:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ff28:	f7fe fb4f 	bl	800e5ca <__retarget_lock_acquire_recursive>
 800ff2c:	89bb      	ldrh	r3, [r7, #12]
 800ff2e:	071b      	lsls	r3, r3, #28
 800ff30:	d502      	bpl.n	800ff38 <_vfiprintf_r+0x38>
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d113      	bne.n	800ff60 <_vfiprintf_r+0x60>
 800ff38:	0039      	movs	r1, r7
 800ff3a:	9803      	ldr	r0, [sp, #12]
 800ff3c:	f000 f93e 	bl	80101bc <__swsetup_r>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d00d      	beq.n	800ff60 <_vfiprintf_r+0x60>
 800ff44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff46:	07db      	lsls	r3, r3, #31
 800ff48:	d503      	bpl.n	800ff52 <_vfiprintf_r+0x52>
 800ff4a:	2001      	movs	r0, #1
 800ff4c:	4240      	negs	r0, r0
 800ff4e:	b021      	add	sp, #132	@ 0x84
 800ff50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff52:	89bb      	ldrh	r3, [r7, #12]
 800ff54:	059b      	lsls	r3, r3, #22
 800ff56:	d4f8      	bmi.n	800ff4a <_vfiprintf_r+0x4a>
 800ff58:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ff5a:	f7fe fb37 	bl	800e5cc <__retarget_lock_release_recursive>
 800ff5e:	e7f4      	b.n	800ff4a <_vfiprintf_r+0x4a>
 800ff60:	2300      	movs	r3, #0
 800ff62:	ac08      	add	r4, sp, #32
 800ff64:	6163      	str	r3, [r4, #20]
 800ff66:	3320      	adds	r3, #32
 800ff68:	7663      	strb	r3, [r4, #25]
 800ff6a:	3310      	adds	r3, #16
 800ff6c:	76a3      	strb	r3, [r4, #26]
 800ff6e:	9607      	str	r6, [sp, #28]
 800ff70:	002e      	movs	r6, r5
 800ff72:	7833      	ldrb	r3, [r6, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d001      	beq.n	800ff7c <_vfiprintf_r+0x7c>
 800ff78:	2b25      	cmp	r3, #37	@ 0x25
 800ff7a:	d148      	bne.n	801000e <_vfiprintf_r+0x10e>
 800ff7c:	1b73      	subs	r3, r6, r5
 800ff7e:	9305      	str	r3, [sp, #20]
 800ff80:	42ae      	cmp	r6, r5
 800ff82:	d00b      	beq.n	800ff9c <_vfiprintf_r+0x9c>
 800ff84:	002a      	movs	r2, r5
 800ff86:	0039      	movs	r1, r7
 800ff88:	9803      	ldr	r0, [sp, #12]
 800ff8a:	f7ff ffa7 	bl	800fedc <__sfputs_r>
 800ff8e:	3001      	adds	r0, #1
 800ff90:	d100      	bne.n	800ff94 <_vfiprintf_r+0x94>
 800ff92:	e0ae      	b.n	80100f2 <_vfiprintf_r+0x1f2>
 800ff94:	6963      	ldr	r3, [r4, #20]
 800ff96:	9a05      	ldr	r2, [sp, #20]
 800ff98:	189b      	adds	r3, r3, r2
 800ff9a:	6163      	str	r3, [r4, #20]
 800ff9c:	7833      	ldrb	r3, [r6, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d100      	bne.n	800ffa4 <_vfiprintf_r+0xa4>
 800ffa2:	e0a6      	b.n	80100f2 <_vfiprintf_r+0x1f2>
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	4252      	negs	r2, r2
 800ffaa:	6062      	str	r2, [r4, #4]
 800ffac:	a904      	add	r1, sp, #16
 800ffae:	3254      	adds	r2, #84	@ 0x54
 800ffb0:	1852      	adds	r2, r2, r1
 800ffb2:	1c75      	adds	r5, r6, #1
 800ffb4:	6023      	str	r3, [r4, #0]
 800ffb6:	60e3      	str	r3, [r4, #12]
 800ffb8:	60a3      	str	r3, [r4, #8]
 800ffba:	7013      	strb	r3, [r2, #0]
 800ffbc:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ffbe:	4b59      	ldr	r3, [pc, #356]	@ (8010124 <_vfiprintf_r+0x224>)
 800ffc0:	2205      	movs	r2, #5
 800ffc2:	0018      	movs	r0, r3
 800ffc4:	7829      	ldrb	r1, [r5, #0]
 800ffc6:	9305      	str	r3, [sp, #20]
 800ffc8:	f7fe fb01 	bl	800e5ce <memchr>
 800ffcc:	1c6e      	adds	r6, r5, #1
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	d11f      	bne.n	8010012 <_vfiprintf_r+0x112>
 800ffd2:	6822      	ldr	r2, [r4, #0]
 800ffd4:	06d3      	lsls	r3, r2, #27
 800ffd6:	d504      	bpl.n	800ffe2 <_vfiprintf_r+0xe2>
 800ffd8:	2353      	movs	r3, #83	@ 0x53
 800ffda:	a904      	add	r1, sp, #16
 800ffdc:	185b      	adds	r3, r3, r1
 800ffde:	2120      	movs	r1, #32
 800ffe0:	7019      	strb	r1, [r3, #0]
 800ffe2:	0713      	lsls	r3, r2, #28
 800ffe4:	d504      	bpl.n	800fff0 <_vfiprintf_r+0xf0>
 800ffe6:	2353      	movs	r3, #83	@ 0x53
 800ffe8:	a904      	add	r1, sp, #16
 800ffea:	185b      	adds	r3, r3, r1
 800ffec:	212b      	movs	r1, #43	@ 0x2b
 800ffee:	7019      	strb	r1, [r3, #0]
 800fff0:	782b      	ldrb	r3, [r5, #0]
 800fff2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fff4:	d016      	beq.n	8010024 <_vfiprintf_r+0x124>
 800fff6:	002e      	movs	r6, r5
 800fff8:	2100      	movs	r1, #0
 800fffa:	200a      	movs	r0, #10
 800fffc:	68e3      	ldr	r3, [r4, #12]
 800fffe:	7832      	ldrb	r2, [r6, #0]
 8010000:	1c75      	adds	r5, r6, #1
 8010002:	3a30      	subs	r2, #48	@ 0x30
 8010004:	2a09      	cmp	r2, #9
 8010006:	d950      	bls.n	80100aa <_vfiprintf_r+0x1aa>
 8010008:	2900      	cmp	r1, #0
 801000a:	d111      	bne.n	8010030 <_vfiprintf_r+0x130>
 801000c:	e017      	b.n	801003e <_vfiprintf_r+0x13e>
 801000e:	3601      	adds	r6, #1
 8010010:	e7af      	b.n	800ff72 <_vfiprintf_r+0x72>
 8010012:	9b05      	ldr	r3, [sp, #20]
 8010014:	6822      	ldr	r2, [r4, #0]
 8010016:	1ac0      	subs	r0, r0, r3
 8010018:	2301      	movs	r3, #1
 801001a:	4083      	lsls	r3, r0
 801001c:	4313      	orrs	r3, r2
 801001e:	0035      	movs	r5, r6
 8010020:	6023      	str	r3, [r4, #0]
 8010022:	e7cc      	b.n	800ffbe <_vfiprintf_r+0xbe>
 8010024:	9b07      	ldr	r3, [sp, #28]
 8010026:	1d19      	adds	r1, r3, #4
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	9107      	str	r1, [sp, #28]
 801002c:	2b00      	cmp	r3, #0
 801002e:	db01      	blt.n	8010034 <_vfiprintf_r+0x134>
 8010030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010032:	e004      	b.n	801003e <_vfiprintf_r+0x13e>
 8010034:	425b      	negs	r3, r3
 8010036:	60e3      	str	r3, [r4, #12]
 8010038:	2302      	movs	r3, #2
 801003a:	4313      	orrs	r3, r2
 801003c:	6023      	str	r3, [r4, #0]
 801003e:	7833      	ldrb	r3, [r6, #0]
 8010040:	2b2e      	cmp	r3, #46	@ 0x2e
 8010042:	d10c      	bne.n	801005e <_vfiprintf_r+0x15e>
 8010044:	7873      	ldrb	r3, [r6, #1]
 8010046:	2b2a      	cmp	r3, #42	@ 0x2a
 8010048:	d134      	bne.n	80100b4 <_vfiprintf_r+0x1b4>
 801004a:	9b07      	ldr	r3, [sp, #28]
 801004c:	3602      	adds	r6, #2
 801004e:	1d1a      	adds	r2, r3, #4
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	9207      	str	r2, [sp, #28]
 8010054:	2b00      	cmp	r3, #0
 8010056:	da01      	bge.n	801005c <_vfiprintf_r+0x15c>
 8010058:	2301      	movs	r3, #1
 801005a:	425b      	negs	r3, r3
 801005c:	9309      	str	r3, [sp, #36]	@ 0x24
 801005e:	4d32      	ldr	r5, [pc, #200]	@ (8010128 <_vfiprintf_r+0x228>)
 8010060:	2203      	movs	r2, #3
 8010062:	0028      	movs	r0, r5
 8010064:	7831      	ldrb	r1, [r6, #0]
 8010066:	f7fe fab2 	bl	800e5ce <memchr>
 801006a:	2800      	cmp	r0, #0
 801006c:	d006      	beq.n	801007c <_vfiprintf_r+0x17c>
 801006e:	2340      	movs	r3, #64	@ 0x40
 8010070:	1b40      	subs	r0, r0, r5
 8010072:	4083      	lsls	r3, r0
 8010074:	6822      	ldr	r2, [r4, #0]
 8010076:	3601      	adds	r6, #1
 8010078:	4313      	orrs	r3, r2
 801007a:	6023      	str	r3, [r4, #0]
 801007c:	7831      	ldrb	r1, [r6, #0]
 801007e:	2206      	movs	r2, #6
 8010080:	482a      	ldr	r0, [pc, #168]	@ (801012c <_vfiprintf_r+0x22c>)
 8010082:	1c75      	adds	r5, r6, #1
 8010084:	7621      	strb	r1, [r4, #24]
 8010086:	f7fe faa2 	bl	800e5ce <memchr>
 801008a:	2800      	cmp	r0, #0
 801008c:	d040      	beq.n	8010110 <_vfiprintf_r+0x210>
 801008e:	4b28      	ldr	r3, [pc, #160]	@ (8010130 <_vfiprintf_r+0x230>)
 8010090:	2b00      	cmp	r3, #0
 8010092:	d122      	bne.n	80100da <_vfiprintf_r+0x1da>
 8010094:	2207      	movs	r2, #7
 8010096:	9b07      	ldr	r3, [sp, #28]
 8010098:	3307      	adds	r3, #7
 801009a:	4393      	bics	r3, r2
 801009c:	3308      	adds	r3, #8
 801009e:	9307      	str	r3, [sp, #28]
 80100a0:	6963      	ldr	r3, [r4, #20]
 80100a2:	9a04      	ldr	r2, [sp, #16]
 80100a4:	189b      	adds	r3, r3, r2
 80100a6:	6163      	str	r3, [r4, #20]
 80100a8:	e762      	b.n	800ff70 <_vfiprintf_r+0x70>
 80100aa:	4343      	muls	r3, r0
 80100ac:	002e      	movs	r6, r5
 80100ae:	2101      	movs	r1, #1
 80100b0:	189b      	adds	r3, r3, r2
 80100b2:	e7a4      	b.n	800fffe <_vfiprintf_r+0xfe>
 80100b4:	2300      	movs	r3, #0
 80100b6:	200a      	movs	r0, #10
 80100b8:	0019      	movs	r1, r3
 80100ba:	3601      	adds	r6, #1
 80100bc:	6063      	str	r3, [r4, #4]
 80100be:	7832      	ldrb	r2, [r6, #0]
 80100c0:	1c75      	adds	r5, r6, #1
 80100c2:	3a30      	subs	r2, #48	@ 0x30
 80100c4:	2a09      	cmp	r2, #9
 80100c6:	d903      	bls.n	80100d0 <_vfiprintf_r+0x1d0>
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d0c8      	beq.n	801005e <_vfiprintf_r+0x15e>
 80100cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80100ce:	e7c6      	b.n	801005e <_vfiprintf_r+0x15e>
 80100d0:	4341      	muls	r1, r0
 80100d2:	002e      	movs	r6, r5
 80100d4:	2301      	movs	r3, #1
 80100d6:	1889      	adds	r1, r1, r2
 80100d8:	e7f1      	b.n	80100be <_vfiprintf_r+0x1be>
 80100da:	aa07      	add	r2, sp, #28
 80100dc:	9200      	str	r2, [sp, #0]
 80100de:	0021      	movs	r1, r4
 80100e0:	003a      	movs	r2, r7
 80100e2:	4b14      	ldr	r3, [pc, #80]	@ (8010134 <_vfiprintf_r+0x234>)
 80100e4:	9803      	ldr	r0, [sp, #12]
 80100e6:	f7fd fd21 	bl	800db2c <_printf_float>
 80100ea:	9004      	str	r0, [sp, #16]
 80100ec:	9b04      	ldr	r3, [sp, #16]
 80100ee:	3301      	adds	r3, #1
 80100f0:	d1d6      	bne.n	80100a0 <_vfiprintf_r+0x1a0>
 80100f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100f4:	07db      	lsls	r3, r3, #31
 80100f6:	d405      	bmi.n	8010104 <_vfiprintf_r+0x204>
 80100f8:	89bb      	ldrh	r3, [r7, #12]
 80100fa:	059b      	lsls	r3, r3, #22
 80100fc:	d402      	bmi.n	8010104 <_vfiprintf_r+0x204>
 80100fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010100:	f7fe fa64 	bl	800e5cc <__retarget_lock_release_recursive>
 8010104:	89bb      	ldrh	r3, [r7, #12]
 8010106:	065b      	lsls	r3, r3, #25
 8010108:	d500      	bpl.n	801010c <_vfiprintf_r+0x20c>
 801010a:	e71e      	b.n	800ff4a <_vfiprintf_r+0x4a>
 801010c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801010e:	e71e      	b.n	800ff4e <_vfiprintf_r+0x4e>
 8010110:	aa07      	add	r2, sp, #28
 8010112:	9200      	str	r2, [sp, #0]
 8010114:	0021      	movs	r1, r4
 8010116:	003a      	movs	r2, r7
 8010118:	4b06      	ldr	r3, [pc, #24]	@ (8010134 <_vfiprintf_r+0x234>)
 801011a:	9803      	ldr	r0, [sp, #12]
 801011c:	f7fd ffb4 	bl	800e088 <_printf_i>
 8010120:	e7e3      	b.n	80100ea <_vfiprintf_r+0x1ea>
 8010122:	46c0      	nop			@ (mov r8, r8)
 8010124:	08010ff0 	.word	0x08010ff0
 8010128:	08010ff6 	.word	0x08010ff6
 801012c:	08010ffa 	.word	0x08010ffa
 8010130:	0800db2d 	.word	0x0800db2d
 8010134:	0800fedd 	.word	0x0800fedd

08010138 <__swbuf_r>:
 8010138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801013a:	0006      	movs	r6, r0
 801013c:	000d      	movs	r5, r1
 801013e:	0014      	movs	r4, r2
 8010140:	2800      	cmp	r0, #0
 8010142:	d004      	beq.n	801014e <__swbuf_r+0x16>
 8010144:	6a03      	ldr	r3, [r0, #32]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d101      	bne.n	801014e <__swbuf_r+0x16>
 801014a:	f7fe f939 	bl	800e3c0 <__sinit>
 801014e:	69a3      	ldr	r3, [r4, #24]
 8010150:	60a3      	str	r3, [r4, #8]
 8010152:	89a3      	ldrh	r3, [r4, #12]
 8010154:	071b      	lsls	r3, r3, #28
 8010156:	d502      	bpl.n	801015e <__swbuf_r+0x26>
 8010158:	6923      	ldr	r3, [r4, #16]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d109      	bne.n	8010172 <__swbuf_r+0x3a>
 801015e:	0021      	movs	r1, r4
 8010160:	0030      	movs	r0, r6
 8010162:	f000 f82b 	bl	80101bc <__swsetup_r>
 8010166:	2800      	cmp	r0, #0
 8010168:	d003      	beq.n	8010172 <__swbuf_r+0x3a>
 801016a:	2501      	movs	r5, #1
 801016c:	426d      	negs	r5, r5
 801016e:	0028      	movs	r0, r5
 8010170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010172:	6923      	ldr	r3, [r4, #16]
 8010174:	6820      	ldr	r0, [r4, #0]
 8010176:	b2ef      	uxtb	r7, r5
 8010178:	1ac0      	subs	r0, r0, r3
 801017a:	6963      	ldr	r3, [r4, #20]
 801017c:	b2ed      	uxtb	r5, r5
 801017e:	4283      	cmp	r3, r0
 8010180:	dc05      	bgt.n	801018e <__swbuf_r+0x56>
 8010182:	0021      	movs	r1, r4
 8010184:	0030      	movs	r0, r6
 8010186:	f7ff fdcb 	bl	800fd20 <_fflush_r>
 801018a:	2800      	cmp	r0, #0
 801018c:	d1ed      	bne.n	801016a <__swbuf_r+0x32>
 801018e:	68a3      	ldr	r3, [r4, #8]
 8010190:	3001      	adds	r0, #1
 8010192:	3b01      	subs	r3, #1
 8010194:	60a3      	str	r3, [r4, #8]
 8010196:	6823      	ldr	r3, [r4, #0]
 8010198:	1c5a      	adds	r2, r3, #1
 801019a:	6022      	str	r2, [r4, #0]
 801019c:	701f      	strb	r7, [r3, #0]
 801019e:	6963      	ldr	r3, [r4, #20]
 80101a0:	4283      	cmp	r3, r0
 80101a2:	d004      	beq.n	80101ae <__swbuf_r+0x76>
 80101a4:	89a3      	ldrh	r3, [r4, #12]
 80101a6:	07db      	lsls	r3, r3, #31
 80101a8:	d5e1      	bpl.n	801016e <__swbuf_r+0x36>
 80101aa:	2d0a      	cmp	r5, #10
 80101ac:	d1df      	bne.n	801016e <__swbuf_r+0x36>
 80101ae:	0021      	movs	r1, r4
 80101b0:	0030      	movs	r0, r6
 80101b2:	f7ff fdb5 	bl	800fd20 <_fflush_r>
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d0d9      	beq.n	801016e <__swbuf_r+0x36>
 80101ba:	e7d6      	b.n	801016a <__swbuf_r+0x32>

080101bc <__swsetup_r>:
 80101bc:	4b2d      	ldr	r3, [pc, #180]	@ (8010274 <__swsetup_r+0xb8>)
 80101be:	b570      	push	{r4, r5, r6, lr}
 80101c0:	0005      	movs	r5, r0
 80101c2:	6818      	ldr	r0, [r3, #0]
 80101c4:	000c      	movs	r4, r1
 80101c6:	2800      	cmp	r0, #0
 80101c8:	d004      	beq.n	80101d4 <__swsetup_r+0x18>
 80101ca:	6a03      	ldr	r3, [r0, #32]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d101      	bne.n	80101d4 <__swsetup_r+0x18>
 80101d0:	f7fe f8f6 	bl	800e3c0 <__sinit>
 80101d4:	220c      	movs	r2, #12
 80101d6:	5ea3      	ldrsh	r3, [r4, r2]
 80101d8:	071a      	lsls	r2, r3, #28
 80101da:	d423      	bmi.n	8010224 <__swsetup_r+0x68>
 80101dc:	06da      	lsls	r2, r3, #27
 80101de:	d407      	bmi.n	80101f0 <__swsetup_r+0x34>
 80101e0:	2209      	movs	r2, #9
 80101e2:	602a      	str	r2, [r5, #0]
 80101e4:	2240      	movs	r2, #64	@ 0x40
 80101e6:	2001      	movs	r0, #1
 80101e8:	4313      	orrs	r3, r2
 80101ea:	81a3      	strh	r3, [r4, #12]
 80101ec:	4240      	negs	r0, r0
 80101ee:	e03a      	b.n	8010266 <__swsetup_r+0xaa>
 80101f0:	075b      	lsls	r3, r3, #29
 80101f2:	d513      	bpl.n	801021c <__swsetup_r+0x60>
 80101f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101f6:	2900      	cmp	r1, #0
 80101f8:	d008      	beq.n	801020c <__swsetup_r+0x50>
 80101fa:	0023      	movs	r3, r4
 80101fc:	3344      	adds	r3, #68	@ 0x44
 80101fe:	4299      	cmp	r1, r3
 8010200:	d002      	beq.n	8010208 <__swsetup_r+0x4c>
 8010202:	0028      	movs	r0, r5
 8010204:	f7ff f864 	bl	800f2d0 <_free_r>
 8010208:	2300      	movs	r3, #0
 801020a:	6363      	str	r3, [r4, #52]	@ 0x34
 801020c:	2224      	movs	r2, #36	@ 0x24
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	4393      	bics	r3, r2
 8010212:	81a3      	strh	r3, [r4, #12]
 8010214:	2300      	movs	r3, #0
 8010216:	6063      	str	r3, [r4, #4]
 8010218:	6923      	ldr	r3, [r4, #16]
 801021a:	6023      	str	r3, [r4, #0]
 801021c:	2308      	movs	r3, #8
 801021e:	89a2      	ldrh	r2, [r4, #12]
 8010220:	4313      	orrs	r3, r2
 8010222:	81a3      	strh	r3, [r4, #12]
 8010224:	6923      	ldr	r3, [r4, #16]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d10b      	bne.n	8010242 <__swsetup_r+0x86>
 801022a:	21a0      	movs	r1, #160	@ 0xa0
 801022c:	2280      	movs	r2, #128	@ 0x80
 801022e:	89a3      	ldrh	r3, [r4, #12]
 8010230:	0089      	lsls	r1, r1, #2
 8010232:	0092      	lsls	r2, r2, #2
 8010234:	400b      	ands	r3, r1
 8010236:	4293      	cmp	r3, r2
 8010238:	d003      	beq.n	8010242 <__swsetup_r+0x86>
 801023a:	0021      	movs	r1, r4
 801023c:	0028      	movs	r0, r5
 801023e:	f000 f88f 	bl	8010360 <__smakebuf_r>
 8010242:	220c      	movs	r2, #12
 8010244:	5ea3      	ldrsh	r3, [r4, r2]
 8010246:	2101      	movs	r1, #1
 8010248:	001a      	movs	r2, r3
 801024a:	400a      	ands	r2, r1
 801024c:	420b      	tst	r3, r1
 801024e:	d00b      	beq.n	8010268 <__swsetup_r+0xac>
 8010250:	2200      	movs	r2, #0
 8010252:	60a2      	str	r2, [r4, #8]
 8010254:	6962      	ldr	r2, [r4, #20]
 8010256:	4252      	negs	r2, r2
 8010258:	61a2      	str	r2, [r4, #24]
 801025a:	2000      	movs	r0, #0
 801025c:	6922      	ldr	r2, [r4, #16]
 801025e:	4282      	cmp	r2, r0
 8010260:	d101      	bne.n	8010266 <__swsetup_r+0xaa>
 8010262:	061a      	lsls	r2, r3, #24
 8010264:	d4be      	bmi.n	80101e4 <__swsetup_r+0x28>
 8010266:	bd70      	pop	{r4, r5, r6, pc}
 8010268:	0799      	lsls	r1, r3, #30
 801026a:	d400      	bmi.n	801026e <__swsetup_r+0xb2>
 801026c:	6962      	ldr	r2, [r4, #20]
 801026e:	60a2      	str	r2, [r4, #8]
 8010270:	e7f3      	b.n	801025a <__swsetup_r+0x9e>
 8010272:	46c0      	nop			@ (mov r8, r8)
 8010274:	200001a0 	.word	0x200001a0

08010278 <_raise_r>:
 8010278:	b570      	push	{r4, r5, r6, lr}
 801027a:	0004      	movs	r4, r0
 801027c:	000d      	movs	r5, r1
 801027e:	291f      	cmp	r1, #31
 8010280:	d904      	bls.n	801028c <_raise_r+0x14>
 8010282:	2316      	movs	r3, #22
 8010284:	6003      	str	r3, [r0, #0]
 8010286:	2001      	movs	r0, #1
 8010288:	4240      	negs	r0, r0
 801028a:	bd70      	pop	{r4, r5, r6, pc}
 801028c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801028e:	2b00      	cmp	r3, #0
 8010290:	d004      	beq.n	801029c <_raise_r+0x24>
 8010292:	008a      	lsls	r2, r1, #2
 8010294:	189b      	adds	r3, r3, r2
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	2a00      	cmp	r2, #0
 801029a:	d108      	bne.n	80102ae <_raise_r+0x36>
 801029c:	0020      	movs	r0, r4
 801029e:	f000 f831 	bl	8010304 <_getpid_r>
 80102a2:	002a      	movs	r2, r5
 80102a4:	0001      	movs	r1, r0
 80102a6:	0020      	movs	r0, r4
 80102a8:	f000 f81a 	bl	80102e0 <_kill_r>
 80102ac:	e7ed      	b.n	801028a <_raise_r+0x12>
 80102ae:	2a01      	cmp	r2, #1
 80102b0:	d009      	beq.n	80102c6 <_raise_r+0x4e>
 80102b2:	1c51      	adds	r1, r2, #1
 80102b4:	d103      	bne.n	80102be <_raise_r+0x46>
 80102b6:	2316      	movs	r3, #22
 80102b8:	6003      	str	r3, [r0, #0]
 80102ba:	2001      	movs	r0, #1
 80102bc:	e7e5      	b.n	801028a <_raise_r+0x12>
 80102be:	2100      	movs	r1, #0
 80102c0:	0028      	movs	r0, r5
 80102c2:	6019      	str	r1, [r3, #0]
 80102c4:	4790      	blx	r2
 80102c6:	2000      	movs	r0, #0
 80102c8:	e7df      	b.n	801028a <_raise_r+0x12>
	...

080102cc <raise>:
 80102cc:	b510      	push	{r4, lr}
 80102ce:	4b03      	ldr	r3, [pc, #12]	@ (80102dc <raise+0x10>)
 80102d0:	0001      	movs	r1, r0
 80102d2:	6818      	ldr	r0, [r3, #0]
 80102d4:	f7ff ffd0 	bl	8010278 <_raise_r>
 80102d8:	bd10      	pop	{r4, pc}
 80102da:	46c0      	nop			@ (mov r8, r8)
 80102dc:	200001a0 	.word	0x200001a0

080102e0 <_kill_r>:
 80102e0:	2300      	movs	r3, #0
 80102e2:	b570      	push	{r4, r5, r6, lr}
 80102e4:	4d06      	ldr	r5, [pc, #24]	@ (8010300 <_kill_r+0x20>)
 80102e6:	0004      	movs	r4, r0
 80102e8:	0008      	movs	r0, r1
 80102ea:	0011      	movs	r1, r2
 80102ec:	602b      	str	r3, [r5, #0]
 80102ee:	f7f2 ffab 	bl	8003248 <_kill>
 80102f2:	1c43      	adds	r3, r0, #1
 80102f4:	d103      	bne.n	80102fe <_kill_r+0x1e>
 80102f6:	682b      	ldr	r3, [r5, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d000      	beq.n	80102fe <_kill_r+0x1e>
 80102fc:	6023      	str	r3, [r4, #0]
 80102fe:	bd70      	pop	{r4, r5, r6, pc}
 8010300:	20000fd0 	.word	0x20000fd0

08010304 <_getpid_r>:
 8010304:	b510      	push	{r4, lr}
 8010306:	f7f2 ff99 	bl	800323c <_getpid>
 801030a:	bd10      	pop	{r4, pc}

0801030c <__swhatbuf_r>:
 801030c:	b570      	push	{r4, r5, r6, lr}
 801030e:	000e      	movs	r6, r1
 8010310:	001d      	movs	r5, r3
 8010312:	230e      	movs	r3, #14
 8010314:	5ec9      	ldrsh	r1, [r1, r3]
 8010316:	0014      	movs	r4, r2
 8010318:	b096      	sub	sp, #88	@ 0x58
 801031a:	2900      	cmp	r1, #0
 801031c:	da0c      	bge.n	8010338 <__swhatbuf_r+0x2c>
 801031e:	89b2      	ldrh	r2, [r6, #12]
 8010320:	2380      	movs	r3, #128	@ 0x80
 8010322:	0011      	movs	r1, r2
 8010324:	4019      	ands	r1, r3
 8010326:	421a      	tst	r2, r3
 8010328:	d114      	bne.n	8010354 <__swhatbuf_r+0x48>
 801032a:	2380      	movs	r3, #128	@ 0x80
 801032c:	00db      	lsls	r3, r3, #3
 801032e:	2000      	movs	r0, #0
 8010330:	6029      	str	r1, [r5, #0]
 8010332:	6023      	str	r3, [r4, #0]
 8010334:	b016      	add	sp, #88	@ 0x58
 8010336:	bd70      	pop	{r4, r5, r6, pc}
 8010338:	466a      	mov	r2, sp
 801033a:	f000 f853 	bl	80103e4 <_fstat_r>
 801033e:	2800      	cmp	r0, #0
 8010340:	dbed      	blt.n	801031e <__swhatbuf_r+0x12>
 8010342:	23f0      	movs	r3, #240	@ 0xf0
 8010344:	9901      	ldr	r1, [sp, #4]
 8010346:	021b      	lsls	r3, r3, #8
 8010348:	4019      	ands	r1, r3
 801034a:	4b04      	ldr	r3, [pc, #16]	@ (801035c <__swhatbuf_r+0x50>)
 801034c:	18c9      	adds	r1, r1, r3
 801034e:	424b      	negs	r3, r1
 8010350:	4159      	adcs	r1, r3
 8010352:	e7ea      	b.n	801032a <__swhatbuf_r+0x1e>
 8010354:	2100      	movs	r1, #0
 8010356:	2340      	movs	r3, #64	@ 0x40
 8010358:	e7e9      	b.n	801032e <__swhatbuf_r+0x22>
 801035a:	46c0      	nop			@ (mov r8, r8)
 801035c:	ffffe000 	.word	0xffffe000

08010360 <__smakebuf_r>:
 8010360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010362:	2602      	movs	r6, #2
 8010364:	898b      	ldrh	r3, [r1, #12]
 8010366:	0005      	movs	r5, r0
 8010368:	000c      	movs	r4, r1
 801036a:	b085      	sub	sp, #20
 801036c:	4233      	tst	r3, r6
 801036e:	d007      	beq.n	8010380 <__smakebuf_r+0x20>
 8010370:	0023      	movs	r3, r4
 8010372:	3347      	adds	r3, #71	@ 0x47
 8010374:	6023      	str	r3, [r4, #0]
 8010376:	6123      	str	r3, [r4, #16]
 8010378:	2301      	movs	r3, #1
 801037a:	6163      	str	r3, [r4, #20]
 801037c:	b005      	add	sp, #20
 801037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010380:	ab03      	add	r3, sp, #12
 8010382:	aa02      	add	r2, sp, #8
 8010384:	f7ff ffc2 	bl	801030c <__swhatbuf_r>
 8010388:	9f02      	ldr	r7, [sp, #8]
 801038a:	9001      	str	r0, [sp, #4]
 801038c:	0039      	movs	r1, r7
 801038e:	0028      	movs	r0, r5
 8010390:	f7ff f814 	bl	800f3bc <_malloc_r>
 8010394:	2800      	cmp	r0, #0
 8010396:	d108      	bne.n	80103aa <__smakebuf_r+0x4a>
 8010398:	220c      	movs	r2, #12
 801039a:	5ea3      	ldrsh	r3, [r4, r2]
 801039c:	059a      	lsls	r2, r3, #22
 801039e:	d4ed      	bmi.n	801037c <__smakebuf_r+0x1c>
 80103a0:	2203      	movs	r2, #3
 80103a2:	4393      	bics	r3, r2
 80103a4:	431e      	orrs	r6, r3
 80103a6:	81a6      	strh	r6, [r4, #12]
 80103a8:	e7e2      	b.n	8010370 <__smakebuf_r+0x10>
 80103aa:	2380      	movs	r3, #128	@ 0x80
 80103ac:	89a2      	ldrh	r2, [r4, #12]
 80103ae:	6020      	str	r0, [r4, #0]
 80103b0:	4313      	orrs	r3, r2
 80103b2:	81a3      	strh	r3, [r4, #12]
 80103b4:	9b03      	ldr	r3, [sp, #12]
 80103b6:	6120      	str	r0, [r4, #16]
 80103b8:	6167      	str	r7, [r4, #20]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00c      	beq.n	80103d8 <__smakebuf_r+0x78>
 80103be:	0028      	movs	r0, r5
 80103c0:	230e      	movs	r3, #14
 80103c2:	5ee1      	ldrsh	r1, [r4, r3]
 80103c4:	f000 f820 	bl	8010408 <_isatty_r>
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d005      	beq.n	80103d8 <__smakebuf_r+0x78>
 80103cc:	2303      	movs	r3, #3
 80103ce:	89a2      	ldrh	r2, [r4, #12]
 80103d0:	439a      	bics	r2, r3
 80103d2:	3b02      	subs	r3, #2
 80103d4:	4313      	orrs	r3, r2
 80103d6:	81a3      	strh	r3, [r4, #12]
 80103d8:	89a3      	ldrh	r3, [r4, #12]
 80103da:	9a01      	ldr	r2, [sp, #4]
 80103dc:	4313      	orrs	r3, r2
 80103de:	81a3      	strh	r3, [r4, #12]
 80103e0:	e7cc      	b.n	801037c <__smakebuf_r+0x1c>
	...

080103e4 <_fstat_r>:
 80103e4:	2300      	movs	r3, #0
 80103e6:	b570      	push	{r4, r5, r6, lr}
 80103e8:	4d06      	ldr	r5, [pc, #24]	@ (8010404 <_fstat_r+0x20>)
 80103ea:	0004      	movs	r4, r0
 80103ec:	0008      	movs	r0, r1
 80103ee:	0011      	movs	r1, r2
 80103f0:	602b      	str	r3, [r5, #0]
 80103f2:	f7f2 ff89 	bl	8003308 <_fstat>
 80103f6:	1c43      	adds	r3, r0, #1
 80103f8:	d103      	bne.n	8010402 <_fstat_r+0x1e>
 80103fa:	682b      	ldr	r3, [r5, #0]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d000      	beq.n	8010402 <_fstat_r+0x1e>
 8010400:	6023      	str	r3, [r4, #0]
 8010402:	bd70      	pop	{r4, r5, r6, pc}
 8010404:	20000fd0 	.word	0x20000fd0

08010408 <_isatty_r>:
 8010408:	2300      	movs	r3, #0
 801040a:	b570      	push	{r4, r5, r6, lr}
 801040c:	4d06      	ldr	r5, [pc, #24]	@ (8010428 <_isatty_r+0x20>)
 801040e:	0004      	movs	r4, r0
 8010410:	0008      	movs	r0, r1
 8010412:	602b      	str	r3, [r5, #0]
 8010414:	f7f2 ff86 	bl	8003324 <_isatty>
 8010418:	1c43      	adds	r3, r0, #1
 801041a:	d103      	bne.n	8010424 <_isatty_r+0x1c>
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d000      	beq.n	8010424 <_isatty_r+0x1c>
 8010422:	6023      	str	r3, [r4, #0]
 8010424:	bd70      	pop	{r4, r5, r6, pc}
 8010426:	46c0      	nop			@ (mov r8, r8)
 8010428:	20000fd0 	.word	0x20000fd0

0801042c <_init>:
 801042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042e:	46c0      	nop			@ (mov r8, r8)
 8010430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010432:	bc08      	pop	{r3}
 8010434:	469e      	mov	lr, r3
 8010436:	4770      	bx	lr

08010438 <_fini>:
 8010438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801043a:	46c0      	nop			@ (mov r8, r8)
 801043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801043e:	bc08      	pop	{r3}
 8010440:	469e      	mov	lr, r3
 8010442:	4770      	bx	lr
